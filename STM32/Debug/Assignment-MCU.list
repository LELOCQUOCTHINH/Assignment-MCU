
Assignment-MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e00  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08005f0c  08005f0c  00015f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ff8  08005ff8  000200dc  2**0
                  CONTENTS
  4 .ARM          00000008  08005ff8  08005ff8  00015ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006000  08006000  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006000  08006000  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006004  08006004  00016004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  08006008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  200000dc  080060e4  000200dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  080060e4  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016725  00000000  00000000  00020105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002edd  00000000  00000000  0003682a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  00039708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d8  00000000  00000000  0003a8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a7f  00000000  00000000  0003b9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001604b  00000000  00000000  00055447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e5df  00000000  00000000  0006b492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f9a71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ea8  00000000  00000000  000f9ac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000dc 	.word	0x200000dc
 8000128:	00000000 	.word	0x00000000
 800012c:	08005ef4 	.word	0x08005ef4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e0 	.word	0x200000e0
 8000148:	08005ef4 	.word	0x08005ef4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_ldivmod>:
 800015c:	b97b      	cbnz	r3, 800017e <__aeabi_ldivmod+0x22>
 800015e:	b972      	cbnz	r2, 800017e <__aeabi_ldivmod+0x22>
 8000160:	2900      	cmp	r1, #0
 8000162:	bfbe      	ittt	lt
 8000164:	2000      	movlt	r0, #0
 8000166:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800016a:	e006      	blt.n	800017a <__aeabi_ldivmod+0x1e>
 800016c:	bf08      	it	eq
 800016e:	2800      	cmpeq	r0, #0
 8000170:	bf1c      	itt	ne
 8000172:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000176:	f04f 30ff 	movne.w	r0, #4294967295
 800017a:	f000 b9a1 	b.w	80004c0 <__aeabi_idiv0>
 800017e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000182:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000186:	2900      	cmp	r1, #0
 8000188:	db09      	blt.n	800019e <__aeabi_ldivmod+0x42>
 800018a:	2b00      	cmp	r3, #0
 800018c:	db1a      	blt.n	80001c4 <__aeabi_ldivmod+0x68>
 800018e:	f000 f835 	bl	80001fc <__udivmoddi4>
 8000192:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000196:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800019a:	b004      	add	sp, #16
 800019c:	4770      	bx	lr
 800019e:	4240      	negs	r0, r0
 80001a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	db1b      	blt.n	80001e0 <__aeabi_ldivmod+0x84>
 80001a8:	f000 f828 	bl	80001fc <__udivmoddi4>
 80001ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b4:	b004      	add	sp, #16
 80001b6:	4240      	negs	r0, r0
 80001b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001bc:	4252      	negs	r2, r2
 80001be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001c2:	4770      	bx	lr
 80001c4:	4252      	negs	r2, r2
 80001c6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ca:	f000 f817 	bl	80001fc <__udivmoddi4>
 80001ce:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001d6:	b004      	add	sp, #16
 80001d8:	4240      	negs	r0, r0
 80001da:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001de:	4770      	bx	lr
 80001e0:	4252      	negs	r2, r2
 80001e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e6:	f000 f809 	bl	80001fc <__udivmoddi4>
 80001ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f2:	b004      	add	sp, #16
 80001f4:	4252      	negs	r2, r2
 80001f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	468e      	mov	lr, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	f040 8083 	bne.w	8000314 <__udivmoddi4+0x118>
 800020e:	428a      	cmp	r2, r1
 8000210:	4617      	mov	r7, r2
 8000212:	d947      	bls.n	80002a4 <__udivmoddi4+0xa8>
 8000214:	fab2 f382 	clz	r3, r2
 8000218:	b14b      	cbz	r3, 800022e <__udivmoddi4+0x32>
 800021a:	f1c3 0120 	rsb	r1, r3, #32
 800021e:	fa05 fe03 	lsl.w	lr, r5, r3
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	409f      	lsls	r7, r3
 8000228:	ea41 0e0e 	orr.w	lr, r1, lr
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	fbbe fcf8 	udiv	ip, lr, r8
 8000236:	fa1f f987 	uxth.w	r9, r7
 800023a:	fb08 e21c 	mls	r2, r8, ip, lr
 800023e:	fb0c f009 	mul.w	r0, ip, r9
 8000242:	0c21      	lsrs	r1, r4, #16
 8000244:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x66>
 800024c:	18ba      	adds	r2, r7, r2
 800024e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000252:	f080 8118 	bcs.w	8000486 <__udivmoddi4+0x28a>
 8000256:	4290      	cmp	r0, r2
 8000258:	f240 8115 	bls.w	8000486 <__udivmoddi4+0x28a>
 800025c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000260:	443a      	add	r2, r7
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	fbb2 f0f8 	udiv	r0, r2, r8
 8000268:	fb08 2210 	mls	r2, r8, r0, r2
 800026c:	fb00 f109 	mul.w	r1, r0, r9
 8000270:	b2a4      	uxth	r4, r4
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	42a1      	cmp	r1, r4
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x92>
 800027a:	193c      	adds	r4, r7, r4
 800027c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000280:	f080 8103 	bcs.w	800048a <__udivmoddi4+0x28e>
 8000284:	42a1      	cmp	r1, r4
 8000286:	f240 8100 	bls.w	800048a <__udivmoddi4+0x28e>
 800028a:	3802      	subs	r0, #2
 800028c:	443c      	add	r4, r7
 800028e:	1a64      	subs	r4, r4, r1
 8000290:	2100      	movs	r1, #0
 8000292:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa4>
 8000298:	2200      	movs	r2, #0
 800029a:	40dc      	lsrs	r4, r3
 800029c:	e9c6 4200 	strd	r4, r2, [r6]
 80002a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a4:	b902      	cbnz	r2, 80002a8 <__udivmoddi4+0xac>
 80002a6:	deff      	udf	#255	; 0xff
 80002a8:	fab2 f382 	clz	r3, r2
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14f      	bne.n	8000350 <__udivmoddi4+0x154>
 80002b0:	1a8d      	subs	r5, r1, r2
 80002b2:	2101      	movs	r1, #1
 80002b4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80002b8:	fa1f f882 	uxth.w	r8, r2
 80002bc:	fbb5 fcfe 	udiv	ip, r5, lr
 80002c0:	fb0e 551c 	mls	r5, lr, ip, r5
 80002c4:	fb08 f00c 	mul.w	r0, r8, ip
 80002c8:	0c22      	lsrs	r2, r4, #16
 80002ca:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80002ce:	42a8      	cmp	r0, r5
 80002d0:	d907      	bls.n	80002e2 <__udivmoddi4+0xe6>
 80002d2:	197d      	adds	r5, r7, r5
 80002d4:	f10c 32ff 	add.w	r2, ip, #4294967295
 80002d8:	d202      	bcs.n	80002e0 <__udivmoddi4+0xe4>
 80002da:	42a8      	cmp	r0, r5
 80002dc:	f200 80e9 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 80002e0:	4694      	mov	ip, r2
 80002e2:	1a2d      	subs	r5, r5, r0
 80002e4:	fbb5 f0fe 	udiv	r0, r5, lr
 80002e8:	fb0e 5510 	mls	r5, lr, r0, r5
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	b2a4      	uxth	r4, r4
 80002f2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002f6:	45a0      	cmp	r8, r4
 80002f8:	d907      	bls.n	800030a <__udivmoddi4+0x10e>
 80002fa:	193c      	adds	r4, r7, r4
 80002fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000300:	d202      	bcs.n	8000308 <__udivmoddi4+0x10c>
 8000302:	45a0      	cmp	r8, r4
 8000304:	f200 80d9 	bhi.w	80004ba <__udivmoddi4+0x2be>
 8000308:	4610      	mov	r0, r2
 800030a:	eba4 0408 	sub.w	r4, r4, r8
 800030e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000312:	e7c0      	b.n	8000296 <__udivmoddi4+0x9a>
 8000314:	428b      	cmp	r3, r1
 8000316:	d908      	bls.n	800032a <__udivmoddi4+0x12e>
 8000318:	2e00      	cmp	r6, #0
 800031a:	f000 80b1 	beq.w	8000480 <__udivmoddi4+0x284>
 800031e:	2100      	movs	r1, #0
 8000320:	e9c6 0500 	strd	r0, r5, [r6]
 8000324:	4608      	mov	r0, r1
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f183 	clz	r1, r3
 800032e:	2900      	cmp	r1, #0
 8000330:	d14b      	bne.n	80003ca <__udivmoddi4+0x1ce>
 8000332:	42ab      	cmp	r3, r5
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0x140>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80b9 	bhi.w	80004ae <__udivmoddi4+0x2b2>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb65 0303 	sbc.w	r3, r5, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2e00      	cmp	r6, #0
 8000348:	d0aa      	beq.n	80002a0 <__udivmoddi4+0xa4>
 800034a:	e9c6 4e00 	strd	r4, lr, [r6]
 800034e:	e7a7      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000350:	409f      	lsls	r7, r3
 8000352:	f1c3 0220 	rsb	r2, r3, #32
 8000356:	40d1      	lsrs	r1, r2
 8000358:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fa1f f887 	uxth.w	r8, r7
 8000364:	fb0e 1110 	mls	r1, lr, r0, r1
 8000368:	fa24 f202 	lsr.w	r2, r4, r2
 800036c:	409d      	lsls	r5, r3
 800036e:	fb00 fc08 	mul.w	ip, r0, r8
 8000372:	432a      	orrs	r2, r5
 8000374:	0c15      	lsrs	r5, r2, #16
 8000376:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800037a:	45ac      	cmp	ip, r5
 800037c:	fa04 f403 	lsl.w	r4, r4, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x19a>
 8000382:	197d      	adds	r5, r7, r5
 8000384:	f100 31ff 	add.w	r1, r0, #4294967295
 8000388:	f080 808f 	bcs.w	80004aa <__udivmoddi4+0x2ae>
 800038c:	45ac      	cmp	ip, r5
 800038e:	f240 808c 	bls.w	80004aa <__udivmoddi4+0x2ae>
 8000392:	3802      	subs	r0, #2
 8000394:	443d      	add	r5, r7
 8000396:	eba5 050c 	sub.w	r5, r5, ip
 800039a:	fbb5 f1fe 	udiv	r1, r5, lr
 800039e:	fb0e 5c11 	mls	ip, lr, r1, r5
 80003a2:	fb01 f908 	mul.w	r9, r1, r8
 80003a6:	b295      	uxth	r5, r2
 80003a8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80003ac:	45a9      	cmp	r9, r5
 80003ae:	d907      	bls.n	80003c0 <__udivmoddi4+0x1c4>
 80003b0:	197d      	adds	r5, r7, r5
 80003b2:	f101 32ff 	add.w	r2, r1, #4294967295
 80003b6:	d274      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 80003b8:	45a9      	cmp	r9, r5
 80003ba:	d972      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 80003bc:	3902      	subs	r1, #2
 80003be:	443d      	add	r5, r7
 80003c0:	eba5 0509 	sub.w	r5, r5, r9
 80003c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003c8:	e778      	b.n	80002bc <__udivmoddi4+0xc0>
 80003ca:	f1c1 0720 	rsb	r7, r1, #32
 80003ce:	408b      	lsls	r3, r1
 80003d0:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d4:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d8:	fa25 f407 	lsr.w	r4, r5, r7
 80003dc:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003e0:	fbb4 f9fe 	udiv	r9, r4, lr
 80003e4:	fa1f f88c 	uxth.w	r8, ip
 80003e8:	fb0e 4419 	mls	r4, lr, r9, r4
 80003ec:	fa20 f307 	lsr.w	r3, r0, r7
 80003f0:	fb09 fa08 	mul.w	sl, r9, r8
 80003f4:	408d      	lsls	r5, r1
 80003f6:	431d      	orrs	r5, r3
 80003f8:	0c2b      	lsrs	r3, r5, #16
 80003fa:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003fe:	45a2      	cmp	sl, r4
 8000400:	fa02 f201 	lsl.w	r2, r2, r1
 8000404:	fa00 f301 	lsl.w	r3, r0, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x222>
 800040a:	eb1c 0404 	adds.w	r4, ip, r4
 800040e:	f109 30ff 	add.w	r0, r9, #4294967295
 8000412:	d248      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 8000414:	45a2      	cmp	sl, r4
 8000416:	d946      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 8000418:	f1a9 0902 	sub.w	r9, r9, #2
 800041c:	4464      	add	r4, ip
 800041e:	eba4 040a 	sub.w	r4, r4, sl
 8000422:	fbb4 f0fe 	udiv	r0, r4, lr
 8000426:	fb0e 4410 	mls	r4, lr, r0, r4
 800042a:	fb00 fa08 	mul.w	sl, r0, r8
 800042e:	b2ad      	uxth	r5, r5
 8000430:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000434:	45a2      	cmp	sl, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x24e>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000440:	d22d      	bcs.n	800049e <__udivmoddi4+0x2a2>
 8000442:	45a2      	cmp	sl, r4
 8000444:	d92b      	bls.n	800049e <__udivmoddi4+0x2a2>
 8000446:	3802      	subs	r0, #2
 8000448:	4464      	add	r4, ip
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	eba4 040a 	sub.w	r4, r4, sl
 8000456:	454c      	cmp	r4, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	464d      	mov	r5, r9
 800045c:	d319      	bcc.n	8000492 <__udivmoddi4+0x296>
 800045e:	d016      	beq.n	800048e <__udivmoddi4+0x292>
 8000460:	b15e      	cbz	r6, 800047a <__udivmoddi4+0x27e>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb64 0405 	sbc.w	r4, r4, r5
 800046a:	fa04 f707 	lsl.w	r7, r4, r7
 800046e:	fa22 f301 	lsr.w	r3, r2, r1
 8000472:	431f      	orrs	r7, r3
 8000474:	40cc      	lsrs	r4, r1
 8000476:	e9c6 7400 	strd	r7, r4, [r6]
 800047a:	2100      	movs	r1, #0
 800047c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000480:	4631      	mov	r1, r6
 8000482:	4630      	mov	r0, r6
 8000484:	e70c      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000486:	468c      	mov	ip, r1
 8000488:	e6eb      	b.n	8000262 <__udivmoddi4+0x66>
 800048a:	4610      	mov	r0, r2
 800048c:	e6ff      	b.n	800028e <__udivmoddi4+0x92>
 800048e:	4543      	cmp	r3, r8
 8000490:	d2e6      	bcs.n	8000460 <__udivmoddi4+0x264>
 8000492:	ebb8 0e02 	subs.w	lr, r8, r2
 8000496:	eb69 050c 	sbc.w	r5, r9, ip
 800049a:	3801      	subs	r0, #1
 800049c:	e7e0      	b.n	8000460 <__udivmoddi4+0x264>
 800049e:	4628      	mov	r0, r5
 80004a0:	e7d3      	b.n	800044a <__udivmoddi4+0x24e>
 80004a2:	4611      	mov	r1, r2
 80004a4:	e78c      	b.n	80003c0 <__udivmoddi4+0x1c4>
 80004a6:	4681      	mov	r9, r0
 80004a8:	e7b9      	b.n	800041e <__udivmoddi4+0x222>
 80004aa:	4608      	mov	r0, r1
 80004ac:	e773      	b.n	8000396 <__udivmoddi4+0x19a>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e749      	b.n	8000346 <__udivmoddi4+0x14a>
 80004b2:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b6:	443d      	add	r5, r7
 80004b8:	e713      	b.n	80002e2 <__udivmoddi4+0xe6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	443c      	add	r4, r7
 80004be:	e724      	b.n	800030a <__udivmoddi4+0x10e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <get_static_red_timer>:
uint16_t static_red_timer = 0;
uint16_t static_yellow_timer = 0;
uint16_t static_green_timer = 0;

uint16_t get_static_red_timer()
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
	return static_red_timer;
 80004c8:	4b02      	ldr	r3, [pc, #8]	; (80004d4 <get_static_red_timer+0x10>)
 80004ca:	881b      	ldrh	r3, [r3, #0]
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr
 80004d4:	200000fe 	.word	0x200000fe

080004d8 <get_static_yellow_timer>:

uint16_t get_static_yellow_timer()
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
	return static_yellow_timer;
 80004dc:	4b02      	ldr	r3, [pc, #8]	; (80004e8 <get_static_yellow_timer+0x10>)
 80004de:	881b      	ldrh	r3, [r3, #0]
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bc80      	pop	{r7}
 80004e6:	4770      	bx	lr
 80004e8:	20000100 	.word	0x20000100

080004ec <get_static_green_timer>:

uint16_t get_static_green_timer()
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
	return static_green_timer;
 80004f0:	4b02      	ldr	r3, [pc, #8]	; (80004fc <get_static_green_timer+0x10>)
 80004f2:	881b      	ldrh	r3, [r3, #0]
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr
 80004fc:	20000102 	.word	0x20000102

08000500 <set_static_red_timer>:

void set_static_red_timer(uint16_t redtimer_for_set)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	80fb      	strh	r3, [r7, #6]
	static_red_timer = redtimer_for_set;
 800050a:	4a04      	ldr	r2, [pc, #16]	; (800051c <set_static_red_timer+0x1c>)
 800050c:	88fb      	ldrh	r3, [r7, #6]
 800050e:	8013      	strh	r3, [r2, #0]
}
 8000510:	bf00      	nop
 8000512:	370c      	adds	r7, #12
 8000514:	46bd      	mov	sp, r7
 8000516:	bc80      	pop	{r7}
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	200000fe 	.word	0x200000fe

08000520 <set_static_yellow_timer>:

void set_static_yellow_timer(uint16_t yellowtimer_for_set)
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	80fb      	strh	r3, [r7, #6]
	static_yellow_timer = yellowtimer_for_set;
 800052a:	4a04      	ldr	r2, [pc, #16]	; (800053c <set_static_yellow_timer+0x1c>)
 800052c:	88fb      	ldrh	r3, [r7, #6]
 800052e:	8013      	strh	r3, [r2, #0]
}
 8000530:	bf00      	nop
 8000532:	370c      	adds	r7, #12
 8000534:	46bd      	mov	sp, r7
 8000536:	bc80      	pop	{r7}
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	20000100 	.word	0x20000100

08000540 <set_static_green_timer>:

void set_static_green_timer(uint16_t greentimer_for_set)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	80fb      	strh	r3, [r7, #6]
	static_green_timer = greentimer_for_set;
 800054a:	4a04      	ldr	r2, [pc, #16]	; (800055c <set_static_green_timer+0x1c>)
 800054c:	88fb      	ldrh	r3, [r7, #6]
 800054e:	8013      	strh	r3, [r2, #0]
}
 8000550:	bf00      	nop
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	20000102 	.word	0x20000102

08000560 <fsm_auto_init>:

void fsm_auto_init()
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
	green_timer = static_green_timer;
 8000564:	4b09      	ldr	r3, [pc, #36]	; (800058c <fsm_auto_init+0x2c>)
 8000566:	881b      	ldrh	r3, [r3, #0]
 8000568:	b21a      	sxth	r2, r3
 800056a:	4b09      	ldr	r3, [pc, #36]	; (8000590 <fsm_auto_init+0x30>)
 800056c:	801a      	strh	r2, [r3, #0]
	red_timer = static_red_timer;
 800056e:	4b09      	ldr	r3, [pc, #36]	; (8000594 <fsm_auto_init+0x34>)
 8000570:	881b      	ldrh	r3, [r3, #0]
 8000572:	b21a      	sxth	r2, r3
 8000574:	4b08      	ldr	r3, [pc, #32]	; (8000598 <fsm_auto_init+0x38>)
 8000576:	801a      	strh	r2, [r3, #0]
	yellow_timer = static_yellow_timer;
 8000578:	4b08      	ldr	r3, [pc, #32]	; (800059c <fsm_auto_init+0x3c>)
 800057a:	881b      	ldrh	r3, [r3, #0]
 800057c:	b21a      	sxth	r2, r3
 800057e:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <fsm_auto_init+0x40>)
 8000580:	801a      	strh	r2, [r3, #0]
}
 8000582:	bf00      	nop
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000102 	.word	0x20000102
 8000590:	200000fc 	.word	0x200000fc
 8000594:	200000fe 	.word	0x200000fe
 8000598:	200000f8 	.word	0x200000f8
 800059c:	20000100 	.word	0x20000100
 80005a0:	200000fa 	.word	0x200000fa

080005a4 <decrease_led_timer_at_each_road>:

void decrease_led_timer_at_each_road() //just decrease if one second passed
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
	if(green_timer <= 0)
 80005a8:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <decrease_led_timer_at_each_road+0x50>)
 80005aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dc09      	bgt.n	80005c6 <decrease_led_timer_at_each_road+0x22>
		yellow_timer--;
 80005b2:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <decrease_led_timer_at_each_road+0x54>)
 80005b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	3b01      	subs	r3, #1
 80005bc:	b29b      	uxth	r3, r3
 80005be:	b21a      	sxth	r2, r3
 80005c0:	4b0d      	ldr	r3, [pc, #52]	; (80005f8 <decrease_led_timer_at_each_road+0x54>)
 80005c2:	801a      	strh	r2, [r3, #0]
 80005c4:	e008      	b.n	80005d8 <decrease_led_timer_at_each_road+0x34>
	else
		green_timer --;
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <decrease_led_timer_at_each_road+0x50>)
 80005c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005cc:	b29b      	uxth	r3, r3
 80005ce:	3b01      	subs	r3, #1
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	b21a      	sxth	r2, r3
 80005d4:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <decrease_led_timer_at_each_road+0x50>)
 80005d6:	801a      	strh	r2, [r3, #0]

	red_timer--;
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <decrease_led_timer_at_each_road+0x58>)
 80005da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005de:	b29b      	uxth	r3, r3
 80005e0:	3b01      	subs	r3, #1
 80005e2:	b29b      	uxth	r3, r3
 80005e4:	b21a      	sxth	r2, r3
 80005e6:	4b05      	ldr	r3, [pc, #20]	; (80005fc <decrease_led_timer_at_each_road+0x58>)
 80005e8:	801a      	strh	r2, [r3, #0]
}
 80005ea:	bf00      	nop
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bc80      	pop	{r7}
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	200000fc 	.word	0x200000fc
 80005f8:	200000fa 	.word	0x200000fa
 80005fc:	200000f8 	.word	0x200000f8

08000600 <fsm_auto>:

void fsm_auto()
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	switch (get_red_even_or_odd())
 8000604:	f000 fc8a 	bl	8000f1c <get_red_even_or_odd>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d01b      	beq.n	8000646 <fsm_auto+0x46>
 800060e:	2b01      	cmp	r3, #1
 8000610:	d136      	bne.n	8000680 <fsm_auto+0x80>
	{
	case 1: //red at even road
		set_state_even_road(RED); //even road switch to red led
 8000612:	200b      	movs	r0, #11
 8000614:	f000 fc72 	bl	8000efc <set_state_even_road>
		if(green_timer <= 0)
 8000618:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <fsm_auto+0x84>)
 800061a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800061e:	2b00      	cmp	r3, #0
 8000620:	dc03      	bgt.n	800062a <fsm_auto+0x2a>
			set_state_odd_road(YELLOW); //switch odd road to yellow
 8000622:	2001      	movs	r0, #1
 8000624:	f000 fc5a 	bl	8000edc <set_state_odd_road>
 8000628:	e002      	b.n	8000630 <fsm_auto+0x30>
		else
			set_state_odd_road(GREEN); //odd road switch to green led
 800062a:	200a      	movs	r0, #10
 800062c:	f000 fc56 	bl	8000edc <set_state_odd_road>

		if(red_timer <= 0)
 8000630:	4b15      	ldr	r3, [pc, #84]	; (8000688 <fsm_auto+0x88>)
 8000632:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000636:	2b00      	cmp	r3, #0
 8000638:	dc1f      	bgt.n	800067a <fsm_auto+0x7a>
		{
			set_red_even_or_odd(0); //switch red led at odd road
 800063a:	2000      	movs	r0, #0
 800063c:	f000 fc78 	bl	8000f30 <set_red_even_or_odd>
			fsm_auto_init(); //reset timer for each led
 8000640:	f7ff ff8e 	bl	8000560 <fsm_auto_init>
		}
		break;
 8000644:	e019      	b.n	800067a <fsm_auto+0x7a>
	case 0:
		set_state_odd_road(RED); //odd road switch to red led
 8000646:	200b      	movs	r0, #11
 8000648:	f000 fc48 	bl	8000edc <set_state_odd_road>
		if(green_timer <= 0) //when green = 0
 800064c:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <fsm_auto+0x84>)
 800064e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000652:	2b00      	cmp	r3, #0
 8000654:	dc03      	bgt.n	800065e <fsm_auto+0x5e>
			set_state_even_road(YELLOW); //switch even road to yellow
 8000656:	2001      	movs	r0, #1
 8000658:	f000 fc50 	bl	8000efc <set_state_even_road>
 800065c:	e002      	b.n	8000664 <fsm_auto+0x64>
		else
			set_state_even_road(GREEN); //even road switch to green led
 800065e:	200a      	movs	r0, #10
 8000660:	f000 fc4c 	bl	8000efc <set_state_even_road>

		if(red_timer <= 0)
 8000664:	4b08      	ldr	r3, [pc, #32]	; (8000688 <fsm_auto+0x88>)
 8000666:	f9b3 3000 	ldrsh.w	r3, [r3]
 800066a:	2b00      	cmp	r3, #0
 800066c:	dc07      	bgt.n	800067e <fsm_auto+0x7e>
		{
			set_red_even_or_odd(1); //switch red led at even road
 800066e:	2001      	movs	r0, #1
 8000670:	f000 fc5e 	bl	8000f30 <set_red_even_or_odd>
			fsm_auto_init(); //reset timer for each led
 8000674:	f7ff ff74 	bl	8000560 <fsm_auto_init>
		}
		break;
 8000678:	e001      	b.n	800067e <fsm_auto+0x7e>
		break;
 800067a:	bf00      	nop
 800067c:	e000      	b.n	8000680 <fsm_auto+0x80>
		break;
 800067e:	bf00      	nop
	}
}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	200000fc 	.word	0x200000fc
 8000688:	200000f8 	.word	0x200000f8

0800068c <auto_mode_display>:

char auto_mode_string [] = "Run auto mode...";
char value_of_timer [4];
void auto_mode_display()
{
 800068c:	b598      	push	{r3, r4, r7, lr}
 800068e:	af00      	add	r7, sp, #0
	lcd_clear_display(); //clear monitor of lcd
 8000690:	f000 fde9 	bl	8001266 <lcd_clear_display>

	lcd_goto_XY (0, 0); //point to (0;0)
 8000694:	2100      	movs	r1, #0
 8000696:	2000      	movs	r0, #0
 8000698:	f000 fdef 	bl	800127a <lcd_goto_XY>
	lcd_send_string (auto_mode_string);  // display string "run auto mode.." to lcd
 800069c:	483d      	ldr	r0, [pc, #244]	; (8000794 <auto_mode_display+0x108>)
 800069e:	f000 fdcd 	bl	800123c <lcd_send_string>

	lcd_goto_XY(1, 0); //point to new line on lcd
 80006a2:	2100      	movs	r1, #0
 80006a4:	2001      	movs	r0, #1
 80006a6:	f000 fde8 	bl	800127a <lcd_goto_XY>
	lcd_send_string(get_red_timer_string()); //display string "RED="
 80006aa:	f000 fc61 	bl	8000f70 <get_red_timer_string>
 80006ae:	4603      	mov	r3, r0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 fdc3 	bl	800123c <lcd_send_string>

	lcd_goto_XY(1, strlen(get_red_timer_string())); //point to afterward RED= to display timer of red led
 80006b6:	f000 fc5b 	bl	8000f70 <get_red_timer_string>
 80006ba:	4603      	mov	r3, r0
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff fd45 	bl	800014c <strlen>
 80006c2:	4603      	mov	r3, r0
 80006c4:	4619      	mov	r1, r3
 80006c6:	2001      	movs	r0, #1
 80006c8:	f000 fdd7 	bl	800127a <lcd_goto_XY>
	sprintf(value_of_timer, "%d", red_timer); //convert red timer to string
 80006cc:	4b32      	ldr	r3, [pc, #200]	; (8000798 <auto_mode_display+0x10c>)
 80006ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006d2:	461a      	mov	r2, r3
 80006d4:	4931      	ldr	r1, [pc, #196]	; (800079c <auto_mode_display+0x110>)
 80006d6:	4832      	ldr	r0, [pc, #200]	; (80007a0 <auto_mode_display+0x114>)
 80006d8:	f005 f888 	bl	80057ec <siprintf>
	lcd_send_string(value_of_timer); //send timer of red led
 80006dc:	4830      	ldr	r0, [pc, #192]	; (80007a0 <auto_mode_display+0x114>)
 80006de:	f000 fdad 	bl	800123c <lcd_send_string>

	lcd_goto_XY(1, strlen(get_red_timer_string()) + strlen(value_of_timer)); //point to afterward timer of red led
 80006e2:	f000 fc45 	bl	8000f70 <get_red_timer_string>
 80006e6:	4603      	mov	r3, r0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff fd2f 	bl	800014c <strlen>
 80006ee:	4604      	mov	r4, r0
 80006f0:	482b      	ldr	r0, [pc, #172]	; (80007a0 <auto_mode_display+0x114>)
 80006f2:	f7ff fd2b 	bl	800014c <strlen>
 80006f6:	4603      	mov	r3, r0
 80006f8:	4423      	add	r3, r4
 80006fa:	4619      	mov	r1, r3
 80006fc:	2001      	movs	r0, #1
 80006fe:	f000 fdbc 	bl	800127a <lcd_goto_XY>
	if(green_timer <= 0) //yellow mod
 8000702:	4b28      	ldr	r3, [pc, #160]	; (80007a4 <auto_mode_display+0x118>)
 8000704:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000708:	2b00      	cmp	r3, #0
 800070a:	dc06      	bgt.n	800071a <auto_mode_display+0x8e>
		lcd_send_string(get_yellow_timer_string()); //display string "AMBER="
 800070c:	f000 fc44 	bl	8000f98 <get_yellow_timer_string>
 8000710:	4603      	mov	r3, r0
 8000712:	4618      	mov	r0, r3
 8000714:	f000 fd92 	bl	800123c <lcd_send_string>
 8000718:	e005      	b.n	8000726 <auto_mode_display+0x9a>
	else //green
		lcd_send_string(get_green_timer_string()); //display string "GREEN="
 800071a:	f000 fc33 	bl	8000f84 <get_green_timer_string>
 800071e:	4603      	mov	r3, r0
 8000720:	4618      	mov	r0, r3
 8000722:	f000 fd8b 	bl	800123c <lcd_send_string>

	lcd_goto_XY(1, strlen(get_red_timer_string()) + strlen(value_of_timer) + strlen(get_green_timer_string()));
 8000726:	f000 fc23 	bl	8000f70 <get_red_timer_string>
 800072a:	4603      	mov	r3, r0
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff fd0d 	bl	800014c <strlen>
 8000732:	4604      	mov	r4, r0
 8000734:	481a      	ldr	r0, [pc, #104]	; (80007a0 <auto_mode_display+0x114>)
 8000736:	f7ff fd09 	bl	800014c <strlen>
 800073a:	4603      	mov	r3, r0
 800073c:	441c      	add	r4, r3
 800073e:	f000 fc21 	bl	8000f84 <get_green_timer_string>
 8000742:	4603      	mov	r3, r0
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff fd01 	bl	800014c <strlen>
 800074a:	4603      	mov	r3, r0
 800074c:	4423      	add	r3, r4
 800074e:	4619      	mov	r1, r3
 8000750:	2001      	movs	r0, #1
 8000752:	f000 fd92 	bl	800127a <lcd_goto_XY>
	//point to afterward "AMBER=" or "GREEN="
	if(green_timer <= 0)
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <auto_mode_display+0x118>)
 8000758:	f9b3 3000 	ldrsh.w	r3, [r3]
 800075c:	2b00      	cmp	r3, #0
 800075e:	dc0b      	bgt.n	8000778 <auto_mode_display+0xec>
	{
		sprintf(value_of_timer, "%d", yellow_timer); //convert yellow timer to string
 8000760:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <auto_mode_display+0x11c>)
 8000762:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000766:	461a      	mov	r2, r3
 8000768:	490c      	ldr	r1, [pc, #48]	; (800079c <auto_mode_display+0x110>)
 800076a:	480d      	ldr	r0, [pc, #52]	; (80007a0 <auto_mode_display+0x114>)
 800076c:	f005 f83e 	bl	80057ec <siprintf>
		lcd_send_string(value_of_timer); //send timer of yellow led
 8000770:	480b      	ldr	r0, [pc, #44]	; (80007a0 <auto_mode_display+0x114>)
 8000772:	f000 fd63 	bl	800123c <lcd_send_string>
	else
	{
		sprintf(value_of_timer, "%d", green_timer); //convert green timer to string
		lcd_send_string(value_of_timer); //send timer of green led
	}
}
 8000776:	e00a      	b.n	800078e <auto_mode_display+0x102>
		sprintf(value_of_timer, "%d", green_timer); //convert green timer to string
 8000778:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <auto_mode_display+0x118>)
 800077a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800077e:	461a      	mov	r2, r3
 8000780:	4906      	ldr	r1, [pc, #24]	; (800079c <auto_mode_display+0x110>)
 8000782:	4807      	ldr	r0, [pc, #28]	; (80007a0 <auto_mode_display+0x114>)
 8000784:	f005 f832 	bl	80057ec <siprintf>
		lcd_send_string(value_of_timer); //send timer of green led
 8000788:	4805      	ldr	r0, [pc, #20]	; (80007a0 <auto_mode_display+0x114>)
 800078a:	f000 fd57 	bl	800123c <lcd_send_string>
}
 800078e:	bf00      	nop
 8000790:	bd98      	pop	{r3, r4, r7, pc}
 8000792:	bf00      	nop
 8000794:	20000000 	.word	0x20000000
 8000798:	200000f8 	.word	0x200000f8
 800079c:	08005f0c 	.word	0x08005f0c
 80007a0:	20000140 	.word	0x20000140
 80007a4:	200000fc 	.word	0x200000fc
 80007a8:	200000fa 	.word	0x200000fa

080007ac <run_auto>:
void run_auto()
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
	if(static_red_timer > 0)
 80007b0:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <run_auto+0x3c>)
 80007b2:	881b      	ldrh	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <run_auto+0x10>
		fsm_auto();
 80007b8:	f7ff ff22 	bl	8000600 <fsm_auto>
	run_led_traffic();
 80007bc:	f000 fb46 	bl	8000e4c <run_led_traffic>
	if(IsOneSecondPassed())
 80007c0:	f000 fafa 	bl	8000db8 <IsOneSecondPassed>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d00c      	beq.n	80007e4 <run_auto+0x38>
	{
		decrease_led_timer_at_each_road();
 80007ca:	f7ff feeb 	bl	80005a4 <decrease_led_timer_at_each_road>
		clearOneSecondFlag();
 80007ce:	f000 fb31 	bl	8000e34 <clearOneSecondFlag>
		if(static_red_timer > 0) //unsigned int so very much therefore it shouldn't be transmitted to lcd
 80007d2:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <run_auto+0x3c>)
 80007d4:	881b      	ldrh	r3, [r3, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d002      	beq.n	80007e0 <run_auto+0x34>
			auto_mode_display();
 80007da:	f7ff ff57 	bl	800068c <auto_mode_display>
		else //static_red_timer <= 0
			fsm_auto();
	}
}
 80007de:	e001      	b.n	80007e4 <run_auto+0x38>
			fsm_auto();
 80007e0:	f7ff ff0e 	bl	8000600 <fsm_auto>
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	200000fe 	.word	0x200000fe

080007ec <fsm_manual>:
 */

#include "global.h"

void fsm_manual()
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	switch(get_red_even_or_odd())
 80007f0:	f000 fb94 	bl	8000f1c <get_red_even_or_odd>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d002      	beq.n	8000800 <fsm_manual+0x14>
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d007      	beq.n	800080e <fsm_manual+0x22>
	case 1: //red at even road
		set_state_even_road(RED);
		set_state_odd_road(GREEN);
		break;
	}
}
 80007fe:	e00d      	b.n	800081c <fsm_manual+0x30>
		set_state_even_road(GREEN); //set to display
 8000800:	200a      	movs	r0, #10
 8000802:	f000 fb7b 	bl	8000efc <set_state_even_road>
		set_state_odd_road(RED);
 8000806:	200b      	movs	r0, #11
 8000808:	f000 fb68 	bl	8000edc <set_state_odd_road>
		break;
 800080c:	e006      	b.n	800081c <fsm_manual+0x30>
		set_state_even_road(RED);
 800080e:	200b      	movs	r0, #11
 8000810:	f000 fb74 	bl	8000efc <set_state_even_road>
		set_state_odd_road(GREEN);
 8000814:	200a      	movs	r0, #10
 8000816:	f000 fb61 	bl	8000edc <set_state_odd_road>
		break;
 800081a:	bf00      	nop
}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}

08000820 <display_manual>:

char manual_mode_string [] = "Run manual mode...";
char red_odd [] = "red at odd road";
char red_even [] ="red at even road";
void display_manual()
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	lcd_clear_display(); //clear monitor
 8000824:	f000 fd1f 	bl	8001266 <lcd_clear_display>

	lcd_goto_XY (0, 0); //point to (0;0)
 8000828:	2100      	movs	r1, #0
 800082a:	2000      	movs	r0, #0
 800082c:	f000 fd25 	bl	800127a <lcd_goto_XY>
	lcd_send_string (manual_mode_string);  // display string "run manual mode.." to lcd
 8000830:	4809      	ldr	r0, [pc, #36]	; (8000858 <display_manual+0x38>)
 8000832:	f000 fd03 	bl	800123c <lcd_send_string>

	lcd_goto_XY(1, 0); //point to new line on lcd
 8000836:	2100      	movs	r1, #0
 8000838:	2001      	movs	r0, #1
 800083a:	f000 fd1e 	bl	800127a <lcd_goto_XY>
	lcd_send_string(get_red_even_or_odd() ? red_even : red_odd); //display string red odd or even
 800083e:	f000 fb6d 	bl	8000f1c <get_red_even_or_odd>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <display_manual+0x2c>
 8000848:	4b04      	ldr	r3, [pc, #16]	; (800085c <display_manual+0x3c>)
 800084a:	e000      	b.n	800084e <display_manual+0x2e>
 800084c:	4b04      	ldr	r3, [pc, #16]	; (8000860 <display_manual+0x40>)
 800084e:	4618      	mov	r0, r3
 8000850:	f000 fcf4 	bl	800123c <lcd_send_string>
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000014 	.word	0x20000014
 800085c:	20000038 	.word	0x20000038
 8000860:	20000028 	.word	0x20000028

08000864 <run_manual>:

void run_manual()
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	if(get_red_even_or_odd()) //red at even road
 8000868:	f000 fb58 	bl	8000f1c <get_red_even_or_odd>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d013      	beq.n	800089a <run_manual+0x36>
	{
		parse_touch_REDOD_bar(buffer [parser_index]);
 8000872:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <run_manual+0x74>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	461a      	mov	r2, r3
 8000878:	4b18      	ldr	r3, [pc, #96]	; (80008dc <run_manual+0x78>)
 800087a:	5c9b      	ldrb	r3, [r3, r2]
 800087c:	4618      	mov	r0, r3
 800087e:	f001 ffa9 	bl	80027d4 <parse_touch_REDOD_bar>
		if(RED_AT_ODD_flag)
 8000882:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <run_manual+0x7c>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d007      	beq.n	800089a <run_manual+0x36>
		{
			RED_AT_ODD_flag = 0;
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <run_manual+0x7c>)
 800088c:	2200      	movs	r2, #0
 800088e:	701a      	strb	r2, [r3, #0]
			set_red_even_or_odd(0); //switch to red at odd road
 8000890:	2000      	movs	r0, #0
 8000892:	f000 fb4d 	bl	8000f30 <set_red_even_or_odd>
			display_manual(); //display state to lcd
 8000896:	f7ff ffc3 	bl	8000820 <display_manual>
		}
	}
	if(!get_red_even_or_odd()) //red at odd road
 800089a:	f000 fb3f 	bl	8000f1c <get_red_even_or_odd>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d113      	bne.n	80008cc <run_manual+0x68>
	{
		parse_touch_REDEV_bar(buffer [parser_index]);
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <run_manual+0x74>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	461a      	mov	r2, r3
 80008aa:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <run_manual+0x78>)
 80008ac:	5c9b      	ldrb	r3, [r3, r2]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f001 ffec 	bl	800288c <parse_touch_REDEV_bar>
		if(RED_AT_EVEN_flag)
 80008b4:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <run_manual+0x80>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d007      	beq.n	80008cc <run_manual+0x68>
		{
			RED_AT_EVEN_flag = 0;
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <run_manual+0x80>)
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
			set_red_even_or_odd(1); //switch to red at even road
 80008c2:	2001      	movs	r0, #1
 80008c4:	f000 fb34 	bl	8000f30 <set_red_even_or_odd>
			display_manual(); //display state to lcd
 80008c8:	f7ff ffaa 	bl	8000820 <display_manual>
		}
	}
	run_led_traffic(); //turn on led traffic at all roads
 80008cc:	f000 fabe 	bl	8000e4c <run_led_traffic>
	fsm_manual(); //control led traffic
 80008d0:	f7ff ff8c 	bl	80007ec <fsm_manual>
}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000123 	.word	0x20000123
 80008dc:	20000228 	.word	0x20000228
 80008e0:	20000120 	.word	0x20000120
 80008e4:	20000121 	.word	0x20000121

080008e8 <fsm_setting>:
}State_of_setting;

State_of_setting state_of_setting = WATING_CHOOSES_LED;

void fsm_setting()
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
	switch(state_of_setting)
 80008ec:	4bad      	ldr	r3, [pc, #692]	; (8000ba4 <fsm_setting+0x2bc>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b03      	cmp	r3, #3
 80008f2:	f200 816a 	bhi.w	8000bca <fsm_setting+0x2e2>
 80008f6:	a201      	add	r2, pc, #4	; (adr r2, 80008fc <fsm_setting+0x14>)
 80008f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008fc:	0800090d 	.word	0x0800090d
 8000900:	08000993 	.word	0x08000993
 8000904:	08000a41 	.word	0x08000a41
 8000908:	08000aed 	.word	0x08000aed
	{
	case WATING_CHOOSES_LED:
		blink_traffic_light_following_desire(Led_OFF);
 800090c:	2000      	movs	r0, #0
 800090e:	f000 fa5d 	bl	8000dcc <blink_traffic_light_following_desire>
		parse_touch_RED_bar(buffer[parser_index]);
 8000912:	4ba5      	ldr	r3, [pc, #660]	; (8000ba8 <fsm_setting+0x2c0>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	461a      	mov	r2, r3
 8000918:	4ba4      	ldr	r3, [pc, #656]	; (8000bac <fsm_setting+0x2c4>)
 800091a:	5c9b      	ldrb	r3, [r3, r2]
 800091c:	4618      	mov	r0, r3
 800091e:	f001 fd7b 	bl	8002418 <parse_touch_RED_bar>
		parse_touch_YELLOW_bar(buffer[parser_index]);
 8000922:	4ba1      	ldr	r3, [pc, #644]	; (8000ba8 <fsm_setting+0x2c0>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	461a      	mov	r2, r3
 8000928:	4ba0      	ldr	r3, [pc, #640]	; (8000bac <fsm_setting+0x2c4>)
 800092a:	5c9b      	ldrb	r3, [r3, r2]
 800092c:	4618      	mov	r0, r3
 800092e:	f001 fdb5 	bl	800249c <parse_touch_YELLOW_bar>
		parse_touch_GREEN_bar(buffer[parser_index]);
 8000932:	4b9d      	ldr	r3, [pc, #628]	; (8000ba8 <fsm_setting+0x2c0>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	461a      	mov	r2, r3
 8000938:	4b9c      	ldr	r3, [pc, #624]	; (8000bac <fsm_setting+0x2c4>)
 800093a:	5c9b      	ldrb	r3, [r3, r2]
 800093c:	4618      	mov	r0, r3
 800093e:	f001 fe09 	bl	8002554 <parse_touch_GREEN_bar>
		if(CHANGING_RED_TIMER_flag)
 8000942:	4b9b      	ldr	r3, [pc, #620]	; (8000bb0 <fsm_setting+0x2c8>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d008      	beq.n	800095c <fsm_setting+0x74>
		{
			state_of_setting = RED_LED;
 800094a:	4b96      	ldr	r3, [pc, #600]	; (8000ba4 <fsm_setting+0x2bc>)
 800094c:	2201      	movs	r2, #1
 800094e:	701a      	strb	r2, [r3, #0]
			CHANGING_RED_TIMER_flag = 0;
 8000950:	4b97      	ldr	r3, [pc, #604]	; (8000bb0 <fsm_setting+0x2c8>)
 8000952:	2200      	movs	r2, #0
 8000954:	701a      	strb	r2, [r3, #0]
			display_setting();
 8000956:	f000 f987 	bl	8000c68 <display_setting>
			display_setting();
//			memset(buffer, '0', MAX_BUFFER_SIZE);
		}

//		SET_TIMER_flag = 0; //reset set timer flag because overlap "SET" signal with "SETTI" signal
		break;
 800095a:	e11c      	b.n	8000b96 <fsm_setting+0x2ae>
		else if(CHANGING_YELLOW_TIMER_flag)
 800095c:	4b95      	ldr	r3, [pc, #596]	; (8000bb4 <fsm_setting+0x2cc>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d008      	beq.n	8000976 <fsm_setting+0x8e>
			state_of_setting = YELLOW_LED;
 8000964:	4b8f      	ldr	r3, [pc, #572]	; (8000ba4 <fsm_setting+0x2bc>)
 8000966:	2202      	movs	r2, #2
 8000968:	701a      	strb	r2, [r3, #0]
			CHANGING_YELLOW_TIMER_flag = 0;
 800096a:	4b92      	ldr	r3, [pc, #584]	; (8000bb4 <fsm_setting+0x2cc>)
 800096c:	2200      	movs	r2, #0
 800096e:	701a      	strb	r2, [r3, #0]
			display_setting();
 8000970:	f000 f97a 	bl	8000c68 <display_setting>
		break;
 8000974:	e10f      	b.n	8000b96 <fsm_setting+0x2ae>
		else if(CHANGING_GREEN_TIMER_flag)
 8000976:	4b90      	ldr	r3, [pc, #576]	; (8000bb8 <fsm_setting+0x2d0>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	f000 810b 	beq.w	8000b96 <fsm_setting+0x2ae>
			state_of_setting = GREEN_LED;
 8000980:	4b88      	ldr	r3, [pc, #544]	; (8000ba4 <fsm_setting+0x2bc>)
 8000982:	2203      	movs	r2, #3
 8000984:	701a      	strb	r2, [r3, #0]
			CHANGING_GREEN_TIMER_flag = 0;
 8000986:	4b8c      	ldr	r3, [pc, #560]	; (8000bb8 <fsm_setting+0x2d0>)
 8000988:	2200      	movs	r2, #0
 800098a:	701a      	strb	r2, [r3, #0]
			display_setting();
 800098c:	f000 f96c 	bl	8000c68 <display_setting>
		break;
 8000990:	e101      	b.n	8000b96 <fsm_setting+0x2ae>
	case RED_LED:
		blink_traffic_light_following_desire(RED);
 8000992:	200b      	movs	r0, #11
 8000994:	f000 fa1a 	bl	8000dcc <blink_traffic_light_following_desire>
		parse_SET_timer(buffer[parser_index]);
 8000998:	4b83      	ldr	r3, [pc, #524]	; (8000ba8 <fsm_setting+0x2c0>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	461a      	mov	r2, r3
 800099e:	4b83      	ldr	r3, [pc, #524]	; (8000bac <fsm_setting+0x2c4>)
 80009a0:	5c9b      	ldrb	r3, [r3, r2]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f001 fe32 	bl	800260c <parse_SET_timer>
		if(SET_TIMER_flag)
 80009a8:	4b84      	ldr	r3, [pc, #528]	; (8000bbc <fsm_setting+0x2d4>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d01d      	beq.n	80009ec <fsm_setting+0x104>
		{
			parse_number(buffer[parser_index]);
 80009b0:	4b7d      	ldr	r3, [pc, #500]	; (8000ba8 <fsm_setting+0x2c0>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	461a      	mov	r2, r3
 80009b6:	4b7d      	ldr	r3, [pc, #500]	; (8000bac <fsm_setting+0x2c4>)
 80009b8:	5c9b      	ldrb	r3, [r3, r2]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f001 fe6c 	bl	8002698 <parse_number>
			if(HASH_flag)
 80009c0:	4b7f      	ldr	r3, [pc, #508]	; (8000bc0 <fsm_setting+0x2d8>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	f000 80e8 	beq.w	8000b9a <fsm_setting+0x2b2>
			{
				SET_TIMER_flag = 0;
 80009ca:	4b7c      	ldr	r3, [pc, #496]	; (8000bbc <fsm_setting+0x2d4>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	701a      	strb	r2, [r3, #0]
				HASH_flag = 0;
 80009d0:	4b7b      	ldr	r3, [pc, #492]	; (8000bc0 <fsm_setting+0x2d8>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	701a      	strb	r2, [r3, #0]
				set_static_red_timer(user_timer); //static red timer = user timer
 80009d6:	4b7b      	ldr	r3, [pc, #492]	; (8000bc4 <fsm_setting+0x2dc>)
 80009d8:	881b      	ldrh	r3, [r3, #0]
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff fd90 	bl	8000500 <set_static_red_timer>
				state_of_setting = WATING_CHOOSES_LED;
 80009e0:	4b70      	ldr	r3, [pc, #448]	; (8000ba4 <fsm_setting+0x2bc>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	701a      	strb	r2, [r3, #0]
				display_setting();
 80009e6:	f000 f93f 	bl	8000c68 <display_setting>
				state_of_setting = GREEN_LED;
				CHANGING_GREEN_TIMER_flag = 0;
				display_setting();
			}
		}
		break;
 80009ea:	e0d6      	b.n	8000b9a <fsm_setting+0x2b2>
			parse_touch_YELLOW_bar(buffer[parser_index]);
 80009ec:	4b6e      	ldr	r3, [pc, #440]	; (8000ba8 <fsm_setting+0x2c0>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	461a      	mov	r2, r3
 80009f2:	4b6e      	ldr	r3, [pc, #440]	; (8000bac <fsm_setting+0x2c4>)
 80009f4:	5c9b      	ldrb	r3, [r3, r2]
 80009f6:	4618      	mov	r0, r3
 80009f8:	f001 fd50 	bl	800249c <parse_touch_YELLOW_bar>
			parse_touch_GREEN_bar(buffer[parser_index]);
 80009fc:	4b6a      	ldr	r3, [pc, #424]	; (8000ba8 <fsm_setting+0x2c0>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b6a      	ldr	r3, [pc, #424]	; (8000bac <fsm_setting+0x2c4>)
 8000a04:	5c9b      	ldrb	r3, [r3, r2]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f001 fda4 	bl	8002554 <parse_touch_GREEN_bar>
			if(CHANGING_YELLOW_TIMER_flag)
 8000a0c:	4b69      	ldr	r3, [pc, #420]	; (8000bb4 <fsm_setting+0x2cc>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d007      	beq.n	8000a24 <fsm_setting+0x13c>
				state_of_setting = YELLOW_LED;
 8000a14:	4b63      	ldr	r3, [pc, #396]	; (8000ba4 <fsm_setting+0x2bc>)
 8000a16:	2202      	movs	r2, #2
 8000a18:	701a      	strb	r2, [r3, #0]
				CHANGING_YELLOW_TIMER_flag = 0;
 8000a1a:	4b66      	ldr	r3, [pc, #408]	; (8000bb4 <fsm_setting+0x2cc>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	701a      	strb	r2, [r3, #0]
				display_setting();
 8000a20:	f000 f922 	bl	8000c68 <display_setting>
			if(CHANGING_GREEN_TIMER_flag)
 8000a24:	4b64      	ldr	r3, [pc, #400]	; (8000bb8 <fsm_setting+0x2d0>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	f000 80b6 	beq.w	8000b9a <fsm_setting+0x2b2>
				state_of_setting = GREEN_LED;
 8000a2e:	4b5d      	ldr	r3, [pc, #372]	; (8000ba4 <fsm_setting+0x2bc>)
 8000a30:	2203      	movs	r2, #3
 8000a32:	701a      	strb	r2, [r3, #0]
				CHANGING_GREEN_TIMER_flag = 0;
 8000a34:	4b60      	ldr	r3, [pc, #384]	; (8000bb8 <fsm_setting+0x2d0>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	701a      	strb	r2, [r3, #0]
				display_setting();
 8000a3a:	f000 f915 	bl	8000c68 <display_setting>
		break;
 8000a3e:	e0ac      	b.n	8000b9a <fsm_setting+0x2b2>
	case YELLOW_LED:
		blink_traffic_light_following_desire(YELLOW);
 8000a40:	2001      	movs	r0, #1
 8000a42:	f000 f9c3 	bl	8000dcc <blink_traffic_light_following_desire>
		parse_SET_timer(buffer[parser_index]);
 8000a46:	4b58      	ldr	r3, [pc, #352]	; (8000ba8 <fsm_setting+0x2c0>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	4b57      	ldr	r3, [pc, #348]	; (8000bac <fsm_setting+0x2c4>)
 8000a4e:	5c9b      	ldrb	r3, [r3, r2]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f001 fddb 	bl	800260c <parse_SET_timer>
		if(SET_TIMER_flag)
 8000a56:	4b59      	ldr	r3, [pc, #356]	; (8000bbc <fsm_setting+0x2d4>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d01d      	beq.n	8000a9a <fsm_setting+0x1b2>
		{
			parse_number(buffer[parser_index]);
 8000a5e:	4b52      	ldr	r3, [pc, #328]	; (8000ba8 <fsm_setting+0x2c0>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	461a      	mov	r2, r3
 8000a64:	4b51      	ldr	r3, [pc, #324]	; (8000bac <fsm_setting+0x2c4>)
 8000a66:	5c9b      	ldrb	r3, [r3, r2]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f001 fe15 	bl	8002698 <parse_number>
			if(HASH_flag)
 8000a6e:	4b54      	ldr	r3, [pc, #336]	; (8000bc0 <fsm_setting+0x2d8>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	f000 8093 	beq.w	8000b9e <fsm_setting+0x2b6>
			{
				SET_TIMER_flag = 0;
 8000a78:	4b50      	ldr	r3, [pc, #320]	; (8000bbc <fsm_setting+0x2d4>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	701a      	strb	r2, [r3, #0]
				HASH_flag = 0;
 8000a7e:	4b50      	ldr	r3, [pc, #320]	; (8000bc0 <fsm_setting+0x2d8>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	701a      	strb	r2, [r3, #0]
				set_static_yellow_timer(user_timer); //static YELLOW timer = user timer
 8000a84:	4b4f      	ldr	r3, [pc, #316]	; (8000bc4 <fsm_setting+0x2dc>)
 8000a86:	881b      	ldrh	r3, [r3, #0]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fd49 	bl	8000520 <set_static_yellow_timer>
				state_of_setting = WATING_CHOOSES_LED;
 8000a8e:	4b45      	ldr	r3, [pc, #276]	; (8000ba4 <fsm_setting+0x2bc>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	701a      	strb	r2, [r3, #0]
				display_setting();
 8000a94:	f000 f8e8 	bl	8000c68 <display_setting>
				state_of_setting = GREEN_LED;
				CHANGING_GREEN_TIMER_flag = 0;
				display_setting();
			}
		}
		break;
 8000a98:	e081      	b.n	8000b9e <fsm_setting+0x2b6>
			parse_touch_RED_bar(buffer[parser_index]);
 8000a9a:	4b43      	ldr	r3, [pc, #268]	; (8000ba8 <fsm_setting+0x2c0>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	4b42      	ldr	r3, [pc, #264]	; (8000bac <fsm_setting+0x2c4>)
 8000aa2:	5c9b      	ldrb	r3, [r3, r2]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f001 fcb7 	bl	8002418 <parse_touch_RED_bar>
			parse_touch_GREEN_bar(buffer[parser_index]);
 8000aaa:	4b3f      	ldr	r3, [pc, #252]	; (8000ba8 <fsm_setting+0x2c0>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	461a      	mov	r2, r3
 8000ab0:	4b3e      	ldr	r3, [pc, #248]	; (8000bac <fsm_setting+0x2c4>)
 8000ab2:	5c9b      	ldrb	r3, [r3, r2]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f001 fd4d 	bl	8002554 <parse_touch_GREEN_bar>
			if(CHANGING_RED_TIMER_flag)
 8000aba:	4b3d      	ldr	r3, [pc, #244]	; (8000bb0 <fsm_setting+0x2c8>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d007      	beq.n	8000ad2 <fsm_setting+0x1ea>
				state_of_setting = RED_LED;
 8000ac2:	4b38      	ldr	r3, [pc, #224]	; (8000ba4 <fsm_setting+0x2bc>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	701a      	strb	r2, [r3, #0]
				CHANGING_RED_TIMER_flag = 0;
 8000ac8:	4b39      	ldr	r3, [pc, #228]	; (8000bb0 <fsm_setting+0x2c8>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
				display_setting();
 8000ace:	f000 f8cb 	bl	8000c68 <display_setting>
			if(CHANGING_GREEN_TIMER_flag)
 8000ad2:	4b39      	ldr	r3, [pc, #228]	; (8000bb8 <fsm_setting+0x2d0>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d061      	beq.n	8000b9e <fsm_setting+0x2b6>
				state_of_setting = GREEN_LED;
 8000ada:	4b32      	ldr	r3, [pc, #200]	; (8000ba4 <fsm_setting+0x2bc>)
 8000adc:	2203      	movs	r2, #3
 8000ade:	701a      	strb	r2, [r3, #0]
				CHANGING_GREEN_TIMER_flag = 0;
 8000ae0:	4b35      	ldr	r3, [pc, #212]	; (8000bb8 <fsm_setting+0x2d0>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	701a      	strb	r2, [r3, #0]
				display_setting();
 8000ae6:	f000 f8bf 	bl	8000c68 <display_setting>
		break;
 8000aea:	e058      	b.n	8000b9e <fsm_setting+0x2b6>
	case GREEN_LED:
		blink_traffic_light_following_desire(GREEN);
 8000aec:	200a      	movs	r0, #10
 8000aee:	f000 f96d 	bl	8000dcc <blink_traffic_light_following_desire>
		parse_SET_timer(buffer[parser_index]);
 8000af2:	4b2d      	ldr	r3, [pc, #180]	; (8000ba8 <fsm_setting+0x2c0>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	461a      	mov	r2, r3
 8000af8:	4b2c      	ldr	r3, [pc, #176]	; (8000bac <fsm_setting+0x2c4>)
 8000afa:	5c9b      	ldrb	r3, [r3, r2]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f001 fd85 	bl	800260c <parse_SET_timer>
		if(SET_TIMER_flag)
 8000b02:	4b2e      	ldr	r3, [pc, #184]	; (8000bbc <fsm_setting+0x2d4>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d01c      	beq.n	8000b44 <fsm_setting+0x25c>
		{
			parse_number(buffer[parser_index]);
 8000b0a:	4b27      	ldr	r3, [pc, #156]	; (8000ba8 <fsm_setting+0x2c0>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	461a      	mov	r2, r3
 8000b10:	4b26      	ldr	r3, [pc, #152]	; (8000bac <fsm_setting+0x2c4>)
 8000b12:	5c9b      	ldrb	r3, [r3, r2]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f001 fdbf 	bl	8002698 <parse_number>
			if(HASH_flag)
 8000b1a:	4b29      	ldr	r3, [pc, #164]	; (8000bc0 <fsm_setting+0x2d8>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d052      	beq.n	8000bc8 <fsm_setting+0x2e0>
			{
				SET_TIMER_flag = 0;
 8000b22:	4b26      	ldr	r3, [pc, #152]	; (8000bbc <fsm_setting+0x2d4>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	701a      	strb	r2, [r3, #0]
				HASH_flag = 0;
 8000b28:	4b25      	ldr	r3, [pc, #148]	; (8000bc0 <fsm_setting+0x2d8>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	701a      	strb	r2, [r3, #0]
				set_static_green_timer(user_timer); //static red timer = user timer
 8000b2e:	4b25      	ldr	r3, [pc, #148]	; (8000bc4 <fsm_setting+0x2dc>)
 8000b30:	881b      	ldrh	r3, [r3, #0]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff fd04 	bl	8000540 <set_static_green_timer>
				state_of_setting = WATING_CHOOSES_LED;
 8000b38:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <fsm_setting+0x2bc>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
				display_setting();
 8000b3e:	f000 f893 	bl	8000c68 <display_setting>
				state_of_setting = RED_LED;
				CHANGING_RED_TIMER_flag = 0;
				display_setting();
			}
		}
		break;
 8000b42:	e041      	b.n	8000bc8 <fsm_setting+0x2e0>
			parse_touch_YELLOW_bar(buffer[parser_index]);
 8000b44:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <fsm_setting+0x2c0>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b18      	ldr	r3, [pc, #96]	; (8000bac <fsm_setting+0x2c4>)
 8000b4c:	5c9b      	ldrb	r3, [r3, r2]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f001 fca4 	bl	800249c <parse_touch_YELLOW_bar>
			parse_touch_RED_bar(buffer[parser_index]);
 8000b54:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <fsm_setting+0x2c0>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b14      	ldr	r3, [pc, #80]	; (8000bac <fsm_setting+0x2c4>)
 8000b5c:	5c9b      	ldrb	r3, [r3, r2]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f001 fc5a 	bl	8002418 <parse_touch_RED_bar>
			if(CHANGING_YELLOW_TIMER_flag)
 8000b64:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <fsm_setting+0x2cc>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d007      	beq.n	8000b7c <fsm_setting+0x294>
				state_of_setting = YELLOW_LED;
 8000b6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <fsm_setting+0x2bc>)
 8000b6e:	2202      	movs	r2, #2
 8000b70:	701a      	strb	r2, [r3, #0]
				CHANGING_YELLOW_TIMER_flag = 0;
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <fsm_setting+0x2cc>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	701a      	strb	r2, [r3, #0]
				display_setting();
 8000b78:	f000 f876 	bl	8000c68 <display_setting>
			if(CHANGING_RED_TIMER_flag)
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <fsm_setting+0x2c8>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d021      	beq.n	8000bc8 <fsm_setting+0x2e0>
				state_of_setting = RED_LED;
 8000b84:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <fsm_setting+0x2bc>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	701a      	strb	r2, [r3, #0]
				CHANGING_RED_TIMER_flag = 0;
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <fsm_setting+0x2c8>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	701a      	strb	r2, [r3, #0]
				display_setting();
 8000b90:	f000 f86a 	bl	8000c68 <display_setting>
		break;
 8000b94:	e018      	b.n	8000bc8 <fsm_setting+0x2e0>
		break;
 8000b96:	bf00      	nop
 8000b98:	e017      	b.n	8000bca <fsm_setting+0x2e2>
		break;
 8000b9a:	bf00      	nop
 8000b9c:	e015      	b.n	8000bca <fsm_setting+0x2e2>
		break;
 8000b9e:	bf00      	nop
 8000ba0:	e013      	b.n	8000bca <fsm_setting+0x2e2>
 8000ba2:	bf00      	nop
 8000ba4:	20000104 	.word	0x20000104
 8000ba8:	20000123 	.word	0x20000123
 8000bac:	20000228 	.word	0x20000228
 8000bb0:	2000011b 	.word	0x2000011b
 8000bb4:	2000011c 	.word	0x2000011c
 8000bb8:	2000011d 	.word	0x2000011d
 8000bbc:	2000011e 	.word	0x2000011e
 8000bc0:	20000132 	.word	0x20000132
 8000bc4:	20000130 	.word	0x20000130
		break;
 8000bc8:	bf00      	nop
	}

	parse_setting_mode(buffer[parser_index]);
 8000bca:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <fsm_setting+0x31c>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	461a      	mov	r2, r3
 8000bd0:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <fsm_setting+0x320>)
 8000bd2:	5c9b      	ldrb	r3, [r3, r2]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f001 fb81 	bl	80022dc <parse_setting_mode>

	if(state_of_setting != WATING_CHOOSES_LED && SETTING_MODE_flag)
 8000bda:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <fsm_setting+0x324>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d00e      	beq.n	8000c00 <fsm_setting+0x318>
 8000be2:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <fsm_setting+0x328>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d00a      	beq.n	8000c00 <fsm_setting+0x318>
	{
		state_of_setting = WATING_CHOOSES_LED;
 8000bea:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <fsm_setting+0x324>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	701a      	strb	r2, [r3, #0]
		SETTING_MODE_flag = 0;
 8000bf0:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <fsm_setting+0x328>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	701a      	strb	r2, [r3, #0]
		SET_TIMER_flag = 0; //reset set timer flag because overlap "SET" signal with "SETTI" signal
 8000bf6:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <fsm_setting+0x32c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	701a      	strb	r2, [r3, #0]
		display_setting();
 8000bfc:	f000 f834 	bl	8000c68 <display_setting>
	}
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000123 	.word	0x20000123
 8000c08:	20000228 	.word	0x20000228
 8000c0c:	20000104 	.word	0x20000104
 8000c10:	2000011a 	.word	0x2000011a
 8000c14:	2000011e 	.word	0x2000011e

08000c18 <reset_fsm_setting>:

void reset_fsm_setting()
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
	state_of_setting = WATING_CHOOSES_LED;
 8000c1c:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <reset_fsm_setting+0x14>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	701a      	strb	r2, [r3, #0]
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000104 	.word	0x20000104

08000c30 <validate_timer>:

void validate_timer()
{
 8000c30:	b5b0      	push	{r4, r5, r7, lr}
 8000c32:	af00      	add	r7, sp, #0
	if(get_static_red_timer() != get_static_green_timer() + get_static_yellow_timer())
 8000c34:	f7ff fc46 	bl	80004c4 <get_static_red_timer>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	461c      	mov	r4, r3
 8000c3c:	f7ff fc56 	bl	80004ec <get_static_green_timer>
 8000c40:	4603      	mov	r3, r0
 8000c42:	461d      	mov	r5, r3
 8000c44:	f7ff fc48 	bl	80004d8 <get_static_yellow_timer>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	442b      	add	r3, r5
 8000c4c:	429c      	cmp	r4, r3
 8000c4e:	d008      	beq.n	8000c62 <validate_timer+0x32>
	{
		set_static_red_timer(0);
 8000c50:	2000      	movs	r0, #0
 8000c52:	f7ff fc55 	bl	8000500 <set_static_red_timer>
		set_static_green_timer(0);
 8000c56:	2000      	movs	r0, #0
 8000c58:	f7ff fc72 	bl	8000540 <set_static_green_timer>
		set_static_yellow_timer(0);
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f7ff fc5f 	bl	8000520 <set_static_yellow_timer>
	}
}
 8000c62:	bf00      	nop
 8000c64:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000c68 <display_setting>:

void display_setting()
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
	lcd_clear_display();
 8000c6c:	f000 fafb 	bl	8001266 <lcd_clear_display>
	switch (state_of_setting)
 8000c70:	4b26      	ldr	r3, [pc, #152]	; (8000d0c <display_setting+0xa4>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b03      	cmp	r3, #3
 8000c76:	d847      	bhi.n	8000d08 <display_setting+0xa0>
 8000c78:	a201      	add	r2, pc, #4	; (adr r2, 8000c80 <display_setting+0x18>)
 8000c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c7e:	bf00      	nop
 8000c80:	08000c91 	.word	0x08000c91
 8000c84:	08000caf 	.word	0x08000caf
 8000c88:	08000ccd 	.word	0x08000ccd
 8000c8c:	08000ceb 	.word	0x08000ceb
	{
	case WATING_CHOOSES_LED:
		lcd_goto_XY(0, 0);
 8000c90:	2100      	movs	r1, #0
 8000c92:	2000      	movs	r0, #0
 8000c94:	f000 faf1 	bl	800127a <lcd_goto_XY>
		lcd_send_string("Run setting mode...");
 8000c98:	481d      	ldr	r0, [pc, #116]	; (8000d10 <display_setting+0xa8>)
 8000c9a:	f000 facf 	bl	800123c <lcd_send_string>
		lcd_goto_XY(1, 0);
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	f000 faea 	bl	800127a <lcd_goto_XY>
		lcd_send_string("Choice color...");
 8000ca6:	481b      	ldr	r0, [pc, #108]	; (8000d14 <display_setting+0xac>)
 8000ca8:	f000 fac8 	bl	800123c <lcd_send_string>
		break;
 8000cac:	e02c      	b.n	8000d08 <display_setting+0xa0>
	case RED_LED:
		lcd_goto_XY(0, 0);
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f000 fae2 	bl	800127a <lcd_goto_XY>
		lcd_send_string("typing timer for");
 8000cb6:	4818      	ldr	r0, [pc, #96]	; (8000d18 <display_setting+0xb0>)
 8000cb8:	f000 fac0 	bl	800123c <lcd_send_string>
		lcd_goto_XY(1, 0);
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	f000 fadb 	bl	800127a <lcd_goto_XY>
		lcd_send_string("RED LED...");
 8000cc4:	4815      	ldr	r0, [pc, #84]	; (8000d1c <display_setting+0xb4>)
 8000cc6:	f000 fab9 	bl	800123c <lcd_send_string>
		break;
 8000cca:	e01d      	b.n	8000d08 <display_setting+0xa0>
	case YELLOW_LED:
		lcd_goto_XY(0, 0);
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f000 fad3 	bl	800127a <lcd_goto_XY>
		lcd_send_string("typing timer for");
 8000cd4:	4810      	ldr	r0, [pc, #64]	; (8000d18 <display_setting+0xb0>)
 8000cd6:	f000 fab1 	bl	800123c <lcd_send_string>
		lcd_goto_XY(1, 0);
 8000cda:	2100      	movs	r1, #0
 8000cdc:	2001      	movs	r0, #1
 8000cde:	f000 facc 	bl	800127a <lcd_goto_XY>
		lcd_send_string("YELLOW LED...");
 8000ce2:	480f      	ldr	r0, [pc, #60]	; (8000d20 <display_setting+0xb8>)
 8000ce4:	f000 faaa 	bl	800123c <lcd_send_string>
		break;
 8000ce8:	e00e      	b.n	8000d08 <display_setting+0xa0>
	case GREEN_LED:
		lcd_goto_XY(0, 0);
 8000cea:	2100      	movs	r1, #0
 8000cec:	2000      	movs	r0, #0
 8000cee:	f000 fac4 	bl	800127a <lcd_goto_XY>
		lcd_send_string("typing timer for");
 8000cf2:	4809      	ldr	r0, [pc, #36]	; (8000d18 <display_setting+0xb0>)
 8000cf4:	f000 faa2 	bl	800123c <lcd_send_string>
		lcd_goto_XY(1, 0);
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	f000 fabd 	bl	800127a <lcd_goto_XY>
		lcd_send_string("GREEN LED...");
 8000d00:	4808      	ldr	r0, [pc, #32]	; (8000d24 <display_setting+0xbc>)
 8000d02:	f000 fa9b 	bl	800123c <lcd_send_string>
		break;
 8000d06:	bf00      	nop
	}
}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000104 	.word	0x20000104
 8000d10:	08005f10 	.word	0x08005f10
 8000d14:	08005f24 	.word	0x08005f24
 8000d18:	08005f34 	.word	0x08005f34
 8000d1c:	08005f48 	.word	0x08005f48
 8000d20:	08005f54 	.word	0x08005f54
 8000d24:	08005f64 	.word	0x08005f64

08000d28 <run_setting>:

void run_setting()
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
	fsm_setting();
 8000d2c:	f7ff fddc 	bl	80008e8 <fsm_setting>
}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <blink_led>:
char red_timer_string [] = "RED=";
char green_timer_string [] = "GREEN=";
char yellow_timer_string [] = "AMBER=";

void blink_led()
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
	counter_blinkLed--;
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <blink_led+0x28>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	3b01      	subs	r3, #1
 8000d3e:	4a07      	ldr	r2, [pc, #28]	; (8000d5c <blink_led+0x28>)
 8000d40:	6013      	str	r3, [r2, #0]

	if(counter_blinkLed <= 0)
 8000d42:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <blink_led+0x28>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	dc06      	bgt.n	8000d58 <blink_led+0x24>
	{
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000d4a:	2120      	movs	r1, #32
 8000d4c:	4804      	ldr	r0, [pc, #16]	; (8000d60 <blink_led+0x2c>)
 8000d4e:	f002 f9f5 	bl	800313c <HAL_GPIO_TogglePin>
		counter_blinkLed = TIME_BLINK/TICK;
 8000d52:	4b02      	ldr	r3, [pc, #8]	; (8000d5c <blink_led+0x28>)
 8000d54:	2264      	movs	r2, #100	; 0x64
 8000d56:	601a      	str	r2, [r3, #0]
	}
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	2000004c 	.word	0x2000004c
 8000d60:	40010800 	.word	0x40010800

08000d64 <start_timerRun>:

int counterOneSecond = 1000/TICK;
bool OneSecondPass = 0;

void start_timerRun()
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
	counterOneSecond = 1000/TICK;
 8000d68:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <start_timerRun+0x18>)
 8000d6a:	2264      	movs	r2, #100	; 0x64
 8000d6c:	601a      	str	r2, [r3, #0]
	OneSecondPass = 0;
 8000d6e:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <start_timerRun+0x1c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr
 8000d7c:	20000068 	.word	0x20000068
 8000d80:	20000108 	.word	0x20000108

08000d84 <timerRun>:

void timerRun()
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
	counterOneSecond--;
 8000d88:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <timerRun+0x2c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	3b01      	subs	r3, #1
 8000d8e:	4a08      	ldr	r2, [pc, #32]	; (8000db0 <timerRun+0x2c>)
 8000d90:	6013      	str	r3, [r2, #0]
	if(counterOneSecond <= 0)
 8000d92:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <timerRun+0x2c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	dc05      	bgt.n	8000da6 <timerRun+0x22>
	{
		OneSecondPass = 1;
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <timerRun+0x30>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	701a      	strb	r2, [r3, #0]
		counterOneSecond = 1000/TICK;
 8000da0:	4b03      	ldr	r3, [pc, #12]	; (8000db0 <timerRun+0x2c>)
 8000da2:	2264      	movs	r2, #100	; 0x64
 8000da4:	601a      	str	r2, [r3, #0]
	}
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	20000068 	.word	0x20000068
 8000db4:	20000108 	.word	0x20000108

08000db8 <IsOneSecondPassed>:

bool IsOneSecondPassed()
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
	return OneSecondPass;
 8000dbc:	4b02      	ldr	r3, [pc, #8]	; (8000dc8 <IsOneSecondPassed+0x10>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr
 8000dc8:	20000108 	.word	0x20000108

08000dcc <blink_traffic_light_following_desire>:

uint8_t current_state = Led_OFF;
void blink_traffic_light_following_desire(uint8_t color_u_want) //Green or Red or Amber
//period is 1s
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
	if(!current_state) //current state = 0 = Led_OFF
 8000dd6:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <blink_traffic_light_following_desire+0x64>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d10b      	bne.n	8000df6 <blink_traffic_light_following_desire+0x2a>
	{
		off_state();
 8000dde:	f000 f8b7 	bl	8000f50 <off_state>
		if(IsOneSecondPassed())
 8000de2:	f7ff ffe9 	bl	8000db8 <IsOneSecondPassed>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d004      	beq.n	8000df6 <blink_traffic_light_following_desire+0x2a>
		{
			clearOneSecondFlag();
 8000dec:	f000 f822 	bl	8000e34 <clearOneSecondFlag>
			current_state = color_u_want;
 8000df0:	4a0f      	ldr	r2, [pc, #60]	; (8000e30 <blink_traffic_light_following_desire+0x64>)
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	7013      	strb	r3, [r2, #0]
		}
	}
	if(current_state) //current state != 0
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <blink_traffic_light_following_desire+0x64>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d011      	beq.n	8000e22 <blink_traffic_light_following_desire+0x56>
	{
		set_state_odd_road(color_u_want);
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f000 f86b 	bl	8000edc <set_state_odd_road>
		set_state_even_road(color_u_want);
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f000 f877 	bl	8000efc <set_state_even_road>
		if(IsOneSecondPassed())
 8000e0e:	f7ff ffd3 	bl	8000db8 <IsOneSecondPassed>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d004      	beq.n	8000e22 <blink_traffic_light_following_desire+0x56>
		{
			clearOneSecondFlag();
 8000e18:	f000 f80c 	bl	8000e34 <clearOneSecondFlag>
			current_state = Led_OFF;
 8000e1c:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <blink_traffic_light_following_desire+0x64>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	701a      	strb	r2, [r3, #0]
		}
	}

	run_led_traffic();
 8000e22:	f000 f813 	bl	8000e4c <run_led_traffic>
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000109 	.word	0x20000109

08000e34 <clearOneSecondFlag>:

void clearOneSecondFlag()
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
	OneSecondPass = 0;
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <clearOneSecondFlag+0x14>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	701a      	strb	r2, [r3, #0]
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000108 	.word	0x20000108

08000e4c <run_led_traffic>:

void run_led_traffic()
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MSB_Even_GPIO_Port, MSB_Even_Pin, state_even_road / 10); //00 is 0, 10  is 1, 11 is 1
 8000e50:	4b1e      	ldr	r3, [pc, #120]	; (8000ecc <run_led_traffic+0x80>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	4a1e      	ldr	r2, [pc, #120]	; (8000ed0 <run_led_traffic+0x84>)
 8000e56:	fba2 2303 	umull	r2, r3, r2, r3
 8000e5a:	08db      	lsrs	r3, r3, #3
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	461a      	mov	r2, r3
 8000e60:	2110      	movs	r1, #16
 8000e62:	481c      	ldr	r0, [pc, #112]	; (8000ed4 <run_led_traffic+0x88>)
 8000e64:	f002 f952 	bl	800310c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LSB_Even_GPIO_Port, LSB_Even_Pin, state_even_road % 10); //00 is 0, 10 is 0, 11 is 1
 8000e68:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <run_led_traffic+0x80>)
 8000e6a:	781a      	ldrb	r2, [r3, #0]
 8000e6c:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <run_led_traffic+0x84>)
 8000e6e:	fba3 1302 	umull	r1, r3, r3, r2
 8000e72:	08d9      	lsrs	r1, r3, #3
 8000e74:	460b      	mov	r3, r1
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	440b      	add	r3, r1
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	461a      	mov	r2, r3
 8000e82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e86:	4813      	ldr	r0, [pc, #76]	; (8000ed4 <run_led_traffic+0x88>)
 8000e88:	f002 f940 	bl	800310c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MSB_Odd_GPIO_Port, MSB_Odd_Pin, state_odd_road / 10); //00 is 0, 10  is 1, 11 is 1
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <run_led_traffic+0x8c>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	4a0f      	ldr	r2, [pc, #60]	; (8000ed0 <run_led_traffic+0x84>)
 8000e92:	fba2 2303 	umull	r2, r3, r2, r3
 8000e96:	08db      	lsrs	r3, r3, #3
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	2108      	movs	r1, #8
 8000e9e:	480d      	ldr	r0, [pc, #52]	; (8000ed4 <run_led_traffic+0x88>)
 8000ea0:	f002 f934 	bl	800310c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LSB_Odd_GPIO_Port, LSB_Odd_Pin, state_odd_road % 10); //00 is 0, 10 is 0, 11 is 1'
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <run_led_traffic+0x8c>)
 8000ea6:	781a      	ldrb	r2, [r3, #0]
 8000ea8:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <run_led_traffic+0x84>)
 8000eaa:	fba3 1302 	umull	r1, r3, r3, r2
 8000eae:	08d9      	lsrs	r1, r3, #3
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	440b      	add	r3, r1
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	2120      	movs	r1, #32
 8000ec0:	4804      	ldr	r0, [pc, #16]	; (8000ed4 <run_led_traffic+0x88>)
 8000ec2:	f002 f923 	bl	800310c <HAL_GPIO_WritePin>
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000105 	.word	0x20000105
 8000ed0:	cccccccd 	.word	0xcccccccd
 8000ed4:	40010c00 	.word	0x40010c00
 8000ed8:	20000106 	.word	0x20000106

08000edc <set_state_odd_road>:
void set_state_odd_road(uint8_t value_for_set)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
	state_odd_road = value_for_set;
 8000ee6:	4a04      	ldr	r2, [pc, #16]	; (8000ef8 <set_state_odd_road+0x1c>)
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	7013      	strb	r3, [r2, #0]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000106 	.word	0x20000106

08000efc <set_state_even_road>:
void set_state_even_road(uint8_t value_for_set)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
	state_even_road = value_for_set;
 8000f06:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <set_state_even_road+0x1c>)
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	7013      	strb	r3, [r2, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bc80      	pop	{r7}
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20000105 	.word	0x20000105

08000f1c <get_red_even_or_odd>:

uint8_t get_red_even_or_odd()
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
	return red_even_or_odd;
 8000f20:	4b02      	ldr	r3, [pc, #8]	; (8000f2c <get_red_even_or_odd+0x10>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr
 8000f2c:	20000107 	.word	0x20000107

08000f30 <set_red_even_or_odd>:
void set_red_even_or_odd(uint8_t value_for_set)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
	red_even_or_odd = value_for_set;
 8000f3a:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <set_red_even_or_odd+0x1c>)
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	7013      	strb	r3, [r2, #0]
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	20000107 	.word	0x20000107

08000f50 <off_state>:

void off_state()
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
	state_even_road = Led_OFF;
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <off_state+0x18>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	701a      	strb	r2, [r3, #0]
	state_odd_road = Led_OFF;
 8000f5a:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <off_state+0x1c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	701a      	strb	r2, [r3, #0]
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr
 8000f68:	20000105 	.word	0x20000105
 8000f6c:	20000106 	.word	0x20000106

08000f70 <get_red_timer_string>:

char * get_red_timer_string()
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
	return red_timer_string;
 8000f74:	4b02      	ldr	r3, [pc, #8]	; (8000f80 <get_red_timer_string+0x10>)
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000050 	.word	0x20000050

08000f84 <get_green_timer_string>:
char * get_green_timer_string()
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
	return green_timer_string;
 8000f88:	4b02      	ldr	r3, [pc, #8]	; (8000f94 <get_green_timer_string+0x10>)
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000058 	.word	0x20000058

08000f98 <get_yellow_timer_string>:
char * get_yellow_timer_string()
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
	return yellow_timer_string;
 8000f9c:	4b02      	ldr	r3, [pc, #8]	; (8000fa8 <get_yellow_timer_string+0x10>)
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000060 	.word	0x20000060

08000fac <display_choose_mode>:

void display_choose_mode()
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
	lcd_clear_display();
 8000fb0:	f000 f959 	bl	8001266 <lcd_clear_display>
	lcd_goto_XY(0, 0);
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f000 f95f 	bl	800127a <lcd_goto_XY>
	lcd_send_string("please choose a");
 8000fbc:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <display_choose_mode+0x28>)
 8000fbe:	f000 f93d 	bl	800123c <lcd_send_string>
	lcd_goto_XY(1, 0);
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	f000 f958 	bl	800127a <lcd_goto_XY>
	lcd_send_string("mode that u want");
 8000fca:	4803      	ldr	r0, [pc, #12]	; (8000fd8 <display_choose_mode+0x2c>)
 8000fcc:	f000 f936 	bl	800123c <lcd_send_string>
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	08005f74 	.word	0x08005f74
 8000fd8:	08005f84 	.word	0x08005f84

08000fdc <fsm_main>:
}Control_mode;

Control_mode control_mode = CHOOSE_MODE;

void fsm_main()
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	switch (control_mode)
 8000fe0:	4b48      	ldr	r3, [pc, #288]	; (8001104 <fsm_main+0x128>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b03      	cmp	r3, #3
 8000fe6:	d85d      	bhi.n	80010a4 <fsm_main+0xc8>
 8000fe8:	a201      	add	r2, pc, #4	; (adr r2, 8000ff0 <fsm_main+0x14>)
 8000fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fee:	bf00      	nop
 8000ff0:	08001001 	.word	0x08001001
 8000ff4:	08001091 	.word	0x08001091
 8000ff8:	08001097 	.word	0x08001097
 8000ffc:	0800109d 	.word	0x0800109d
	{
	case CHOOSE_MODE:
		blink_traffic_light_following_desire(YELLOW); //blink yellow led every second
 8001000:	2001      	movs	r0, #1
 8001002:	f7ff fee3 	bl	8000dcc <blink_traffic_light_following_desire>
		parse_auto_mode(buffer[parser_index]);
 8001006:	4b40      	ldr	r3, [pc, #256]	; (8001108 <fsm_main+0x12c>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	461a      	mov	r2, r3
 800100c:	4b3f      	ldr	r3, [pc, #252]	; (800110c <fsm_main+0x130>)
 800100e:	5c9b      	ldrb	r3, [r3, r2]
 8001010:	4618      	mov	r0, r3
 8001012:	f001 f913 	bl	800223c <parse_auto_mode>
		parse_setting_mode(buffer[parser_index]);
 8001016:	4b3c      	ldr	r3, [pc, #240]	; (8001108 <fsm_main+0x12c>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	4b3b      	ldr	r3, [pc, #236]	; (800110c <fsm_main+0x130>)
 800101e:	5c9b      	ldrb	r3, [r3, r2]
 8001020:	4618      	mov	r0, r3
 8001022:	f001 f95b 	bl	80022dc <parse_setting_mode>
		parse_manual_mode(buffer[parser_index]);
 8001026:	4b38      	ldr	r3, [pc, #224]	; (8001108 <fsm_main+0x12c>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	461a      	mov	r2, r3
 800102c:	4b37      	ldr	r3, [pc, #220]	; (800110c <fsm_main+0x130>)
 800102e:	5c9b      	ldrb	r3, [r3, r2]
 8001030:	4618      	mov	r0, r3
 8001032:	f001 f9af 	bl	8002394 <parse_manual_mode>
		if(AUTO_MODE_flag)
 8001036:	4b36      	ldr	r3, [pc, #216]	; (8001110 <fsm_main+0x134>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d00c      	beq.n	8001058 <fsm_main+0x7c>
		{
			start_timerRun();//START TIMER FROM ZERO
 800103e:	f7ff fe91 	bl	8000d64 <start_timerRun>
			fsm_auto_init();
 8001042:	f7ff fa8d 	bl	8000560 <fsm_auto_init>
			control_mode = AUTO_MODE;
 8001046:	4b2f      	ldr	r3, [pc, #188]	; (8001104 <fsm_main+0x128>)
 8001048:	2201      	movs	r2, #1
 800104a:	701a      	strb	r2, [r3, #0]
			AUTO_MODE_flag = 0;
 800104c:	4b30      	ldr	r3, [pc, #192]	; (8001110 <fsm_main+0x134>)
 800104e:	2200      	movs	r2, #0
 8001050:	701a      	strb	r2, [r3, #0]
			auto_mode_display();
 8001052:	f7ff fb1b 	bl	800068c <auto_mode_display>
		{
			control_mode = MANUAL_MODE;
			MANUAL_MODE_flag = 0;
			display_manual();
		}
		break;
 8001056:	e024      	b.n	80010a2 <fsm_main+0xc6>
		else if(SETTING_MODE_flag)
 8001058:	4b2e      	ldr	r3, [pc, #184]	; (8001114 <fsm_main+0x138>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00a      	beq.n	8001076 <fsm_main+0x9a>
			start_timerRun();//START TIMER FROM ZERO
 8001060:	f7ff fe80 	bl	8000d64 <start_timerRun>
			control_mode = SETTING_MODE;
 8001064:	4b27      	ldr	r3, [pc, #156]	; (8001104 <fsm_main+0x128>)
 8001066:	2202      	movs	r2, #2
 8001068:	701a      	strb	r2, [r3, #0]
			SETTING_MODE_flag = 0;
 800106a:	4b2a      	ldr	r3, [pc, #168]	; (8001114 <fsm_main+0x138>)
 800106c:	2200      	movs	r2, #0
 800106e:	701a      	strb	r2, [r3, #0]
			display_setting();
 8001070:	f7ff fdfa 	bl	8000c68 <display_setting>
		break;
 8001074:	e015      	b.n	80010a2 <fsm_main+0xc6>
		else if(MANUAL_MODE_flag)
 8001076:	4b28      	ldr	r3, [pc, #160]	; (8001118 <fsm_main+0x13c>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d011      	beq.n	80010a2 <fsm_main+0xc6>
			control_mode = MANUAL_MODE;
 800107e:	4b21      	ldr	r3, [pc, #132]	; (8001104 <fsm_main+0x128>)
 8001080:	2203      	movs	r2, #3
 8001082:	701a      	strb	r2, [r3, #0]
			MANUAL_MODE_flag = 0;
 8001084:	4b24      	ldr	r3, [pc, #144]	; (8001118 <fsm_main+0x13c>)
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]
			display_manual();
 800108a:	f7ff fbc9 	bl	8000820 <display_manual>
		break;
 800108e:	e008      	b.n	80010a2 <fsm_main+0xc6>
	case AUTO_MODE:
		run_auto();
 8001090:	f7ff fb8c 	bl	80007ac <run_auto>
		break;
 8001094:	e006      	b.n	80010a4 <fsm_main+0xc8>
	case SETTING_MODE:
		run_setting();
 8001096:	f7ff fe47 	bl	8000d28 <run_setting>
		break;
 800109a:	e003      	b.n	80010a4 <fsm_main+0xc8>
	case MANUAL_MODE:
		run_manual();
 800109c:	f7ff fbe2 	bl	8000864 <run_manual>
		break;
 80010a0:	e000      	b.n	80010a4 <fsm_main+0xc8>
		break;
 80010a2:	bf00      	nop
	}

	parse_choose_mode(buffer[parser_index]);
 80010a4:	4b18      	ldr	r3, [pc, #96]	; (8001108 <fsm_main+0x12c>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b18      	ldr	r3, [pc, #96]	; (800110c <fsm_main+0x130>)
 80010ac:	5c9b      	ldrb	r3, [r3, r2]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f001 f868 	bl	8002184 <parse_choose_mode>

	if(CHOOSING_MODE_flag)
 80010b4:	4b19      	ldr	r3, [pc, #100]	; (800111c <fsm_main+0x140>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d013      	beq.n	80010e4 <fsm_main+0x108>
	{
		if(control_mode != CHOOSE_MODE)
 80010bc:	4b11      	ldr	r3, [pc, #68]	; (8001104 <fsm_main+0x128>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <fsm_main+0xec>
			display_choose_mode();
 80010c4:	f7ff ff72 	bl	8000fac <display_choose_mode>

		if(control_mode == SETTING_MODE)
 80010c8:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <fsm_main+0x128>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d103      	bne.n	80010d8 <fsm_main+0xfc>
		{
			validate_timer();
 80010d0:	f7ff fdae 	bl	8000c30 <validate_timer>
			reset_fsm_setting();
 80010d4:	f7ff fda0 	bl	8000c18 <reset_fsm_setting>
		}
		control_mode = CHOOSE_MODE;
 80010d8:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <fsm_main+0x128>)
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
		CHOOSING_MODE_flag = 0;
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <fsm_main+0x140>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
	}

	if(++parser_index >= 7)
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <fsm_main+0x12c>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	3301      	adds	r3, #1
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <fsm_main+0x12c>)
 80010ee:	701a      	strb	r2, [r3, #0]
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <fsm_main+0x12c>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b06      	cmp	r3, #6
 80010f6:	d902      	bls.n	80010fe <fsm_main+0x122>
		parser_index = 0;
 80010f8:	4b03      	ldr	r3, [pc, #12]	; (8001108 <fsm_main+0x12c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	701a      	strb	r2, [r3, #0]
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	2000010a 	.word	0x2000010a
 8001108:	20000123 	.word	0x20000123
 800110c:	20000228 	.word	0x20000228
 8001110:	20000119 	.word	0x20000119
 8001114:	2000011a 	.word	0x2000011a
 8001118:	2000011f 	.word	0x2000011f
 800111c:	20000118 	.word	0x20000118

08001120 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af02      	add	r7, sp, #8
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	f023 030f 	bic.w	r3, r3, #15
 8001130:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	011b      	lsls	r3, r3, #4
 8001136:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	f043 030c 	orr.w	r3, r3, #12
 800113e:	b2db      	uxtb	r3, r3
 8001140:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001142:	7bfb      	ldrb	r3, [r7, #15]
 8001144:	f043 0308 	orr.w	r3, r3, #8
 8001148:	b2db      	uxtb	r3, r3
 800114a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800114c:	7bbb      	ldrb	r3, [r7, #14]
 800114e:	f043 030c 	orr.w	r3, r3, #12
 8001152:	b2db      	uxtb	r3, r3
 8001154:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001156:	7bbb      	ldrb	r3, [r7, #14]
 8001158:	f043 0308 	orr.w	r3, r3, #8
 800115c:	b2db      	uxtb	r3, r3
 800115e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001160:	f107 0208 	add.w	r2, r7, #8
 8001164:	2364      	movs	r3, #100	; 0x64
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	2304      	movs	r3, #4
 800116a:	2142      	movs	r1, #66	; 0x42
 800116c:	4803      	ldr	r0, [pc, #12]	; (800117c <lcd_send_cmd+0x5c>)
 800116e:	f002 f965 	bl	800343c <HAL_I2C_Master_Transmit>
}
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000144 	.word	0x20000144

08001180 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af02      	add	r7, sp, #8
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	f023 030f 	bic.w	r3, r3, #15
 8001190:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	011b      	lsls	r3, r3, #4
 8001196:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	f043 030d 	orr.w	r3, r3, #13
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	f043 0309 	orr.w	r3, r3, #9
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80011ac:	7bbb      	ldrb	r3, [r7, #14]
 80011ae:	f043 030d 	orr.w	r3, r3, #13
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80011b6:	7bbb      	ldrb	r3, [r7, #14]
 80011b8:	f043 0309 	orr.w	r3, r3, #9
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80011c0:	f107 0208 	add.w	r2, r7, #8
 80011c4:	2364      	movs	r3, #100	; 0x64
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	2304      	movs	r3, #4
 80011ca:	2142      	movs	r1, #66	; 0x42
 80011cc:	4803      	ldr	r0, [pc, #12]	; (80011dc <lcd_send_data+0x5c>)
 80011ce:	f002 f935 	bl	800343c <HAL_I2C_Master_Transmit>
}
 80011d2:	bf00      	nop
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000144 	.word	0x20000144

080011e0 <lcd_init>:

void lcd_init (void) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 80011e4:	2033      	movs	r0, #51	; 0x33
 80011e6:	f7ff ff9b 	bl	8001120 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 80011ea:	2032      	movs	r0, #50	; 0x32
 80011ec:	f7ff ff98 	bl	8001120 <lcd_send_cmd>
	HAL_Delay(50);
 80011f0:	2032      	movs	r0, #50	; 0x32
 80011f2:	f001 fc23 	bl	8002a3c <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 80011f6:	2028      	movs	r0, #40	; 0x28
 80011f8:	f7ff ff92 	bl	8001120 <lcd_send_cmd>
	HAL_Delay(50);
 80011fc:	2032      	movs	r0, #50	; 0x32
 80011fe:	f001 fc1d 	bl	8002a3c <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8001202:	2001      	movs	r0, #1
 8001204:	f7ff ff8c 	bl	8001120 <lcd_send_cmd>
	HAL_Delay(50);
 8001208:	2032      	movs	r0, #50	; 0x32
 800120a:	f001 fc17 	bl	8002a3c <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 800120e:	2006      	movs	r0, #6
 8001210:	f7ff ff86 	bl	8001120 <lcd_send_cmd>
	HAL_Delay(50);
 8001214:	2032      	movs	r0, #50	; 0x32
 8001216:	f001 fc11 	bl	8002a3c <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 800121a:	200c      	movs	r0, #12
 800121c:	f7ff ff80 	bl	8001120 <lcd_send_cmd>
	HAL_Delay(50);
 8001220:	2032      	movs	r0, #50	; 0x32
 8001222:	f001 fc0b 	bl	8002a3c <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8001226:	2002      	movs	r0, #2
 8001228:	f7ff ff7a 	bl	8001120 <lcd_send_cmd>
	HAL_Delay(50);
 800122c:	2032      	movs	r0, #50	; 0x32
 800122e:	f001 fc05 	bl	8002a3c <HAL_Delay>
	lcd_send_cmd (0x80);
 8001232:	2080      	movs	r0, #128	; 0x80
 8001234:	f7ff ff74 	bl	8001120 <lcd_send_cmd>
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}

0800123c <lcd_send_string>:

void lcd_send_string (char *str)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*(str++));
 8001244:	e006      	b.n	8001254 <lcd_send_string+0x18>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	1c5a      	adds	r2, r3, #1
 800124a:	607a      	str	r2, [r7, #4]
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ff96 	bl	8001180 <lcd_send_data>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1f4      	bne.n	8001246 <lcd_send_string+0xa>
}
 800125c:	bf00      	nop
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <lcd_clear_display>:

void lcd_clear_display (void)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 800126a:	2001      	movs	r0, #1
 800126c:	f7ff ff58 	bl	8001120 <lcd_send_cmd>
	HAL_Delay(50);
 8001270:	2032      	movs	r0, #50	; 0x32
 8001272:	f001 fbe3 	bl	8002a3c <HAL_Delay>
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}

0800127a <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b084      	sub	sp, #16
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
 8001282:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 0)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d108      	bne.n	800129c <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row + col;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	b2da      	uxtb	r2, r3
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	b2db      	uxtb	r3, r3
 8001292:	4413      	add	r3, r2
 8001294:	b2db      	uxtb	r3, r3
 8001296:	3b80      	subs	r3, #128	; 0x80
 8001298:	73fb      	strb	r3, [r7, #15]
 800129a:	e008      	b.n	80012ae <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	3340      	adds	r3, #64	; 0x40
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	b25b      	sxtb	r3, r3
 80012a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012aa:	b25b      	sxtb	r3, r3
 80012ac:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ff35 	bl	8001120 <lcd_send_cmd>
}
 80012b6:	bf00      	nop
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012c6:	f001 fb57 	bl	8002978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ca:	f000 f837 	bl	800133c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ce:	f000 f91b 	bl	8001508 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012d2:	f000 f8ef 	bl	80014b4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80012d6:	f000 f873 	bl	80013c0 <MX_I2C1_Init>
  MX_TIM2_Init();
 80012da:	f000 f89f 	bl	800141c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80012de:	4812      	ldr	r0, [pc, #72]	; (8001328 <main+0x68>)
 80012e0:	f003 f862 	bl	80043a8 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT (&huart2, &temp, 1);
 80012e4:	2201      	movs	r2, #1
 80012e6:	4911      	ldr	r1, [pc, #68]	; (800132c <main+0x6c>)
 80012e8:	4811      	ldr	r0, [pc, #68]	; (8001330 <main+0x70>)
 80012ea:	f003 fc4f 	bl	8004b8c <HAL_UART_Receive_IT>
  SCH_Init();
 80012ee:	f000 fa6b 	bl	80017c8 <SCH_Init>
  lcd_init();
 80012f2:	f7ff ff75 	bl	80011e0 <lcd_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Add_Task(&blink_led, 0, TICK);
 80012f6:	230a      	movs	r3, #10
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	f04f 0200 	mov.w	r2, #0
 80012fe:	f04f 0300 	mov.w	r3, #0
 8001302:	480c      	ldr	r0, [pc, #48]	; (8001334 <main+0x74>)
 8001304:	f000 fd36 	bl	8001d74 <SCH_Add_Task>
  SCH_Add_Task(&timerRun, 0, TICK);
 8001308:	230a      	movs	r3, #10
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	f04f 0200 	mov.w	r2, #0
 8001310:	f04f 0300 	mov.w	r3, #0
 8001314:	4808      	ldr	r0, [pc, #32]	; (8001338 <main+0x78>)
 8001316:	f000 fd2d 	bl	8001d74 <SCH_Add_Task>
//  SCH_Add_Task(&fsm_main, 0, TICK);
  display_choose_mode();
 800131a:	f7ff fe47 	bl	8000fac <display_choose_mode>
  while (1)
  {
	SCH_Dispatch_Tasks();
 800131e:	f000 fcd9 	bl	8001cd4 <SCH_Dispatch_Tasks>
//	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
//	  HAL_Delay(1000);
	  fsm_main();
 8001322:	f7ff fe5b 	bl	8000fdc <fsm_main>
	SCH_Dispatch_Tasks();
 8001326:	e7fa      	b.n	800131e <main+0x5e>
 8001328:	20000198 	.word	0x20000198
 800132c:	2000010b 	.word	0x2000010b
 8001330:	200001e0 	.word	0x200001e0
 8001334:	08000d35 	.word	0x08000d35
 8001338:	08000d85 	.word	0x08000d85

0800133c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b090      	sub	sp, #64	; 0x40
 8001340:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001342:	f107 0318 	add.w	r3, r7, #24
 8001346:	2228      	movs	r2, #40	; 0x28
 8001348:	2100      	movs	r1, #0
 800134a:	4618      	mov	r0, r3
 800134c:	f004 f990 	bl	8005670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
 800135c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800135e:	2302      	movs	r3, #2
 8001360:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001362:	2301      	movs	r3, #1
 8001364:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001366:	2310      	movs	r3, #16
 8001368:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800136a:	2302      	movs	r3, #2
 800136c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800136e:	2300      	movs	r3, #0
 8001370:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001372:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001376:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001378:	f107 0318 	add.w	r3, r7, #24
 800137c:	4618      	mov	r0, r3
 800137e:	f002 fbb5 	bl	8003aec <HAL_RCC_OscConfig>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001388:	f000 f97c 	bl	8001684 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800138c:	230f      	movs	r3, #15
 800138e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001390:	2302      	movs	r3, #2
 8001392:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8001394:	23a0      	movs	r3, #160	; 0xa0
 8001396:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001398:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800139c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	2102      	movs	r1, #2
 80013a6:	4618      	mov	r0, r3
 80013a8:	f002 fe20 	bl	8003fec <HAL_RCC_ClockConfig>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80013b2:	f000 f967 	bl	8001684 <Error_Handler>
  }
}
 80013b6:	bf00      	nop
 80013b8:	3740      	adds	r7, #64	; 0x40
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013c4:	4b12      	ldr	r3, [pc, #72]	; (8001410 <MX_I2C1_Init+0x50>)
 80013c6:	4a13      	ldr	r2, [pc, #76]	; (8001414 <MX_I2C1_Init+0x54>)
 80013c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013ca:	4b11      	ldr	r3, [pc, #68]	; (8001410 <MX_I2C1_Init+0x50>)
 80013cc:	4a12      	ldr	r2, [pc, #72]	; (8001418 <MX_I2C1_Init+0x58>)
 80013ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <MX_I2C1_Init+0x50>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <MX_I2C1_Init+0x50>)
 80013d8:	2200      	movs	r2, #0
 80013da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <MX_I2C1_Init+0x50>)
 80013de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013e4:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <MX_I2C1_Init+0x50>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <MX_I2C1_Init+0x50>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013f0:	4b07      	ldr	r3, [pc, #28]	; (8001410 <MX_I2C1_Init+0x50>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <MX_I2C1_Init+0x50>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013fc:	4804      	ldr	r0, [pc, #16]	; (8001410 <MX_I2C1_Init+0x50>)
 80013fe:	f001 fed9 	bl	80031b4 <HAL_I2C_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001408:	f000 f93c 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000144 	.word	0x20000144
 8001414:	40005400 	.word	0x40005400
 8001418:	000186a0 	.word	0x000186a0

0800141c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001422:	f107 0308 	add.w	r3, r7, #8
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001430:	463b      	mov	r3, r7
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001438:	4b1d      	ldr	r3, [pc, #116]	; (80014b0 <MX_TIM2_Init+0x94>)
 800143a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800143e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001440:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <MX_TIM2_Init+0x94>)
 8001442:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001446:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001448:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <MX_TIM2_Init+0x94>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800144e:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <MX_TIM2_Init+0x94>)
 8001450:	2209      	movs	r2, #9
 8001452:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001454:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <MX_TIM2_Init+0x94>)
 8001456:	2200      	movs	r2, #0
 8001458:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800145a:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <MX_TIM2_Init+0x94>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001460:	4813      	ldr	r0, [pc, #76]	; (80014b0 <MX_TIM2_Init+0x94>)
 8001462:	f002 ff51 	bl	8004308 <HAL_TIM_Base_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800146c:	f000 f90a 	bl	8001684 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001470:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001474:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001476:	f107 0308 	add.w	r3, r7, #8
 800147a:	4619      	mov	r1, r3
 800147c:	480c      	ldr	r0, [pc, #48]	; (80014b0 <MX_TIM2_Init+0x94>)
 800147e:	f003 f8d5 	bl	800462c <HAL_TIM_ConfigClockSource>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001488:	f000 f8fc 	bl	8001684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148c:	2300      	movs	r3, #0
 800148e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001494:	463b      	mov	r3, r7
 8001496:	4619      	mov	r1, r3
 8001498:	4805      	ldr	r0, [pc, #20]	; (80014b0 <MX_TIM2_Init+0x94>)
 800149a:	f003 fab7 	bl	8004a0c <HAL_TIMEx_MasterConfigSynchronization>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80014a4:	f000 f8ee 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014a8:	bf00      	nop
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000198 	.word	0x20000198

080014b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014b8:	4b11      	ldr	r3, [pc, #68]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014ba:	4a12      	ldr	r2, [pc, #72]	; (8001504 <MX_USART2_UART_Init+0x50>)
 80014bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014d2:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014d8:	4b09      	ldr	r3, [pc, #36]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014da:	220c      	movs	r2, #12
 80014dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014de:	4b08      	ldr	r3, [pc, #32]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014ea:	4805      	ldr	r0, [pc, #20]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014ec:	f003 fafe 	bl	8004aec <HAL_UART_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014f6:	f000 f8c5 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	200001e0 	.word	0x200001e0
 8001504:	40004400 	.word	0x40004400

08001508 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b088      	sub	sp, #32
 800150c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150e:	f107 0310 	add.w	r3, r7, #16
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800151c:	4b38      	ldr	r3, [pc, #224]	; (8001600 <MX_GPIO_Init+0xf8>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	4a37      	ldr	r2, [pc, #220]	; (8001600 <MX_GPIO_Init+0xf8>)
 8001522:	f043 0310 	orr.w	r3, r3, #16
 8001526:	6193      	str	r3, [r2, #24]
 8001528:	4b35      	ldr	r3, [pc, #212]	; (8001600 <MX_GPIO_Init+0xf8>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	f003 0310 	and.w	r3, r3, #16
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001534:	4b32      	ldr	r3, [pc, #200]	; (8001600 <MX_GPIO_Init+0xf8>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	4a31      	ldr	r2, [pc, #196]	; (8001600 <MX_GPIO_Init+0xf8>)
 800153a:	f043 0320 	orr.w	r3, r3, #32
 800153e:	6193      	str	r3, [r2, #24]
 8001540:	4b2f      	ldr	r3, [pc, #188]	; (8001600 <MX_GPIO_Init+0xf8>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	f003 0320 	and.w	r3, r3, #32
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800154c:	4b2c      	ldr	r3, [pc, #176]	; (8001600 <MX_GPIO_Init+0xf8>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	4a2b      	ldr	r2, [pc, #172]	; (8001600 <MX_GPIO_Init+0xf8>)
 8001552:	f043 0304 	orr.w	r3, r3, #4
 8001556:	6193      	str	r3, [r2, #24]
 8001558:	4b29      	ldr	r3, [pc, #164]	; (8001600 <MX_GPIO_Init+0xf8>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001564:	4b26      	ldr	r3, [pc, #152]	; (8001600 <MX_GPIO_Init+0xf8>)
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	4a25      	ldr	r2, [pc, #148]	; (8001600 <MX_GPIO_Init+0xf8>)
 800156a:	f043 0308 	orr.w	r3, r3, #8
 800156e:	6193      	str	r3, [r2, #24]
 8001570:	4b23      	ldr	r3, [pc, #140]	; (8001600 <MX_GPIO_Init+0xf8>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	f003 0308 	and.w	r3, r3, #8
 8001578:	603b      	str	r3, [r7, #0]
 800157a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800157c:	2200      	movs	r2, #0
 800157e:	2120      	movs	r1, #32
 8001580:	4820      	ldr	r0, [pc, #128]	; (8001604 <MX_GPIO_Init+0xfc>)
 8001582:	f001 fdc3 	bl	800310c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LSB_Even_Pin|MSB_Odd_Pin|MSB_Even_Pin|LSB_Odd_Pin, GPIO_PIN_RESET);
 8001586:	2200      	movs	r2, #0
 8001588:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800158c:	481e      	ldr	r0, [pc, #120]	; (8001608 <MX_GPIO_Init+0x100>)
 800158e:	f001 fdbd 	bl	800310c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001592:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001596:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001598:	4b1c      	ldr	r3, [pc, #112]	; (800160c <MX_GPIO_Init+0x104>)
 800159a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015a0:	f107 0310 	add.w	r3, r7, #16
 80015a4:	4619      	mov	r1, r3
 80015a6:	481a      	ldr	r0, [pc, #104]	; (8001610 <MX_GPIO_Init+0x108>)
 80015a8:	f001 fc2c 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80015ac:	2320      	movs	r3, #32
 80015ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b0:	2301      	movs	r3, #1
 80015b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2302      	movs	r3, #2
 80015ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80015bc:	f107 0310 	add.w	r3, r7, #16
 80015c0:	4619      	mov	r1, r3
 80015c2:	4810      	ldr	r0, [pc, #64]	; (8001604 <MX_GPIO_Init+0xfc>)
 80015c4:	f001 fc1e 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LSB_Even_Pin MSB_Odd_Pin MSB_Even_Pin LSB_Odd_Pin */
  GPIO_InitStruct.Pin = LSB_Even_Pin|MSB_Odd_Pin|MSB_Even_Pin|LSB_Odd_Pin;
 80015c8:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80015cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ce:	2301      	movs	r3, #1
 80015d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2302      	movs	r3, #2
 80015d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015da:	f107 0310 	add.w	r3, r7, #16
 80015de:	4619      	mov	r1, r3
 80015e0:	4809      	ldr	r0, [pc, #36]	; (8001608 <MX_GPIO_Init+0x100>)
 80015e2:	f001 fc0f 	bl	8002e04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2100      	movs	r1, #0
 80015ea:	2028      	movs	r0, #40	; 0x28
 80015ec:	f001 fb21 	bl	8002c32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015f0:	2028      	movs	r0, #40	; 0x28
 80015f2:	f001 fb3a 	bl	8002c6a <HAL_NVIC_EnableIRQ>

}
 80015f6:	bf00      	nop
 80015f8:	3720      	adds	r7, #32
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40021000 	.word	0x40021000
 8001604:	40010800 	.word	0x40010800
 8001608:	40010c00 	.word	0x40010c00
 800160c:	10110000 	.word	0x10110000
 8001610:	40011000 	.word	0x40011000

08001614 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	SCH_Update();
 800161c:	f000 f906 	bl	800182c <SCH_Update>
}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback ( UART_HandleTypeDef * huart ) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	if( huart -> Instance == USART2 )
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a0e      	ldr	r2, [pc, #56]	; (8001670 <HAL_UART_RxCpltCallback+0x48>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d116      	bne.n	8001668 <HAL_UART_RxCpltCallback+0x40>
	{
		buffer[index_buffer++] = temp ;
 800163a:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <HAL_UART_RxCpltCallback+0x4c>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	1c5a      	adds	r2, r3, #1
 8001640:	b2d1      	uxtb	r1, r2
 8001642:	4a0c      	ldr	r2, [pc, #48]	; (8001674 <HAL_UART_RxCpltCallback+0x4c>)
 8001644:	7011      	strb	r1, [r2, #0]
 8001646:	461a      	mov	r2, r3
 8001648:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <HAL_UART_RxCpltCallback+0x50>)
 800164a:	7819      	ldrb	r1, [r3, #0]
 800164c:	4b0b      	ldr	r3, [pc, #44]	; (800167c <HAL_UART_RxCpltCallback+0x54>)
 800164e:	5499      	strb	r1, [r3, r2]
		if( index_buffer >= MAX_BUFFER_SIZE)
 8001650:	4b08      	ldr	r3, [pc, #32]	; (8001674 <HAL_UART_RxCpltCallback+0x4c>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b06      	cmp	r3, #6
 8001656:	d902      	bls.n	800165e <HAL_UART_RxCpltCallback+0x36>
			index_buffer = 0;
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_UART_RxCpltCallback+0x4c>)
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
//		buffer_flag = 1;
//		printf("temp = %d", temp);
//		AUTO_MODE_flag = 1;
		HAL_UART_Receive_IT(&huart2, &temp, 1);
 800165e:	2201      	movs	r2, #1
 8001660:	4905      	ldr	r1, [pc, #20]	; (8001678 <HAL_UART_RxCpltCallback+0x50>)
 8001662:	4807      	ldr	r0, [pc, #28]	; (8001680 <HAL_UART_RxCpltCallback+0x58>)
 8001664:	f003 fa92 	bl	8004b8c <HAL_UART_Receive_IT>
	}
}
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40004400 	.word	0x40004400
 8001674:	20000122 	.word	0x20000122
 8001678:	2000010b 	.word	0x2000010b
 800167c:	20000228 	.word	0x20000228
 8001680:	200001e0 	.word	0x200001e0

08001684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001688:	b672      	cpsid	i
}
 800168a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800168c:	e7fe      	b.n	800168c <Error_Handler+0x8>

0800168e <constructorsTaskWithParameters>:
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct sTask * constructorsTaskWithParameters(void (*pTask)(void), int64_t Delay,
											uint32_t Period/*, uint8_t RunMe*/, uint32_t TaskID,
											struct sTask * next, struct sTask * previous)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b086      	sub	sp, #24
 8001692:	af00      	add	r7, sp, #0
 8001694:	60f8      	str	r0, [r7, #12]
 8001696:	e9c7 2300 	strd	r2, r3, [r7]
	struct sTask * temp = NULL;
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]

//	while(temp == NULL) //ask to allocate memory until that is granted memory
//	{
		temp = (struct sTask *)malloc(sizeof(struct sTask));
 800169e:	2020      	movs	r0, #32
 80016a0:	f003 ffd6 	bl	8005650 <malloc>
 80016a4:	4603      	mov	r3, r0
 80016a6:	617b      	str	r3, [r7, #20]
//	}

	if(temp == NULL)
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <constructorsTaskWithParameters+0x24>
		return temp;
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	e014      	b.n	80016dc <constructorsTaskWithParameters+0x4e>

	temp -> pTask = pTask;
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	68fa      	ldr	r2, [r7, #12]
 80016b6:	601a      	str	r2, [r3, #0]
	temp -> Delay = Delay;
 80016b8:	6979      	ldr	r1, [r7, #20]
 80016ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016be:	e9c1 2302 	strd	r2, r3, [r1, #8]
	temp -> Period = Period;
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	6a3a      	ldr	r2, [r7, #32]
 80016c6:	611a      	str	r2, [r3, #16]
//	temp -> RunMe = RunMe;
	temp -> TaskID = TaskID;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016cc:	615a      	str	r2, [r3, #20]
	temp -> next = next;
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016d2:	619a      	str	r2, [r3, #24]
	temp -> previous = previous;
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016d8:	61da      	str	r2, [r3, #28]

	return temp;
 80016da:	697b      	ldr	r3, [r7, #20]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <constructorSDSNoParameters>:

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct SDS * constructorSDSNoParameters()
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
	struct SDS * temp = NULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	607b      	str	r3, [r7, #4]
//	while(temp == NULL) //ask to allocate memory until that is granted memory
//	{
		temp = (struct SDS *)malloc(sizeof(struct SDS));
 80016ee:	200c      	movs	r0, #12
 80016f0:	f003 ffae 	bl	8005650 <malloc>
 80016f4:	4603      	mov	r3, r0
 80016f6:	607b      	str	r3, [r7, #4]
//	}

	if(temp == NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <constructorSDSNoParameters+0x1e>
		return temp;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	e009      	b.n	8001716 <constructorSDSNoParameters+0x32>

	temp -> head = NULL;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
	temp -> tail = NULL;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	605a      	str	r2, [r3, #4]
	temp -> count = 0;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	721a      	strb	r2, [r3, #8]

	return temp;
 8001714:	687b      	ldr	r3, [r7, #4]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <destructorSDS>:

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

void destructorSDS(struct SDS * needToBeDeleted)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b086      	sub	sp, #24
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
	if(needToBeDeleted == NULL)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d029      	beq.n	8001780 <destructorSDS+0x62>
		return;

	struct sTask * temp_head = needToBeDeleted -> head;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	617b      	str	r3, [r7, #20]
	struct sTask * temp_tail = needToBeDeleted -> tail;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	613b      	str	r3, [r7, #16]

	do
	{
		if(temp_head != NULL)
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d007      	beq.n	800174e <destructorSDS+0x30>
		{
			struct sTask * temp = temp_head -> next;
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	60fb      	str	r3, [r7, #12]
			free(temp_head);
 8001744:	6978      	ldr	r0, [r7, #20]
 8001746:	f003 ff8b 	bl	8005660 <free>
			temp_head = temp;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	617b      	str	r3, [r7, #20]
		}

		if(temp_tail != NULL)
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d007      	beq.n	8001764 <destructorSDS+0x46>
		{
			struct sTask * temp = temp_tail -> previous;
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	69db      	ldr	r3, [r3, #28]
 8001758:	60bb      	str	r3, [r7, #8]
			free(temp_tail);
 800175a:	6938      	ldr	r0, [r7, #16]
 800175c:	f003 ff80 	bl	8005660 <free>
			temp_tail = temp;
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	613b      	str	r3, [r7, #16]
		}

	}
		while(temp_head != temp_tail);
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	429a      	cmp	r2, r3
 800176a:	d1e5      	bne.n	8001738 <destructorSDS+0x1a>

	if(temp_head != NULL)
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d002      	beq.n	8001778 <destructorSDS+0x5a>
		free(temp_head);
 8001772:	6978      	ldr	r0, [r7, #20]
 8001774:	f003 ff74 	bl	8005660 <free>

	needToBeDeleted -> count = 0;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	721a      	strb	r2, [r3, #8]
 800177e:	e000      	b.n	8001782 <destructorSDS+0x64>
		return;
 8001780:	bf00      	nop
//	needToBeDeleted -> head = NULL; //don't need because at the end head = tail = null
//	needToBeDeleted -> tail = NULL;
}
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <ConstructorBufferSchedulerNoParameters>:

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct BufferScheduler * ConstructorBufferSchedulerNoParameters(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
	struct BufferScheduler * temp = (struct BufferScheduler *) malloc(sizeof(struct BufferScheduler));
 800178e:	2010      	movs	r0, #16
 8001790:	f003 ff5e 	bl	8005650 <malloc>
 8001794:	4603      	mov	r3, r0
 8001796:	607b      	str	r3, [r7, #4]

	if(temp == NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <ConstructorBufferSchedulerNoParameters+0x1a>
		return NULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	e00e      	b.n	80017c0 <ConstructorBufferSchedulerNoParameters+0x38>

	temp -> pastCount = 0;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	731a      	strb	r2, [r3, #12]
	temp -> Delay = INT64_MAX;
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	f04f 32ff 	mov.w	r2, #4294967295
 80017ae:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80017b2:	e9c1 2300 	strd	r2, r3, [r1]
	temp -> Period = (uint32_t) -1; //because unsigned integer so -1 will be max of it
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f04f 32ff 	mov.w	r2, #4294967295
 80017bc:	609a      	str	r2, [r3, #8]

	return temp;
 80017be:	687b      	ldr	r3, [r7, #4]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <SCH_Init>:


//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

void SCH_Init ( void )
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
	if(BufferTimer == NULL)
 80017cc:	4b15      	ldr	r3, [pc, #84]	; (8001824 <SCH_Init+0x5c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d105      	bne.n	80017e0 <SCH_Init+0x18>
		BufferTimer = ConstructorBufferSchedulerNoParameters();
 80017d4:	f7ff ffd8 	bl	8001788 <ConstructorBufferSchedulerNoParameters>
 80017d8:	4603      	mov	r3, r0
 80017da:	4a12      	ldr	r2, [pc, #72]	; (8001824 <SCH_Init+0x5c>)
 80017dc:	6013      	str	r3, [r2, #0]
 80017de:	e010      	b.n	8001802 <SCH_Init+0x3a>

	else
	{
		BufferTimer -> pastCount = 0;
 80017e0:	4b10      	ldr	r3, [pc, #64]	; (8001824 <SCH_Init+0x5c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2200      	movs	r2, #0
 80017e6:	731a      	strb	r2, [r3, #12]
		BufferTimer -> Delay = INT64_MAX;
 80017e8:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <SCH_Init+0x5c>)
 80017ea:	6819      	ldr	r1, [r3, #0]
 80017ec:	f04f 32ff 	mov.w	r2, #4294967295
 80017f0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80017f4:	e9c1 2300 	strd	r2, r3, [r1]
		BufferTimer -> Period = (uint32_t) -1;
 80017f8:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <SCH_Init+0x5c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001800:	609a      	str	r2, [r3, #8]
	}

	if(schedulerDataStructure == NULL)
 8001802:	4b09      	ldr	r3, [pc, #36]	; (8001828 <SCH_Init+0x60>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d105      	bne.n	8001816 <SCH_Init+0x4e>
	{
		schedulerDataStructure = constructorSDSNoParameters();
 800180a:	f7ff ff6b 	bl	80016e4 <constructorSDSNoParameters>
 800180e:	4603      	mov	r3, r0
 8001810:	4a05      	ldr	r2, [pc, #20]	; (8001828 <SCH_Init+0x60>)
 8001812:	6013      	str	r3, [r2, #0]
		return;
 8001814:	e004      	b.n	8001820 <SCH_Init+0x58>
	}

	destructorSDS(schedulerDataStructure);
 8001816:	4b04      	ldr	r3, [pc, #16]	; (8001828 <SCH_Init+0x60>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff ff7f 	bl	800171e <destructorSDS>
//	taskImplement = NULL;
}
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000110 	.word	0x20000110
 8001828:	2000010c 	.word	0x2000010c

0800182c <SCH_Update>:

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

void SCH_Update(void)
{
 800182c:	b490      	push	{r4, r7}
 800182e:	af00      	add	r7, sp, #0
	if(BufferTimer == NULL)
 8001830:	4b09      	ldr	r3, [pc, #36]	; (8001858 <SCH_Update+0x2c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d00a      	beq.n	800184e <SCH_Update+0x22>
		return;

	(BufferTimer -> Delay) --;
 8001838:	4b07      	ldr	r3, [pc, #28]	; (8001858 <SCH_Update+0x2c>)
 800183a:	681c      	ldr	r4, [r3, #0]
 800183c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001840:	f112 30ff 	adds.w	r0, r2, #4294967295
 8001844:	f143 31ff 	adc.w	r1, r3, #4294967295
 8001848:	e9c4 0100 	strd	r0, r1, [r4]
 800184c:	e000      	b.n	8001850 <SCH_Update+0x24>
		return;
 800184e:	bf00      	nop
}
 8001850:	46bd      	mov	sp, r7
 8001852:	bc90      	pop	{r4, r7}
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	20000110 	.word	0x20000110

0800185c <dealWithTasksAdded>:
//update software timer

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

void dealWithTasksAdded(int32_t differenceCount)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
	struct sTask * temp_tail = schedulerDataStructure -> tail;
 8001864:	4b19      	ldr	r3, [pc, #100]	; (80018cc <dealWithTasksAdded+0x70>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	60fb      	str	r3, [r7, #12]

	if(temp_tail == NULL)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d026      	beq.n	80018c0 <dealWithTasksAdded+0x64>
		return;

	for(AmountTasks i = 0 ; i < differenceCount ; i++)
 8001872:	2300      	movs	r3, #0
 8001874:	72fb      	strb	r3, [r7, #11]
 8001876:	e01e      	b.n	80018b6 <dealWithTasksAdded+0x5a>
	{
		if(BufferTimer -> Delay > temp_tail -> Delay)
 8001878:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <dealWithTasksAdded+0x74>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001880:	68f9      	ldr	r1, [r7, #12]
 8001882:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8001886:	4290      	cmp	r0, r2
 8001888:	eb71 0303 	sbcs.w	r3, r1, r3
 800188c:	da0d      	bge.n	80018aa <dealWithTasksAdded+0x4e>
			//if current delay in buffer greater than delay of a task in SDS so we need carry it to buffer
		{
			BufferTimer -> Delay = temp_tail -> Delay;
 800188e:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <dealWithTasksAdded+0x74>)
 8001890:	6819      	ldr	r1, [r3, #0]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001898:	e9c1 2300 	strd	r2, r3, [r1]
			BufferTimer -> Period = temp_tail -> Delay;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018a2:	490b      	ldr	r1, [pc, #44]	; (80018d0 <dealWithTasksAdded+0x74>)
 80018a4:	6809      	ldr	r1, [r1, #0]
 80018a6:	4613      	mov	r3, r2
 80018a8:	608b      	str	r3, [r1, #8]
			//just use delay because we will minus by origin delay after BufferTimer -> Delay = 0 that indicate have delayed time elapse
		}
		temp_tail = temp_tail -> previous;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	60fb      	str	r3, [r7, #12]
	for(AmountTasks i = 0 ; i < differenceCount ; i++)
 80018b0:	7afb      	ldrb	r3, [r7, #11]
 80018b2:	3301      	adds	r3, #1
 80018b4:	72fb      	strb	r3, [r7, #11]
 80018b6:	7afb      	ldrb	r3, [r7, #11]
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	dcdc      	bgt.n	8001878 <dealWithTasksAdded+0x1c>
 80018be:	e000      	b.n	80018c2 <dealWithTasksAdded+0x66>
		return;
 80018c0:	bf00      	nop
	}
}
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	2000010c 	.word	0x2000010c
 80018d0:	20000110 	.word	0x20000110

080018d4 <ProcessBufferChanged>:

void ProcessBufferChanged(int64_t saveDelay, uint32_t savePeriod)
{
 80018d4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80018d8:	b087      	sub	sp, #28
 80018da:	af00      	add	r7, sp, #0
 80018dc:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80018e0:	607a      	str	r2, [r7, #4]
	struct sTask * temp = schedulerDataStructure -> head;
 80018e2:	4b1b      	ldr	r3, [pc, #108]	; (8001950 <ProcessBufferChanged+0x7c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	617b      	str	r3, [r7, #20]

	if(temp == NULL)
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d029      	beq.n	8001944 <ProcessBufferChanged+0x70>
		return;

	for(AmountTasks i = 0 ; i < BufferTimer -> pastCount ; i++) //don't use count in the SDS because we just need to update older tasks
 80018f0:	2300      	movs	r3, #0
 80018f2:	74fb      	strb	r3, [r7, #19]
 80018f4:	e019      	b.n	800192a <ProcessBufferChanged+0x56>
	{
		temp -> Delay -= ((int64_t)savePeriod) - saveDelay;
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018fc:	6879      	ldr	r1, [r7, #4]
 80018fe:	4688      	mov	r8, r1
 8001900:	f04f 0900 	mov.w	r9, #0
 8001904:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001908:	ebb8 0400 	subs.w	r4, r8, r0
 800190c:	eb69 0501 	sbc.w	r5, r9, r1
 8001910:	ebb2 0a04 	subs.w	sl, r2, r4
 8001914:	eb63 0b05 	sbc.w	fp, r3, r5
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	e9c3 ab02 	strd	sl, fp, [r3, #8]
		temp = temp -> next;
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	617b      	str	r3, [r7, #20]
	for(AmountTasks i = 0 ; i < BufferTimer -> pastCount ; i++) //don't use count in the SDS because we just need to update older tasks
 8001924:	7cfb      	ldrb	r3, [r7, #19]
 8001926:	3301      	adds	r3, #1
 8001928:	74fb      	strb	r3, [r7, #19]
 800192a:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <ProcessBufferChanged+0x80>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	7b1b      	ldrb	r3, [r3, #12]
 8001930:	7cfa      	ldrb	r2, [r7, #19]
 8001932:	429a      	cmp	r2, r3
 8001934:	d3df      	bcc.n	80018f6 <ProcessBufferChanged+0x22>
	}

	BufferTimer -> pastCount = schedulerDataStructure -> count;
 8001936:	4b06      	ldr	r3, [pc, #24]	; (8001950 <ProcessBufferChanged+0x7c>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <ProcessBufferChanged+0x80>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	7a12      	ldrb	r2, [r2, #8]
 8001940:	731a      	strb	r2, [r3, #12]
 8001942:	e000      	b.n	8001946 <ProcessBufferChanged+0x72>
		return;
 8001944:	bf00      	nop
}
 8001946:	371c      	adds	r7, #28
 8001948:	46bd      	mov	sp, r7
 800194a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800194e:	4770      	bx	lr
 8001950:	2000010c 	.word	0x2000010c
 8001954:	20000110 	.word	0x20000110

08001958 <deleteOnTheSpot>:

void deleteOnTheSpot(struct sTask * needToBeDeleted)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
	if(needToBeDeleted -> previous != NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d004      	beq.n	8001972 <deleteOnTheSpot+0x1a>
		needToBeDeleted -> previous -> next = needToBeDeleted -> next;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69db      	ldr	r3, [r3, #28]
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6992      	ldr	r2, [r2, #24]
 8001970:	619a      	str	r2, [r3, #24]

	if(needToBeDeleted -> next != NULL)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d004      	beq.n	8001984 <deleteOnTheSpot+0x2c>
		needToBeDeleted -> next -> previous = needToBeDeleted -> previous;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	69d2      	ldr	r2, [r2, #28]
 8001982:	61da      	str	r2, [r3, #28]

	schedulerDataStructure -> count --;
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <deleteOnTheSpot+0x48>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	7a1a      	ldrb	r2, [r3, #8]
 800198a:	3a01      	subs	r2, #1
 800198c:	b2d2      	uxtb	r2, r2
 800198e:	721a      	strb	r2, [r3, #8]

	free(needToBeDeleted);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f003 fe65 	bl	8005660 <free>
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	2000010c 	.word	0x2000010c

080019a4 <Run_Tasks>:

void Run_Tasks()
{
 80019a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019a8:	b084      	sub	sp, #16
 80019aa:	af00      	add	r7, sp, #0
	if(schedulerDataStructure == NULL || schedulerDataStructure -> count <= 0)
 80019ac:	4b75      	ldr	r3, [pc, #468]	; (8001b84 <Run_Tasks+0x1e0>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f000 80e1 	beq.w	8001b78 <Run_Tasks+0x1d4>
 80019b6:	4b73      	ldr	r3, [pc, #460]	; (8001b84 <Run_Tasks+0x1e0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	7a1b      	ldrb	r3, [r3, #8]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f000 80db 	beq.w	8001b78 <Run_Tasks+0x1d4>
		return;

	if(schedulerDataStructure -> count == 1)
 80019c2:	4b70      	ldr	r3, [pc, #448]	; (8001b84 <Run_Tasks+0x1e0>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	7a1b      	ldrb	r3, [r3, #8]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d111      	bne.n	80019f0 <Run_Tasks+0x4c>
	{
		schedulerDataStructure -> head -> pTask();
 80019cc:	4b6d      	ldr	r3, [pc, #436]	; (8001b84 <Run_Tasks+0x1e0>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4798      	blx	r3
		schedulerDataStructure -> head -> Delay = schedulerDataStructure -> head -> Period;
 80019d6:	4b6b      	ldr	r3, [pc, #428]	; (8001b84 <Run_Tasks+0x1e0>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	4a69      	ldr	r2, [pc, #420]	; (8001b84 <Run_Tasks+0x1e0>)
 80019e0:	6812      	ldr	r2, [r2, #0]
 80019e2:	6811      	ldr	r1, [r2, #0]
 80019e4:	461a      	mov	r2, r3
 80019e6:	f04f 0300 	mov.w	r3, #0
 80019ea:	e9c1 2302 	strd	r2, r3, [r1, #8]
		return;
 80019ee:	e0c4      	b.n	8001b7a <Run_Tasks+0x1d6>
	}

	struct sTask * temp_head = schedulerDataStructure -> head;
 80019f0:	4b64      	ldr	r3, [pc, #400]	; (8001b84 <Run_Tasks+0x1e0>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	60fb      	str	r3, [r7, #12]
	struct sTask * temp_tail = schedulerDataStructure -> tail;
 80019f8:	4b62      	ldr	r3, [pc, #392]	; (8001b84 <Run_Tasks+0x1e0>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	60bb      	str	r3, [r7, #8]

//	while(temp_head != temp_tail /*for case with odd number count*/
//			&& temp_head -> previous != temp_tail && temp_tail -> next != temp_head
//			/*for case with even number of count*/)
	AmountTasks limit = (schedulerDataStructure -> count) / 2;
 8001a00:	4b60      	ldr	r3, [pc, #384]	; (8001b84 <Run_Tasks+0x1e0>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	7a1b      	ldrb	r3, [r3, #8]
 8001a06:	085b      	lsrs	r3, r3, #1
 8001a08:	71bb      	strb	r3, [r7, #6]
	AmountTasks isOdd = (schedulerDataStructure -> count) % 2;
 8001a0a:	4b5e      	ldr	r3, [pc, #376]	; (8001b84 <Run_Tasks+0x1e0>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	7a1b      	ldrb	r3, [r3, #8]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	717b      	strb	r3, [r7, #5]
	for(AmountTasks i = 0 ; i < limit ; i++)
 8001a16:	2300      	movs	r3, #0
 8001a18:	71fb      	strb	r3, [r7, #7]
 8001a1a:	e06c      	b.n	8001af6 <Run_Tasks+0x152>
	{
		if(temp_head != NULL)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d031      	beq.n	8001a86 <Run_Tasks+0xe2>
		{
			temp_head -> Delay -= (int64_t) BufferTimer -> Period; //BufferTimer -> Delay is equaling zero so we don't need minus it
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001a28:	4b57      	ldr	r3, [pc, #348]	; (8001b88 <Run_Tasks+0x1e4>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	f04f 0300 	mov.w	r3, #0
 8001a34:	ebb0 0802 	subs.w	r8, r0, r2
 8001a38:	eb61 0903 	sbc.w	r9, r1, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	e9c3 8902 	strd	r8, r9, [r3, #8]

			if(temp_head -> Delay <= 0)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001a48:	2a01      	cmp	r2, #1
 8001a4a:	f173 0300 	sbcs.w	r3, r3, #0
 8001a4e:	da0a      	bge.n	8001a66 <Run_Tasks+0xc2>
			{
				temp_head -> pTask();
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4798      	blx	r3
				temp_head -> Delay = temp_head -> Period;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	f04f 0300 	mov.w	r3, #0
 8001a60:	68f9      	ldr	r1, [r7, #12]
 8001a62:	e9c1 2302 	strd	r2, r3, [r1, #8]
			}

			if(temp_head -> Period <= 0)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d108      	bne.n	8001a80 <Run_Tasks+0xdc>
			{
				temp_head = temp_head -> next;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	60fb      	str	r3, [r7, #12]
				deleteOnTheSpot(temp_head -> previous); //delete at index undo
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	69db      	ldr	r3, [r3, #28]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff ff6d 	bl	8001958 <deleteOnTheSpot>
 8001a7e:	e002      	b.n	8001a86 <Run_Tasks+0xe2>
			}

			else
				temp_head = temp_head -> next;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	60fb      	str	r3, [r7, #12]
		}

		if(temp_tail != NULL)
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d031      	beq.n	8001af0 <Run_Tasks+0x14c>
		{
			temp_tail -> Delay -= (int64_t) BufferTimer -> Period; //BufferTimer -> Delay is equaling zero so we don't need minus it
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001a92:	4b3d      	ldr	r3, [pc, #244]	; (8001b88 <Run_Tasks+0x1e4>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	f04f 0300 	mov.w	r3, #0
 8001a9e:	ebb0 0a02 	subs.w	sl, r0, r2
 8001aa2:	eb61 0b03 	sbc.w	fp, r1, r3
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	e9c3 ab02 	strd	sl, fp, [r3, #8]

			if(temp_tail -> Delay <= 0)
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ab2:	2a01      	cmp	r2, #1
 8001ab4:	f173 0300 	sbcs.w	r3, r3, #0
 8001ab8:	da0a      	bge.n	8001ad0 <Run_Tasks+0x12c>
			{
				temp_tail -> pTask();
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4798      	blx	r3
				temp_tail -> Delay = temp_tail -> Period;
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	f04f 0300 	mov.w	r3, #0
 8001aca:	68b9      	ldr	r1, [r7, #8]
 8001acc:	e9c1 2302 	strd	r2, r3, [r1, #8]
			}

			if(temp_tail -> Period <= 0)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d108      	bne.n	8001aea <Run_Tasks+0x146>
			{
				temp_tail = temp_tail -> previous;
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	69db      	ldr	r3, [r3, #28]
 8001adc:	60bb      	str	r3, [r7, #8]
				deleteOnTheSpot(temp_tail -> next);//delete at index undo
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff ff38 	bl	8001958 <deleteOnTheSpot>
 8001ae8:	e002      	b.n	8001af0 <Run_Tasks+0x14c>
			}

			else
				temp_tail = temp_tail -> previous;
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	60bb      	str	r3, [r7, #8]
	for(AmountTasks i = 0 ; i < limit ; i++)
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	3301      	adds	r3, #1
 8001af4:	71fb      	strb	r3, [r7, #7]
 8001af6:	79fa      	ldrb	r2, [r7, #7]
 8001af8:	79bb      	ldrb	r3, [r7, #6]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d38e      	bcc.n	8001a1c <Run_Tasks+0x78>
		}
	}

	if(isOdd && temp_head != NULL)
 8001afe:	797b      	ldrb	r3, [r7, #5]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d02f      	beq.n	8001b64 <Run_Tasks+0x1c0>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d02c      	beq.n	8001b64 <Run_Tasks+0x1c0>
		//execute remain task due to if count is odd, the iterator above will stop when still remain a task don't be executed
		//it has presented at middle index already due to iterator above so don't need get temp_head -> next
	{
		temp_head -> Delay -= (int64_t) BufferTimer -> Period;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001b10:	4b1d      	ldr	r3, [pc, #116]	; (8001b88 <Run_Tasks+0x1e4>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	461a      	mov	r2, r3
 8001b18:	f04f 0300 	mov.w	r3, #0
 8001b1c:	1a84      	subs	r4, r0, r2
 8001b1e:	eb61 0503 	sbc.w	r5, r1, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	e9c3 4502 	strd	r4, r5, [r3, #8]

		if(temp_head -> Delay <= 0)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001b2e:	2a01      	cmp	r2, #1
 8001b30:	f173 0300 	sbcs.w	r3, r3, #0
 8001b34:	da0a      	bge.n	8001b4c <Run_Tasks+0x1a8>
		{
			temp_head -> pTask();
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4798      	blx	r3
			temp_head -> Delay = temp_head -> Period;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	461a      	mov	r2, r3
 8001b42:	f04f 0300 	mov.w	r3, #0
 8001b46:	68f9      	ldr	r1, [r7, #12]
 8001b48:	e9c1 2302 	strd	r2, r3, [r1, #8]
		}

		if(temp_head -> Period <= 0)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d107      	bne.n	8001b64 <Run_Tasks+0x1c0>
		{
			temp_head = temp_head -> next;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	60fb      	str	r3, [r7, #12]
			deleteOnTheSpot(temp_head -> previous);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff fefa 	bl	8001958 <deleteOnTheSpot>
		}
		//Or
//		temp_tail -> previous -> pTask();
	}

	BufferTimer -> Period = schedulerDataStructure -> head -> Delay;
 8001b64:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <Run_Tasks+0x1e0>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001b6e:	4906      	ldr	r1, [pc, #24]	; (8001b88 <Run_Tasks+0x1e4>)
 8001b70:	6809      	ldr	r1, [r1, #0]
 8001b72:	4613      	mov	r3, r2
 8001b74:	608b      	str	r3, [r1, #8]
//	BufferTimer -> Delay = BufferTimer -> Period;
	//assign for first element in the SDS to compare remain elements to find largest delay

	return;
 8001b76:	e000      	b.n	8001b7a <Run_Tasks+0x1d6>
		return;
 8001b78:	bf00      	nop
}
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b82:	bf00      	nop
 8001b84:	2000010c 	.word	0x2000010c
 8001b88:	20000110 	.word	0x20000110

08001b8c <refreshBuffer>:

void refreshBuffer()
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
		if(schedulerDataStructure == NULL || schedulerDataStructure -> count <= 0)
 8001b92:	4b4e      	ldr	r3, [pc, #312]	; (8001ccc <refreshBuffer+0x140>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 8093 	beq.w	8001cc2 <refreshBuffer+0x136>
 8001b9c:	4b4b      	ldr	r3, [pc, #300]	; (8001ccc <refreshBuffer+0x140>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	7a1b      	ldrb	r3, [r3, #8]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 808d 	beq.w	8001cc2 <refreshBuffer+0x136>
			return;

		if(schedulerDataStructure -> count == 1)
 8001ba8:	4b48      	ldr	r3, [pc, #288]	; (8001ccc <refreshBuffer+0x140>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	7a1b      	ldrb	r3, [r3, #8]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d111      	bne.n	8001bd6 <refreshBuffer+0x4a>
		{
			BufferTimer -> Period = schedulerDataStructure -> head -> Period;
 8001bb2:	4b46      	ldr	r3, [pc, #280]	; (8001ccc <refreshBuffer+0x140>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b45      	ldr	r3, [pc, #276]	; (8001cd0 <refreshBuffer+0x144>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6912      	ldr	r2, [r2, #16]
 8001bbe:	609a      	str	r2, [r3, #8]
			BufferTimer -> Delay = BufferTimer -> Period;
 8001bc0:	4b43      	ldr	r3, [pc, #268]	; (8001cd0 <refreshBuffer+0x144>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	4a42      	ldr	r2, [pc, #264]	; (8001cd0 <refreshBuffer+0x144>)
 8001bc8:	6811      	ldr	r1, [r2, #0]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	f04f 0300 	mov.w	r3, #0
 8001bd0:	e9c1 2300 	strd	r2, r3, [r1]
			return;
 8001bd4:	e076      	b.n	8001cc4 <refreshBuffer+0x138>
		}

		struct sTask * temp_head = schedulerDataStructure -> head;
 8001bd6:	4b3d      	ldr	r3, [pc, #244]	; (8001ccc <refreshBuffer+0x140>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	60fb      	str	r3, [r7, #12]
		struct sTask * temp_tail = schedulerDataStructure -> tail;
 8001bde:	4b3b      	ldr	r3, [pc, #236]	; (8001ccc <refreshBuffer+0x140>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	60bb      	str	r3, [r7, #8]

	//	while(temp_head != temp_tail /*for case with odd number count*/
	//			&& temp_head -> previous != temp_tail && temp_tail -> next != temp_head
	//			/*for case with even number of count*/)
		AmountTasks limit = (schedulerDataStructure -> count) / 2;
 8001be6:	4b39      	ldr	r3, [pc, #228]	; (8001ccc <refreshBuffer+0x140>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	7a1b      	ldrb	r3, [r3, #8]
 8001bec:	085b      	lsrs	r3, r3, #1
 8001bee:	71bb      	strb	r3, [r7, #6]
		AmountTasks isOdd = (schedulerDataStructure -> count) % 2;
 8001bf0:	4b36      	ldr	r3, [pc, #216]	; (8001ccc <refreshBuffer+0x140>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	7a1b      	ldrb	r3, [r3, #8]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	717b      	strb	r3, [r7, #5]
		for(AmountTasks i = 0 ; i < limit ; i++)
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	71fb      	strb	r3, [r7, #7]
 8001c00:	e036      	b.n	8001c70 <refreshBuffer+0xe4>
		{
			if(temp_head != NULL)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d016      	beq.n	8001c36 <refreshBuffer+0xaa>
			{
				if(temp_head -> Delay < BufferTimer -> Period)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001c0e:	4b30      	ldr	r3, [pc, #192]	; (8001cd0 <refreshBuffer+0x144>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	461a      	mov	r2, r3
 8001c16:	f04f 0300 	mov.w	r3, #0
 8001c1a:	4290      	cmp	r0, r2
 8001c1c:	eb71 0303 	sbcs.w	r3, r1, r3
 8001c20:	da06      	bge.n	8001c30 <refreshBuffer+0xa4>
					BufferTimer -> Period = temp_head -> Delay;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001c28:	4929      	ldr	r1, [pc, #164]	; (8001cd0 <refreshBuffer+0x144>)
 8001c2a:	6809      	ldr	r1, [r1, #0]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	608b      	str	r3, [r1, #8]

				temp_head = temp_head -> next;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	60fb      	str	r3, [r7, #12]
			}

			if(temp_tail != NULL)
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d016      	beq.n	8001c6a <refreshBuffer+0xde>
			{
				if(temp_tail -> Delay < BufferTimer -> Period)
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001c42:	4b23      	ldr	r3, [pc, #140]	; (8001cd0 <refreshBuffer+0x144>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	f04f 0300 	mov.w	r3, #0
 8001c4e:	4290      	cmp	r0, r2
 8001c50:	eb71 0303 	sbcs.w	r3, r1, r3
 8001c54:	da06      	bge.n	8001c64 <refreshBuffer+0xd8>
					BufferTimer -> Period = temp_tail -> Delay;
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001c5c:	491c      	ldr	r1, [pc, #112]	; (8001cd0 <refreshBuffer+0x144>)
 8001c5e:	6809      	ldr	r1, [r1, #0]
 8001c60:	4613      	mov	r3, r2
 8001c62:	608b      	str	r3, [r1, #8]

				temp_tail = temp_tail -> previous;
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	69db      	ldr	r3, [r3, #28]
 8001c68:	60bb      	str	r3, [r7, #8]
		for(AmountTasks i = 0 ; i < limit ; i++)
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	71fb      	strb	r3, [r7, #7]
 8001c70:	79fa      	ldrb	r2, [r7, #7]
 8001c72:	79bb      	ldrb	r3, [r7, #6]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d3c4      	bcc.n	8001c02 <refreshBuffer+0x76>
			}
		}

		if(isOdd && temp_head != NULL)
 8001c78:	797b      	ldrb	r3, [r7, #5]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d016      	beq.n	8001cac <refreshBuffer+0x120>
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d013      	beq.n	8001cac <refreshBuffer+0x120>
			//execute remain task due to if count is odd, the iterator above will stop when still remain task don't be executed
			//it has presented at middle index already due to iterator above so don't need get temp_head -> next
		{
			if(temp_head -> Delay < BufferTimer -> Period)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001c8a:	4b11      	ldr	r3, [pc, #68]	; (8001cd0 <refreshBuffer+0x144>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	461a      	mov	r2, r3
 8001c92:	f04f 0300 	mov.w	r3, #0
 8001c96:	4290      	cmp	r0, r2
 8001c98:	eb71 0303 	sbcs.w	r3, r1, r3
 8001c9c:	da06      	bge.n	8001cac <refreshBuffer+0x120>
				BufferTimer -> Period = temp_head -> Delay;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ca4:	490a      	ldr	r1, [pc, #40]	; (8001cd0 <refreshBuffer+0x144>)
 8001ca6:	6809      	ldr	r1, [r1, #0]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	608b      	str	r3, [r1, #8]
		}


		BufferTimer -> Delay = BufferTimer -> Period;
 8001cac:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <refreshBuffer+0x144>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	4a07      	ldr	r2, [pc, #28]	; (8001cd0 <refreshBuffer+0x144>)
 8001cb4:	6811      	ldr	r1, [r2, #0]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	f04f 0300 	mov.w	r3, #0
 8001cbc:	e9c1 2300 	strd	r2, r3, [r1]
 8001cc0:	e000      	b.n	8001cc4 <refreshBuffer+0x138>
			return;
 8001cc2:	bf00      	nop
}
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr
 8001ccc:	2000010c 	.word	0x2000010c
 8001cd0:	20000110 	.word	0x20000110

08001cd4 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
	if(schedulerDataStructure == NULL)
 8001cda:	4b24      	ldr	r3, [pc, #144]	; (8001d6c <SCH_Dispatch_Tasks+0x98>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d040      	beq.n	8001d64 <SCH_Dispatch_Tasks+0x90>
		return;

	int64_t saveDelay = BufferTimer -> Delay;
 8001ce2:	4b23      	ldr	r3, [pc, #140]	; (8001d70 <SCH_Dispatch_Tasks+0x9c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cea:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint32_t savePeriod = BufferTimer -> Period;
 8001cee:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <SCH_Dispatch_Tasks+0x9c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	607b      	str	r3, [r7, #4]

	int32_t differenceCount = (int32_t) (schedulerDataStructure -> count - BufferTimer -> pastCount);
 8001cf6:	4b1d      	ldr	r3, [pc, #116]	; (8001d6c <SCH_Dispatch_Tasks+0x98>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	7a1b      	ldrb	r3, [r3, #8]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4b1c      	ldr	r3, [pc, #112]	; (8001d70 <SCH_Dispatch_Tasks+0x9c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	7b1b      	ldrb	r3, [r3, #12]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	603b      	str	r3, [r7, #0]

	if(differenceCount > 0) ///more tasks be added
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	dd02      	ble.n	8001d14 <SCH_Dispatch_Tasks+0x40>
	{
		dealWithTasksAdded(differenceCount);
 8001d0e:	6838      	ldr	r0, [r7, #0]
 8001d10:	f7ff fda4 	bl	800185c <dealWithTasksAdded>
	}

	if(BufferTimer -> Delay != saveDelay && differenceCount > 0)
 8001d14:	4b16      	ldr	r3, [pc, #88]	; (8001d70 <SCH_Dispatch_Tasks+0x9c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d20:	4299      	cmp	r1, r3
 8001d22:	bf08      	it	eq
 8001d24:	4290      	cmpeq	r0, r2
 8001d26:	d007      	beq.n	8001d38 <SCH_Dispatch_Tasks+0x64>
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	dd04      	ble.n	8001d38 <SCH_Dispatch_Tasks+0x64>
		//Buffer delay be changed because have task with Delay lower so we need to update tasks in the SDS
		//but we also note that if timer interrupt occur so saveDelay also difference with delay current
		//so we need a certain condition that not change even if interrupt occurs, that is add more tasks to the SDS
	{
		ProcessBufferChanged(saveDelay, savePeriod);
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d34:	f7ff fdce 	bl	80018d4 <ProcessBufferChanged>
	}

	if(differenceCount < 0) //update count because tasks be deleted
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	da05      	bge.n	8001d4a <SCH_Dispatch_Tasks+0x76>
		BufferTimer -> pastCount = schedulerDataStructure -> count;
 8001d3e:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <SCH_Dispatch_Tasks+0x98>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <SCH_Dispatch_Tasks+0x9c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	7a12      	ldrb	r2, [r2, #8]
 8001d48:	731a      	strb	r2, [r3, #12]

	if(BufferTimer -> Delay <= 0)
 8001d4a:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <SCH_Dispatch_Tasks+0x9c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d52:	2a01      	cmp	r2, #1
 8001d54:	f173 0300 	sbcs.w	r3, r3, #0
 8001d58:	da05      	bge.n	8001d66 <SCH_Dispatch_Tasks+0x92>
	{
		Run_Tasks();
 8001d5a:	f7ff fe23 	bl	80019a4 <Run_Tasks>
		refreshBuffer();
 8001d5e:	f7ff ff15 	bl	8001b8c <refreshBuffer>
 8001d62:	e000      	b.n	8001d66 <SCH_Dispatch_Tasks+0x92>
		return;
 8001d64:	bf00      	nop
	}
}
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	2000010c 	.word	0x2000010c
 8001d70:	20000110 	.word	0x20000110

08001d74 <SCH_Add_Task>:
//run software timer

uint32_t SCH_Add_Task(void (* pFunctionAdd)(), int64_t DELAY, uint32_t PERIOD)
{
 8001d74:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8001d78:	b089      	sub	sp, #36	; 0x24
 8001d7a:	af04      	add	r7, sp, #16
 8001d7c:	60f8      	str	r0, [r7, #12]
 8001d7e:	e9c7 2300 	strd	r2, r3, [r7]
	if(schedulerDataStructure == NULL)
 8001d82:	4b3c      	ldr	r3, [pc, #240]	; (8001e74 <SCH_Add_Task+0x100>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <SCH_Add_Task+0x1a>
		return 0;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	e06c      	b.n	8001e68 <SCH_Add_Task+0xf4>

	if(schedulerDataStructure -> count == 0)
 8001d8e:	4b39      	ldr	r3, [pc, #228]	; (8001e74 <SCH_Add_Task+0x100>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	7a1b      	ldrb	r3, [r3, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d12e      	bne.n	8001df6 <SCH_Add_Task+0x82>
	{
		schedulerDataStructure -> head = constructorsTaskWithParameters(pFunctionAdd, DELAY/TICK, PERIOD/TICK, 0, NULL, NULL);
 8001d98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d9c:	f04f 020a 	mov.w	r2, #10
 8001da0:	f04f 0300 	mov.w	r3, #0
 8001da4:	f7fe f9da 	bl	800015c <__aeabi_ldivmod>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4610      	mov	r0, r2
 8001dae:	4619      	mov	r1, r3
 8001db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db2:	4a31      	ldr	r2, [pc, #196]	; (8001e78 <SCH_Add_Task+0x104>)
 8001db4:	fba2 2303 	umull	r2, r3, r2, r3
 8001db8:	08db      	lsrs	r3, r3, #3
 8001dba:	4a2e      	ldr	r2, [pc, #184]	; (8001e74 <SCH_Add_Task+0x100>)
 8001dbc:	6814      	ldr	r4, [r2, #0]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	9203      	str	r2, [sp, #12]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	9202      	str	r2, [sp, #8]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	9201      	str	r2, [sp, #4]
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	68f8      	ldr	r0, [r7, #12]
 8001dd2:	f7ff fc5c 	bl	800168e <constructorsTaskWithParameters>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	6023      	str	r3, [r4, #0]
		schedulerDataStructure -> tail = schedulerDataStructure -> head;
 8001dda:	4b26      	ldr	r3, [pc, #152]	; (8001e74 <SCH_Add_Task+0x100>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	4b25      	ldr	r3, [pc, #148]	; (8001e74 <SCH_Add_Task+0x100>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6812      	ldr	r2, [r2, #0]
 8001de4:	605a      	str	r2, [r3, #4]
		schedulerDataStructure -> count ++;
 8001de6:	4b23      	ldr	r3, [pc, #140]	; (8001e74 <SCH_Add_Task+0x100>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	7a1a      	ldrb	r2, [r3, #8]
 8001dec:	3201      	adds	r2, #1
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	721a      	strb	r2, [r3, #8]
		return 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	e038      	b.n	8001e68 <SCH_Add_Task+0xf4>
	}

	schedulerDataStructure -> tail -> next = constructorsTaskWithParameters(pFunctionAdd, DELAY/TICK, PERIOD/TICK,
 8001df6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001dfa:	f04f 020a 	mov.w	r2, #10
 8001dfe:	f04f 0300 	mov.w	r3, #0
 8001e02:	f7fe f9ab 	bl	800015c <__aeabi_ldivmod>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4690      	mov	r8, r2
 8001e0c:	4699      	mov	r9, r3
 8001e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e10:	4a19      	ldr	r2, [pc, #100]	; (8001e78 <SCH_Add_Task+0x104>)
 8001e12:	fba2 2303 	umull	r2, r3, r2, r3
 8001e16:	08db      	lsrs	r3, r3, #3
								(schedulerDataStructure -> tail -> TaskID) + 1, NULL, schedulerDataStructure -> tail);
 8001e18:	4a16      	ldr	r2, [pc, #88]	; (8001e74 <SCH_Add_Task+0x100>)
 8001e1a:	6812      	ldr	r2, [r2, #0]
 8001e1c:	6852      	ldr	r2, [r2, #4]
 8001e1e:	6952      	ldr	r2, [r2, #20]
	schedulerDataStructure -> tail -> next = constructorsTaskWithParameters(pFunctionAdd, DELAY/TICK, PERIOD/TICK,
 8001e20:	3201      	adds	r2, #1
								(schedulerDataStructure -> tail -> TaskID) + 1, NULL, schedulerDataStructure -> tail);
 8001e22:	4914      	ldr	r1, [pc, #80]	; (8001e74 <SCH_Add_Task+0x100>)
 8001e24:	6809      	ldr	r1, [r1, #0]
	schedulerDataStructure -> tail -> next = constructorsTaskWithParameters(pFunctionAdd, DELAY/TICK, PERIOD/TICK,
 8001e26:	6849      	ldr	r1, [r1, #4]
 8001e28:	4812      	ldr	r0, [pc, #72]	; (8001e74 <SCH_Add_Task+0x100>)
 8001e2a:	6800      	ldr	r0, [r0, #0]
 8001e2c:	6844      	ldr	r4, [r0, #4]
 8001e2e:	9103      	str	r1, [sp, #12]
 8001e30:	2100      	movs	r1, #0
 8001e32:	9102      	str	r1, [sp, #8]
 8001e34:	9201      	str	r2, [sp, #4]
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	4642      	mov	r2, r8
 8001e3a:	464b      	mov	r3, r9
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f7ff fc26 	bl	800168e <constructorsTaskWithParameters>
 8001e42:	4603      	mov	r3, r0
 8001e44:	61a3      	str	r3, [r4, #24]

	schedulerDataStructure -> tail = schedulerDataStructure -> tail -> next;
 8001e46:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <SCH_Add_Task+0x100>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <SCH_Add_Task+0x100>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6992      	ldr	r2, [r2, #24]
 8001e52:	605a      	str	r2, [r3, #4]

	schedulerDataStructure -> count ++;
 8001e54:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <SCH_Add_Task+0x100>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	7a1a      	ldrb	r2, [r3, #8]
 8001e5a:	3201      	adds	r2, #1
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	721a      	strb	r2, [r3, #8]

	return schedulerDataStructure -> tail -> TaskID;
 8001e60:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <SCH_Add_Task+0x100>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	695b      	ldr	r3, [r3, #20]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
 8001e72:	bf00      	nop
 8001e74:	2000010c 	.word	0x2000010c
 8001e78:	cccccccd 	.word	0xcccccccd

08001e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e82:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <HAL_MspInit+0x5c>)
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	4a14      	ldr	r2, [pc, #80]	; (8001ed8 <HAL_MspInit+0x5c>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	6193      	str	r3, [r2, #24]
 8001e8e:	4b12      	ldr	r3, [pc, #72]	; (8001ed8 <HAL_MspInit+0x5c>)
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e9a:	4b0f      	ldr	r3, [pc, #60]	; (8001ed8 <HAL_MspInit+0x5c>)
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	4a0e      	ldr	r2, [pc, #56]	; (8001ed8 <HAL_MspInit+0x5c>)
 8001ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea4:	61d3      	str	r3, [r2, #28]
 8001ea6:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <HAL_MspInit+0x5c>)
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eae:	607b      	str	r3, [r7, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <HAL_MspInit+0x60>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	4a04      	ldr	r2, [pc, #16]	; (8001edc <HAL_MspInit+0x60>)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	40010000 	.word	0x40010000

08001ee0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08a      	sub	sp, #40	; 0x28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a1d      	ldr	r2, [pc, #116]	; (8001f70 <HAL_I2C_MspInit+0x90>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d132      	bne.n	8001f66 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f00:	4b1c      	ldr	r3, [pc, #112]	; (8001f74 <HAL_I2C_MspInit+0x94>)
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	4a1b      	ldr	r2, [pc, #108]	; (8001f74 <HAL_I2C_MspInit+0x94>)
 8001f06:	f043 0308 	orr.w	r3, r3, #8
 8001f0a:	6193      	str	r3, [r2, #24]
 8001f0c:	4b19      	ldr	r3, [pc, #100]	; (8001f74 <HAL_I2C_MspInit+0x94>)
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	f003 0308 	and.w	r3, r3, #8
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f18:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f1e:	2312      	movs	r3, #18
 8001f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f22:	2303      	movs	r3, #3
 8001f24:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f26:	f107 0314 	add.w	r3, r7, #20
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4812      	ldr	r0, [pc, #72]	; (8001f78 <HAL_I2C_MspInit+0x98>)
 8001f2e:	f000 ff69 	bl	8002e04 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001f32:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <HAL_I2C_MspInit+0x9c>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	627b      	str	r3, [r7, #36]	; 0x24
 8001f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	f043 0302 	orr.w	r3, r3, #2
 8001f46:	627b      	str	r3, [r7, #36]	; 0x24
 8001f48:	4a0c      	ldr	r2, [pc, #48]	; (8001f7c <HAL_I2C_MspInit+0x9c>)
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f4e:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <HAL_I2C_MspInit+0x94>)
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	4a08      	ldr	r2, [pc, #32]	; (8001f74 <HAL_I2C_MspInit+0x94>)
 8001f54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f58:	61d3      	str	r3, [r2, #28]
 8001f5a:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <HAL_I2C_MspInit+0x94>)
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f66:	bf00      	nop
 8001f68:	3728      	adds	r7, #40	; 0x28
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40005400 	.word	0x40005400
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40010c00 	.word	0x40010c00
 8001f7c:	40010000 	.word	0x40010000

08001f80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f90:	d113      	bne.n	8001fba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f92:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <HAL_TIM_Base_MspInit+0x44>)
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	4a0b      	ldr	r2, [pc, #44]	; (8001fc4 <HAL_TIM_Base_MspInit+0x44>)
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	61d3      	str	r3, [r2, #28]
 8001f9e:	4b09      	ldr	r3, [pc, #36]	; (8001fc4 <HAL_TIM_Base_MspInit+0x44>)
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001faa:	2200      	movs	r2, #0
 8001fac:	2100      	movs	r1, #0
 8001fae:	201c      	movs	r0, #28
 8001fb0:	f000 fe3f 	bl	8002c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fb4:	201c      	movs	r0, #28
 8001fb6:	f000 fe58 	bl	8002c6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001fba:	bf00      	nop
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40021000 	.word	0x40021000

08001fc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd0:	f107 0310 	add.w	r3, r7, #16
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a1f      	ldr	r2, [pc, #124]	; (8002060 <HAL_UART_MspInit+0x98>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d137      	bne.n	8002058 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fe8:	4b1e      	ldr	r3, [pc, #120]	; (8002064 <HAL_UART_MspInit+0x9c>)
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	4a1d      	ldr	r2, [pc, #116]	; (8002064 <HAL_UART_MspInit+0x9c>)
 8001fee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ff2:	61d3      	str	r3, [r2, #28]
 8001ff4:	4b1b      	ldr	r3, [pc, #108]	; (8002064 <HAL_UART_MspInit+0x9c>)
 8001ff6:	69db      	ldr	r3, [r3, #28]
 8001ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002000:	4b18      	ldr	r3, [pc, #96]	; (8002064 <HAL_UART_MspInit+0x9c>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	4a17      	ldr	r2, [pc, #92]	; (8002064 <HAL_UART_MspInit+0x9c>)
 8002006:	f043 0304 	orr.w	r3, r3, #4
 800200a:	6193      	str	r3, [r2, #24]
 800200c:	4b15      	ldr	r3, [pc, #84]	; (8002064 <HAL_UART_MspInit+0x9c>)
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin;
 8002018:	2304      	movs	r3, #4
 800201a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201c:	2302      	movs	r3, #2
 800201e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002020:	2302      	movs	r3, #2
 8002022:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8002024:	f107 0310 	add.w	r3, r7, #16
 8002028:	4619      	mov	r1, r3
 800202a:	480f      	ldr	r0, [pc, #60]	; (8002068 <HAL_UART_MspInit+0xa0>)
 800202c:	f000 feea 	bl	8002e04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART_RX_Pin;
 8002030:	2308      	movs	r3, #8
 8002032:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002034:	2300      	movs	r3, #0
 8002036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 800203c:	f107 0310 	add.w	r3, r7, #16
 8002040:	4619      	mov	r1, r3
 8002042:	4809      	ldr	r0, [pc, #36]	; (8002068 <HAL_UART_MspInit+0xa0>)
 8002044:	f000 fede 	bl	8002e04 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002048:	2200      	movs	r2, #0
 800204a:	2100      	movs	r1, #0
 800204c:	2026      	movs	r0, #38	; 0x26
 800204e:	f000 fdf0 	bl	8002c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002052:	2026      	movs	r0, #38	; 0x26
 8002054:	f000 fe09 	bl	8002c6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002058:	bf00      	nop
 800205a:	3720      	adds	r7, #32
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40004400 	.word	0x40004400
 8002064:	40021000 	.word	0x40021000
 8002068:	40010800 	.word	0x40010800

0800206c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002070:	e7fe      	b.n	8002070 <NMI_Handler+0x4>

08002072 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002076:	e7fe      	b.n	8002076 <HardFault_Handler+0x4>

08002078 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800207c:	e7fe      	b.n	800207c <MemManage_Handler+0x4>

0800207e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800207e:	b480      	push	{r7}
 8002080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002082:	e7fe      	b.n	8002082 <BusFault_Handler+0x4>

08002084 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002088:	e7fe      	b.n	8002088 <UsageFault_Handler+0x4>

0800208a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800208a:	b480      	push	{r7}
 800208c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	46bd      	mov	sp, r7
 8002092:	bc80      	pop	{r7}
 8002094:	4770      	bx	lr

08002096 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002096:	b480      	push	{r7}
 8002098:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	46bd      	mov	sp, r7
 800209e:	bc80      	pop	{r7}
 80020a0:	4770      	bx	lr

080020a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020a2:	b480      	push	{r7}
 80020a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bc80      	pop	{r7}
 80020ac:	4770      	bx	lr

080020ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020b2:	f000 fca7 	bl	8002a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
	...

080020bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020c0:	4802      	ldr	r0, [pc, #8]	; (80020cc <TIM2_IRQHandler+0x10>)
 80020c2:	f002 f9c3 	bl	800444c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000198 	.word	0x20000198

080020d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020d4:	4802      	ldr	r0, [pc, #8]	; (80020e0 <USART2_IRQHandler+0x10>)
 80020d6:	f002 fd7f 	bl	8004bd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	200001e0 	.word	0x200001e0

080020e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80020e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80020ec:	f001 f840 	bl	8003170 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020f0:	bf00      	nop
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020fc:	4a14      	ldr	r2, [pc, #80]	; (8002150 <_sbrk+0x5c>)
 80020fe:	4b15      	ldr	r3, [pc, #84]	; (8002154 <_sbrk+0x60>)
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002108:	4b13      	ldr	r3, [pc, #76]	; (8002158 <_sbrk+0x64>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d102      	bne.n	8002116 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002110:	4b11      	ldr	r3, [pc, #68]	; (8002158 <_sbrk+0x64>)
 8002112:	4a12      	ldr	r2, [pc, #72]	; (800215c <_sbrk+0x68>)
 8002114:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002116:	4b10      	ldr	r3, [pc, #64]	; (8002158 <_sbrk+0x64>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4413      	add	r3, r2
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	429a      	cmp	r2, r3
 8002122:	d207      	bcs.n	8002134 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002124:	f003 fa6a 	bl	80055fc <__errno>
 8002128:	4603      	mov	r3, r0
 800212a:	220c      	movs	r2, #12
 800212c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800212e:	f04f 33ff 	mov.w	r3, #4294967295
 8002132:	e009      	b.n	8002148 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002134:	4b08      	ldr	r3, [pc, #32]	; (8002158 <_sbrk+0x64>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800213a:	4b07      	ldr	r3, [pc, #28]	; (8002158 <_sbrk+0x64>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4413      	add	r3, r2
 8002142:	4a05      	ldr	r2, [pc, #20]	; (8002158 <_sbrk+0x64>)
 8002144:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002146:	68fb      	ldr	r3, [r7, #12]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	20005000 	.word	0x20005000
 8002154:	00000400 	.word	0x00000400
 8002158:	20000114 	.word	0x20000114
 800215c:	20000248 	.word	0x20000248

08002160 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002164:	bf00      	nop
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr

0800216c <reset_parsing_choose_mode>:
    GOT_CHOOSE_O,
} Choose_mode_parser;

Choose_mode_parser choose_mode_parser = WAITING_FOR_CHOOSE_C;

void reset_parsing_choose_mode() {
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
    choose_mode_parser = WAITING_FOR_CHOOSE_C;
 8002170:	4b03      	ldr	r3, [pc, #12]	; (8002180 <reset_parsing_choose_mode+0x14>)
 8002172:	2200      	movs	r2, #0
 8002174:	701a      	strb	r2, [r3, #0]
}
 8002176:	bf00      	nop
 8002178:	46bd      	mov	sp, r7
 800217a:	bc80      	pop	{r7}
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	20000124 	.word	0x20000124

08002184 <parse_choose_mode>:

void parse_choose_mode(char c) {
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	71fb      	strb	r3, [r7, #7]
    switch (choose_mode_parser) {
 800218e:	4b23      	ldr	r3, [pc, #140]	; (800221c <parse_choose_mode+0x98>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b04      	cmp	r3, #4
 8002194:	d83d      	bhi.n	8002212 <parse_choose_mode+0x8e>
 8002196:	a201      	add	r2, pc, #4	; (adr r2, 800219c <parse_choose_mode+0x18>)
 8002198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800219c:	080021b1 	.word	0x080021b1
 80021a0:	080021c5 	.word	0x080021c5
 80021a4:	080021d9 	.word	0x080021d9
 80021a8:	080021ed 	.word	0x080021ed
 80021ac:	08002201 	.word	0x08002201
        case WAITING_FOR_CHOOSE_C:
            if (c == 'C') {
 80021b0:	79fb      	ldrb	r3, [r7, #7]
 80021b2:	2b43      	cmp	r3, #67	; 0x43
 80021b4:	d103      	bne.n	80021be <parse_choose_mode+0x3a>
                choose_mode_parser = GOT_CHOOSE_C;
 80021b6:	4b19      	ldr	r3, [pc, #100]	; (800221c <parse_choose_mode+0x98>)
 80021b8:	2201      	movs	r2, #1
 80021ba:	701a      	strb	r2, [r3, #0]
            } else {
                reset_parsing_choose_mode();  // Reset on unexpected character
            }
            break;
 80021bc:	e029      	b.n	8002212 <parse_choose_mode+0x8e>
                reset_parsing_choose_mode();  // Reset on unexpected character
 80021be:	f7ff ffd5 	bl	800216c <reset_parsing_choose_mode>
            break;
 80021c2:	e026      	b.n	8002212 <parse_choose_mode+0x8e>
        case GOT_CHOOSE_C:
            if (c == 'H') {
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	2b48      	cmp	r3, #72	; 0x48
 80021c8:	d103      	bne.n	80021d2 <parse_choose_mode+0x4e>
                choose_mode_parser = GOT_CHOOSE_H;
 80021ca:	4b14      	ldr	r3, [pc, #80]	; (800221c <parse_choose_mode+0x98>)
 80021cc:	2202      	movs	r2, #2
 80021ce:	701a      	strb	r2, [r3, #0]
            } else {
                reset_parsing_choose_mode();  // Reset on unexpected character
            }
            break;
 80021d0:	e01f      	b.n	8002212 <parse_choose_mode+0x8e>
                reset_parsing_choose_mode();  // Reset on unexpected character
 80021d2:	f7ff ffcb 	bl	800216c <reset_parsing_choose_mode>
            break;
 80021d6:	e01c      	b.n	8002212 <parse_choose_mode+0x8e>
        case GOT_CHOOSE_H:
            if (c == 'M') {
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	2b4d      	cmp	r3, #77	; 0x4d
 80021dc:	d103      	bne.n	80021e6 <parse_choose_mode+0x62>
                choose_mode_parser = GOT_CHOOSE_M;
 80021de:	4b0f      	ldr	r3, [pc, #60]	; (800221c <parse_choose_mode+0x98>)
 80021e0:	2203      	movs	r2, #3
 80021e2:	701a      	strb	r2, [r3, #0]
            } else {
                reset_parsing_choose_mode();  // Reset on unexpected character
            }
            break;
 80021e4:	e015      	b.n	8002212 <parse_choose_mode+0x8e>
                reset_parsing_choose_mode();  // Reset on unexpected character
 80021e6:	f7ff ffc1 	bl	800216c <reset_parsing_choose_mode>
            break;
 80021ea:	e012      	b.n	8002212 <parse_choose_mode+0x8e>
        case GOT_CHOOSE_M:
            if (c == 'O') {
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	2b4f      	cmp	r3, #79	; 0x4f
 80021f0:	d103      	bne.n	80021fa <parse_choose_mode+0x76>
                choose_mode_parser = GOT_CHOOSE_O;
 80021f2:	4b0a      	ldr	r3, [pc, #40]	; (800221c <parse_choose_mode+0x98>)
 80021f4:	2204      	movs	r2, #4
 80021f6:	701a      	strb	r2, [r3, #0]
            } else {
                reset_parsing_choose_mode();  // Reset on unexpected character
            }
            break;
 80021f8:	e00b      	b.n	8002212 <parse_choose_mode+0x8e>
                reset_parsing_choose_mode();  // Reset on unexpected character
 80021fa:	f7ff ffb7 	bl	800216c <reset_parsing_choose_mode>
            break;
 80021fe:	e008      	b.n	8002212 <parse_choose_mode+0x8e>
        case GOT_CHOOSE_O:
            if (c == 'D') {
 8002200:	79fb      	ldrb	r3, [r7, #7]
 8002202:	2b44      	cmp	r3, #68	; 0x44
 8002204:	d102      	bne.n	800220c <parse_choose_mode+0x88>
                CHOOSING_MODE_flag = 1;
 8002206:	4b06      	ldr	r3, [pc, #24]	; (8002220 <parse_choose_mode+0x9c>)
 8002208:	2201      	movs	r2, #1
 800220a:	701a      	strb	r2, [r3, #0]
            }
            reset_parsing_choose_mode();
 800220c:	f7ff ffae 	bl	800216c <reset_parsing_choose_mode>
            break;
 8002210:	bf00      	nop
    }
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000124 	.word	0x20000124
 8002220:	20000118 	.word	0x20000118

08002224 <reset_parsing_auto_mode>:
    GOT_AUTO_T
} Auto_mode_parser;

Auto_mode_parser auto_mode_parser = WAITING_FOR_AUTO_A;

void reset_parsing_auto_mode() {
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
    auto_mode_parser = WAITING_FOR_AUTO_A;
 8002228:	4b03      	ldr	r3, [pc, #12]	; (8002238 <reset_parsing_auto_mode+0x14>)
 800222a:	2200      	movs	r2, #0
 800222c:	701a      	strb	r2, [r3, #0]
}
 800222e:	bf00      	nop
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	20000125 	.word	0x20000125

0800223c <parse_auto_mode>:

void parse_auto_mode(char c) {
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	71fb      	strb	r3, [r7, #7]
    switch (auto_mode_parser) {
 8002246:	4b1d      	ldr	r3, [pc, #116]	; (80022bc <parse_auto_mode+0x80>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b03      	cmp	r3, #3
 800224c:	d831      	bhi.n	80022b2 <parse_auto_mode+0x76>
 800224e:	a201      	add	r2, pc, #4	; (adr r2, 8002254 <parse_auto_mode+0x18>)
 8002250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002254:	08002265 	.word	0x08002265
 8002258:	08002279 	.word	0x08002279
 800225c:	0800228d 	.word	0x0800228d
 8002260:	080022a1 	.word	0x080022a1
        case WAITING_FOR_AUTO_A:
            if (c == 'A') {
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	2b41      	cmp	r3, #65	; 0x41
 8002268:	d103      	bne.n	8002272 <parse_auto_mode+0x36>
                auto_mode_parser = GOT_AUTO_A;
 800226a:	4b14      	ldr	r3, [pc, #80]	; (80022bc <parse_auto_mode+0x80>)
 800226c:	2201      	movs	r2, #1
 800226e:	701a      	strb	r2, [r3, #0]
            } else {
                reset_parsing_auto_mode();  // Reset on unexpected character
            }
            break;
 8002270:	e01f      	b.n	80022b2 <parse_auto_mode+0x76>
                reset_parsing_auto_mode();  // Reset on unexpected character
 8002272:	f7ff ffd7 	bl	8002224 <reset_parsing_auto_mode>
            break;
 8002276:	e01c      	b.n	80022b2 <parse_auto_mode+0x76>
        case GOT_AUTO_A:
            if (c == 'U') {
 8002278:	79fb      	ldrb	r3, [r7, #7]
 800227a:	2b55      	cmp	r3, #85	; 0x55
 800227c:	d103      	bne.n	8002286 <parse_auto_mode+0x4a>
                auto_mode_parser = GOT_AUTO_U;
 800227e:	4b0f      	ldr	r3, [pc, #60]	; (80022bc <parse_auto_mode+0x80>)
 8002280:	2202      	movs	r2, #2
 8002282:	701a      	strb	r2, [r3, #0]
            } else {
                reset_parsing_auto_mode();  // Reset on unexpected character
            }
            break;
 8002284:	e015      	b.n	80022b2 <parse_auto_mode+0x76>
                reset_parsing_auto_mode();  // Reset on unexpected character
 8002286:	f7ff ffcd 	bl	8002224 <reset_parsing_auto_mode>
            break;
 800228a:	e012      	b.n	80022b2 <parse_auto_mode+0x76>
        case GOT_AUTO_U:
            if (c == 'T') {
 800228c:	79fb      	ldrb	r3, [r7, #7]
 800228e:	2b54      	cmp	r3, #84	; 0x54
 8002290:	d103      	bne.n	800229a <parse_auto_mode+0x5e>
                auto_mode_parser = GOT_AUTO_T;
 8002292:	4b0a      	ldr	r3, [pc, #40]	; (80022bc <parse_auto_mode+0x80>)
 8002294:	2203      	movs	r2, #3
 8002296:	701a      	strb	r2, [r3, #0]
            } else {
                reset_parsing_auto_mode();  // Reset on unexpected character
            }
            break;
 8002298:	e00b      	b.n	80022b2 <parse_auto_mode+0x76>
                reset_parsing_auto_mode();  // Reset on unexpected character
 800229a:	f7ff ffc3 	bl	8002224 <reset_parsing_auto_mode>
            break;
 800229e:	e008      	b.n	80022b2 <parse_auto_mode+0x76>
        case GOT_AUTO_T:
            if (c == 'O') {
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	2b4f      	cmp	r3, #79	; 0x4f
 80022a4:	d102      	bne.n	80022ac <parse_auto_mode+0x70>
                AUTO_MODE_flag = 1;
 80022a6:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <parse_auto_mode+0x84>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	701a      	strb	r2, [r3, #0]
            }
            reset_parsing_auto_mode();
 80022ac:	f7ff ffba 	bl	8002224 <reset_parsing_auto_mode>
            break;
 80022b0:	bf00      	nop
    }
}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20000125 	.word	0x20000125
 80022c0:	20000119 	.word	0x20000119

080022c4 <reset_parsing_setting_mode>:
    GOT_SETTING_T2
} Setting_mode_parser;

Setting_mode_parser setting_mode_parser = WAITING_FOR_SETTING_S;

void reset_parsing_setting_mode() {
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
    setting_mode_parser = WAITING_FOR_SETTING_S;
 80022c8:	4b03      	ldr	r3, [pc, #12]	; (80022d8 <reset_parsing_setting_mode+0x14>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	701a      	strb	r2, [r3, #0]
}
 80022ce:	bf00      	nop
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	20000126 	.word	0x20000126

080022dc <parse_setting_mode>:

void parse_setting_mode(char c) {
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	71fb      	strb	r3, [r7, #7]
    switch (setting_mode_parser) {
 80022e6:	4b23      	ldr	r3, [pc, #140]	; (8002374 <parse_setting_mode+0x98>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d83d      	bhi.n	800236a <parse_setting_mode+0x8e>
 80022ee:	a201      	add	r2, pc, #4	; (adr r2, 80022f4 <parse_setting_mode+0x18>)
 80022f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f4:	08002309 	.word	0x08002309
 80022f8:	0800231d 	.word	0x0800231d
 80022fc:	08002331 	.word	0x08002331
 8002300:	08002345 	.word	0x08002345
 8002304:	08002359 	.word	0x08002359
        case WAITING_FOR_SETTING_S:
            if (c == 'S') {
 8002308:	79fb      	ldrb	r3, [r7, #7]
 800230a:	2b53      	cmp	r3, #83	; 0x53
 800230c:	d103      	bne.n	8002316 <parse_setting_mode+0x3a>
                setting_mode_parser = GOT_SETTING_S;
 800230e:	4b19      	ldr	r3, [pc, #100]	; (8002374 <parse_setting_mode+0x98>)
 8002310:	2201      	movs	r2, #1
 8002312:	701a      	strb	r2, [r3, #0]
            } else {
                reset_parsing_setting_mode();  // Reset on unexpected character
            }
            break;
 8002314:	e029      	b.n	800236a <parse_setting_mode+0x8e>
                reset_parsing_setting_mode();  // Reset on unexpected character
 8002316:	f7ff ffd5 	bl	80022c4 <reset_parsing_setting_mode>
            break;
 800231a:	e026      	b.n	800236a <parse_setting_mode+0x8e>
        case GOT_SETTING_S:
            if (c == 'E') {
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	2b45      	cmp	r3, #69	; 0x45
 8002320:	d103      	bne.n	800232a <parse_setting_mode+0x4e>
                setting_mode_parser = GOT_SETTING_E;
 8002322:	4b14      	ldr	r3, [pc, #80]	; (8002374 <parse_setting_mode+0x98>)
 8002324:	2202      	movs	r2, #2
 8002326:	701a      	strb	r2, [r3, #0]
            } else {
                reset_parsing_setting_mode();  // Reset on unexpected character
            }
            break;
 8002328:	e01f      	b.n	800236a <parse_setting_mode+0x8e>
                reset_parsing_setting_mode();  // Reset on unexpected character
 800232a:	f7ff ffcb 	bl	80022c4 <reset_parsing_setting_mode>
            break;
 800232e:	e01c      	b.n	800236a <parse_setting_mode+0x8e>
        case GOT_SETTING_E:
            if (c == 'T') {
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	2b54      	cmp	r3, #84	; 0x54
 8002334:	d103      	bne.n	800233e <parse_setting_mode+0x62>
                setting_mode_parser = GOT_SETTING_T1;
 8002336:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <parse_setting_mode+0x98>)
 8002338:	2203      	movs	r2, #3
 800233a:	701a      	strb	r2, [r3, #0]
            } else {
                reset_parsing_setting_mode();  // Reset on unexpected character
            }
            break;
 800233c:	e015      	b.n	800236a <parse_setting_mode+0x8e>
                reset_parsing_setting_mode();  // Reset on unexpected character
 800233e:	f7ff ffc1 	bl	80022c4 <reset_parsing_setting_mode>
            break;
 8002342:	e012      	b.n	800236a <parse_setting_mode+0x8e>
        case GOT_SETTING_T1:
            if (c == 'T') {
 8002344:	79fb      	ldrb	r3, [r7, #7]
 8002346:	2b54      	cmp	r3, #84	; 0x54
 8002348:	d103      	bne.n	8002352 <parse_setting_mode+0x76>
                setting_mode_parser = GOT_SETTING_T2;
 800234a:	4b0a      	ldr	r3, [pc, #40]	; (8002374 <parse_setting_mode+0x98>)
 800234c:	2204      	movs	r2, #4
 800234e:	701a      	strb	r2, [r3, #0]
            } else {
                reset_parsing_setting_mode();  // Reset on unexpected character
            }
            break;
 8002350:	e00b      	b.n	800236a <parse_setting_mode+0x8e>
                reset_parsing_setting_mode();  // Reset on unexpected character
 8002352:	f7ff ffb7 	bl	80022c4 <reset_parsing_setting_mode>
            break;
 8002356:	e008      	b.n	800236a <parse_setting_mode+0x8e>
        case GOT_SETTING_T2:
            if (c == 'I') {
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	2b49      	cmp	r3, #73	; 0x49
 800235c:	d102      	bne.n	8002364 <parse_setting_mode+0x88>
                SETTING_MODE_flag = 1;
 800235e:	4b06      	ldr	r3, [pc, #24]	; (8002378 <parse_setting_mode+0x9c>)
 8002360:	2201      	movs	r2, #1
 8002362:	701a      	strb	r2, [r3, #0]
            }
            reset_parsing_setting_mode();
 8002364:	f7ff ffae 	bl	80022c4 <reset_parsing_setting_mode>
            break;
 8002368:	bf00      	nop
    }
}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20000126 	.word	0x20000126
 8002378:	2000011a 	.word	0x2000011a

0800237c <reset_parsing_manual_mode>:
    GOT_MANUAL_A
} Manual_mode_parser;

Manual_mode_parser manual_mode_parser = WAITING_FOR_MANUAL_M;

void reset_parsing_manual_mode() {
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
    manual_mode_parser = WAITING_FOR_MANUAL_M;
 8002380:	4b03      	ldr	r3, [pc, #12]	; (8002390 <reset_parsing_manual_mode+0x14>)
 8002382:	2200      	movs	r2, #0
 8002384:	701a      	strb	r2, [r3, #0]
}
 8002386:	bf00      	nop
 8002388:	46bd      	mov	sp, r7
 800238a:	bc80      	pop	{r7}
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	20000127 	.word	0x20000127

08002394 <parse_manual_mode>:

void parse_manual_mode(char c) { // parses phrase "MAN"
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	71fb      	strb	r3, [r7, #7]
    switch (manual_mode_parser) {
 800239e:	4b16      	ldr	r3, [pc, #88]	; (80023f8 <parse_manual_mode+0x64>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d01a      	beq.n	80023dc <parse_manual_mode+0x48>
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	dc21      	bgt.n	80023ee <parse_manual_mode+0x5a>
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d002      	beq.n	80023b4 <parse_manual_mode+0x20>
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d00a      	beq.n	80023c8 <parse_manual_mode+0x34>
                MANUAL_MODE_flag = 1;
            }
            reset_parsing_manual_mode();  // Reset on unexpected character
            break;
    }
}
 80023b2:	e01c      	b.n	80023ee <parse_manual_mode+0x5a>
            if (c == 'M') {
 80023b4:	79fb      	ldrb	r3, [r7, #7]
 80023b6:	2b4d      	cmp	r3, #77	; 0x4d
 80023b8:	d103      	bne.n	80023c2 <parse_manual_mode+0x2e>
                manual_mode_parser = GOT_MANUAL_M;
 80023ba:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <parse_manual_mode+0x64>)
 80023bc:	2201      	movs	r2, #1
 80023be:	701a      	strb	r2, [r3, #0]
            break;
 80023c0:	e015      	b.n	80023ee <parse_manual_mode+0x5a>
                reset_parsing_manual_mode();  // Reset on unexpected character
 80023c2:	f7ff ffdb 	bl	800237c <reset_parsing_manual_mode>
            break;
 80023c6:	e012      	b.n	80023ee <parse_manual_mode+0x5a>
            if (c == 'A') {
 80023c8:	79fb      	ldrb	r3, [r7, #7]
 80023ca:	2b41      	cmp	r3, #65	; 0x41
 80023cc:	d103      	bne.n	80023d6 <parse_manual_mode+0x42>
                manual_mode_parser = GOT_MANUAL_A;
 80023ce:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <parse_manual_mode+0x64>)
 80023d0:	2202      	movs	r2, #2
 80023d2:	701a      	strb	r2, [r3, #0]
            break;
 80023d4:	e00b      	b.n	80023ee <parse_manual_mode+0x5a>
                reset_parsing_manual_mode();  // Reset on unexpected character
 80023d6:	f7ff ffd1 	bl	800237c <reset_parsing_manual_mode>
            break;
 80023da:	e008      	b.n	80023ee <parse_manual_mode+0x5a>
            if (c == 'N') {
 80023dc:	79fb      	ldrb	r3, [r7, #7]
 80023de:	2b4e      	cmp	r3, #78	; 0x4e
 80023e0:	d102      	bne.n	80023e8 <parse_manual_mode+0x54>
                MANUAL_MODE_flag = 1;
 80023e2:	4b06      	ldr	r3, [pc, #24]	; (80023fc <parse_manual_mode+0x68>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	701a      	strb	r2, [r3, #0]
            reset_parsing_manual_mode();  // Reset on unexpected character
 80023e8:	f7ff ffc8 	bl	800237c <reset_parsing_manual_mode>
            break;
 80023ec:	bf00      	nop
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000127 	.word	0x20000127
 80023fc:	2000011f 	.word	0x2000011f

08002400 <reset_parsing_touch_red_bar>:
    GOT_RED_E
} Touch_RED_bar_parser;

Touch_RED_bar_parser touch_RED_bar_parser = WAITING_FOR_RED_R;

void reset_parsing_touch_red_bar() {
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
    touch_RED_bar_parser = WAITING_FOR_RED_R;
 8002404:	4b03      	ldr	r3, [pc, #12]	; (8002414 <reset_parsing_touch_red_bar+0x14>)
 8002406:	2200      	movs	r2, #0
 8002408:	701a      	strb	r2, [r3, #0]
}
 800240a:	bf00      	nop
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	20000128 	.word	0x20000128

08002418 <parse_touch_RED_bar>:

void parse_touch_RED_bar(char c) { // parses phrase "RED"
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	71fb      	strb	r3, [r7, #7]
    switch (touch_RED_bar_parser) {
 8002422:	4b16      	ldr	r3, [pc, #88]	; (800247c <parse_touch_RED_bar+0x64>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b02      	cmp	r3, #2
 8002428:	d01a      	beq.n	8002460 <parse_touch_RED_bar+0x48>
 800242a:	2b02      	cmp	r3, #2
 800242c:	dc21      	bgt.n	8002472 <parse_touch_RED_bar+0x5a>
 800242e:	2b00      	cmp	r3, #0
 8002430:	d002      	beq.n	8002438 <parse_touch_RED_bar+0x20>
 8002432:	2b01      	cmp	r3, #1
 8002434:	d00a      	beq.n	800244c <parse_touch_RED_bar+0x34>
                CHANGING_RED_TIMER_flag = 1;
            }
            reset_parsing_touch_red_bar();  // Reset on unexpected character
            break;
    }
}
 8002436:	e01c      	b.n	8002472 <parse_touch_RED_bar+0x5a>
            if (c == 'R') {
 8002438:	79fb      	ldrb	r3, [r7, #7]
 800243a:	2b52      	cmp	r3, #82	; 0x52
 800243c:	d103      	bne.n	8002446 <parse_touch_RED_bar+0x2e>
                touch_RED_bar_parser = GOT_RED_R;
 800243e:	4b0f      	ldr	r3, [pc, #60]	; (800247c <parse_touch_RED_bar+0x64>)
 8002440:	2201      	movs	r2, #1
 8002442:	701a      	strb	r2, [r3, #0]
            break;
 8002444:	e015      	b.n	8002472 <parse_touch_RED_bar+0x5a>
                reset_parsing_touch_red_bar();  // Reset on unexpected character
 8002446:	f7ff ffdb 	bl	8002400 <reset_parsing_touch_red_bar>
            break;
 800244a:	e012      	b.n	8002472 <parse_touch_RED_bar+0x5a>
            if (c == 'E') {
 800244c:	79fb      	ldrb	r3, [r7, #7]
 800244e:	2b45      	cmp	r3, #69	; 0x45
 8002450:	d103      	bne.n	800245a <parse_touch_RED_bar+0x42>
                touch_RED_bar_parser = GOT_RED_E;
 8002452:	4b0a      	ldr	r3, [pc, #40]	; (800247c <parse_touch_RED_bar+0x64>)
 8002454:	2202      	movs	r2, #2
 8002456:	701a      	strb	r2, [r3, #0]
            break;
 8002458:	e00b      	b.n	8002472 <parse_touch_RED_bar+0x5a>
                reset_parsing_touch_red_bar();  // Reset on unexpected character
 800245a:	f7ff ffd1 	bl	8002400 <reset_parsing_touch_red_bar>
            break;
 800245e:	e008      	b.n	8002472 <parse_touch_RED_bar+0x5a>
            if (c == 'D') {
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	2b44      	cmp	r3, #68	; 0x44
 8002464:	d102      	bne.n	800246c <parse_touch_RED_bar+0x54>
                CHANGING_RED_TIMER_flag = 1;
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <parse_touch_RED_bar+0x68>)
 8002468:	2201      	movs	r2, #1
 800246a:	701a      	strb	r2, [r3, #0]
            reset_parsing_touch_red_bar();  // Reset on unexpected character
 800246c:	f7ff ffc8 	bl	8002400 <reset_parsing_touch_red_bar>
            break;
 8002470:	bf00      	nop
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20000128 	.word	0x20000128
 8002480:	2000011b 	.word	0x2000011b

08002484 <reset_parsing_touch_YELLOW_bar>:
    GOT_YELLOW_E
} Touch_YELLOW_bar_parser;

Touch_YELLOW_bar_parser touch_YELLOW_bar_parser = WAITING_FOR_YELLOW_A;

void reset_parsing_touch_YELLOW_bar() {
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
    touch_YELLOW_bar_parser = WAITING_FOR_YELLOW_A;
 8002488:	4b03      	ldr	r3, [pc, #12]	; (8002498 <reset_parsing_touch_YELLOW_bar+0x14>)
 800248a:	2200      	movs	r2, #0
 800248c:	701a      	strb	r2, [r3, #0]
}
 800248e:	bf00      	nop
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	20000129 	.word	0x20000129

0800249c <parse_touch_YELLOW_bar>:

void parse_touch_YELLOW_bar(char c) { // parses phrase "AMBER"
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	71fb      	strb	r3, [r7, #7]
    switch (touch_YELLOW_bar_parser) {
 80024a6:	4b23      	ldr	r3, [pc, #140]	; (8002534 <parse_touch_YELLOW_bar+0x98>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	d83d      	bhi.n	800252a <parse_touch_YELLOW_bar+0x8e>
 80024ae:	a201      	add	r2, pc, #4	; (adr r2, 80024b4 <parse_touch_YELLOW_bar+0x18>)
 80024b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b4:	080024c9 	.word	0x080024c9
 80024b8:	080024dd 	.word	0x080024dd
 80024bc:	080024f1 	.word	0x080024f1
 80024c0:	08002505 	.word	0x08002505
 80024c4:	08002519 	.word	0x08002519
        case WAITING_FOR_YELLOW_A:
            if (c == 'A') {
 80024c8:	79fb      	ldrb	r3, [r7, #7]
 80024ca:	2b41      	cmp	r3, #65	; 0x41
 80024cc:	d103      	bne.n	80024d6 <parse_touch_YELLOW_bar+0x3a>
                touch_YELLOW_bar_parser = GOT_YELLOW_A;
 80024ce:	4b19      	ldr	r3, [pc, #100]	; (8002534 <parse_touch_YELLOW_bar+0x98>)
 80024d0:	2201      	movs	r2, #1
 80024d2:	701a      	strb	r2, [r3, #0]
            } else {
                reset_parsing_touch_YELLOW_bar();  // Reset on unexpected character
            }
            break;
 80024d4:	e029      	b.n	800252a <parse_touch_YELLOW_bar+0x8e>
                reset_parsing_touch_YELLOW_bar();  // Reset on unexpected character
 80024d6:	f7ff ffd5 	bl	8002484 <reset_parsing_touch_YELLOW_bar>
            break;
 80024da:	e026      	b.n	800252a <parse_touch_YELLOW_bar+0x8e>
        case GOT_YELLOW_A:
            if (c == 'M') {
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	2b4d      	cmp	r3, #77	; 0x4d
 80024e0:	d103      	bne.n	80024ea <parse_touch_YELLOW_bar+0x4e>
                touch_YELLOW_bar_parser = GOT_YELLOW_M;
 80024e2:	4b14      	ldr	r3, [pc, #80]	; (8002534 <parse_touch_YELLOW_bar+0x98>)
 80024e4:	2202      	movs	r2, #2
 80024e6:	701a      	strb	r2, [r3, #0]
            } else {
                reset_parsing_touch_YELLOW_bar();  // Reset on unexpected character
            }
            break;
 80024e8:	e01f      	b.n	800252a <parse_touch_YELLOW_bar+0x8e>
                reset_parsing_touch_YELLOW_bar();  // Reset on unexpected character
 80024ea:	f7ff ffcb 	bl	8002484 <reset_parsing_touch_YELLOW_bar>
            break;
 80024ee:	e01c      	b.n	800252a <parse_touch_YELLOW_bar+0x8e>
        case GOT_YELLOW_M:
            if (c == 'B') {
 80024f0:	79fb      	ldrb	r3, [r7, #7]
 80024f2:	2b42      	cmp	r3, #66	; 0x42
 80024f4:	d103      	bne.n	80024fe <parse_touch_YELLOW_bar+0x62>
                touch_YELLOW_bar_parser = GOT_YELLOW_B;
 80024f6:	4b0f      	ldr	r3, [pc, #60]	; (8002534 <parse_touch_YELLOW_bar+0x98>)
 80024f8:	2203      	movs	r2, #3
 80024fa:	701a      	strb	r2, [r3, #0]
            } else {
                reset_parsing_touch_YELLOW_bar();  // Reset on unexpected character
            }
            break;
 80024fc:	e015      	b.n	800252a <parse_touch_YELLOW_bar+0x8e>
                reset_parsing_touch_YELLOW_bar();  // Reset on unexpected character
 80024fe:	f7ff ffc1 	bl	8002484 <reset_parsing_touch_YELLOW_bar>
            break;
 8002502:	e012      	b.n	800252a <parse_touch_YELLOW_bar+0x8e>
        case GOT_YELLOW_B:
            if (c == 'E') {
 8002504:	79fb      	ldrb	r3, [r7, #7]
 8002506:	2b45      	cmp	r3, #69	; 0x45
 8002508:	d103      	bne.n	8002512 <parse_touch_YELLOW_bar+0x76>
                touch_YELLOW_bar_parser = GOT_YELLOW_E;
 800250a:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <parse_touch_YELLOW_bar+0x98>)
 800250c:	2204      	movs	r2, #4
 800250e:	701a      	strb	r2, [r3, #0]
            } else {
                reset_parsing_touch_YELLOW_bar();  // Reset on unexpected character
            }
            break;
 8002510:	e00b      	b.n	800252a <parse_touch_YELLOW_bar+0x8e>
                reset_parsing_touch_YELLOW_bar();  // Reset on unexpected character
 8002512:	f7ff ffb7 	bl	8002484 <reset_parsing_touch_YELLOW_bar>
            break;
 8002516:	e008      	b.n	800252a <parse_touch_YELLOW_bar+0x8e>
        case GOT_YELLOW_E:
            if (c == 'R') {
 8002518:	79fb      	ldrb	r3, [r7, #7]
 800251a:	2b52      	cmp	r3, #82	; 0x52
 800251c:	d102      	bne.n	8002524 <parse_touch_YELLOW_bar+0x88>
                CHANGING_YELLOW_TIMER_flag = 1;
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <parse_touch_YELLOW_bar+0x9c>)
 8002520:	2201      	movs	r2, #1
 8002522:	701a      	strb	r2, [r3, #0]
            }
            reset_parsing_touch_YELLOW_bar();  // Reset on unexpected character
 8002524:	f7ff ffae 	bl	8002484 <reset_parsing_touch_YELLOW_bar>
            break;
 8002528:	bf00      	nop
    }
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20000129 	.word	0x20000129
 8002538:	2000011c 	.word	0x2000011c

0800253c <reset_parsing_touch_GREEN_bar>:
    GOT_GREEN_E2
} Touch_GREEN_bar_parser;

Touch_GREEN_bar_parser touch_GREEN_bar_parser = WAITING_FOR_GREEN_G;

void reset_parsing_touch_GREEN_bar() {
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
    touch_GREEN_bar_parser = WAITING_FOR_GREEN_G;
 8002540:	4b03      	ldr	r3, [pc, #12]	; (8002550 <reset_parsing_touch_GREEN_bar+0x14>)
 8002542:	2200      	movs	r2, #0
 8002544:	701a      	strb	r2, [r3, #0]
}
 8002546:	bf00      	nop
 8002548:	46bd      	mov	sp, r7
 800254a:	bc80      	pop	{r7}
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	2000012a 	.word	0x2000012a

08002554 <parse_touch_GREEN_bar>:

void parse_touch_GREEN_bar(char c) { // parses phrase "GREEN"
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	71fb      	strb	r3, [r7, #7]
    switch (touch_GREEN_bar_parser) {
 800255e:	4b23      	ldr	r3, [pc, #140]	; (80025ec <parse_touch_GREEN_bar+0x98>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b04      	cmp	r3, #4
 8002564:	d83d      	bhi.n	80025e2 <parse_touch_GREEN_bar+0x8e>
 8002566:	a201      	add	r2, pc, #4	; (adr r2, 800256c <parse_touch_GREEN_bar+0x18>)
 8002568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800256c:	08002581 	.word	0x08002581
 8002570:	08002595 	.word	0x08002595
 8002574:	080025a9 	.word	0x080025a9
 8002578:	080025bd 	.word	0x080025bd
 800257c:	080025d1 	.word	0x080025d1
        case WAITING_FOR_GREEN_G:
            if (c == 'G') {
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	2b47      	cmp	r3, #71	; 0x47
 8002584:	d103      	bne.n	800258e <parse_touch_GREEN_bar+0x3a>
                touch_GREEN_bar_parser = GOT_GREEN_G;
 8002586:	4b19      	ldr	r3, [pc, #100]	; (80025ec <parse_touch_GREEN_bar+0x98>)
 8002588:	2201      	movs	r2, #1
 800258a:	701a      	strb	r2, [r3, #0]
            } else {
                reset_parsing_touch_GREEN_bar();  // Reset on unexpected character
            }
            break;
 800258c:	e029      	b.n	80025e2 <parse_touch_GREEN_bar+0x8e>
                reset_parsing_touch_GREEN_bar();  // Reset on unexpected character
 800258e:	f7ff ffd5 	bl	800253c <reset_parsing_touch_GREEN_bar>
            break;
 8002592:	e026      	b.n	80025e2 <parse_touch_GREEN_bar+0x8e>
        case GOT_GREEN_G:
            if (c == 'R') {
 8002594:	79fb      	ldrb	r3, [r7, #7]
 8002596:	2b52      	cmp	r3, #82	; 0x52
 8002598:	d103      	bne.n	80025a2 <parse_touch_GREEN_bar+0x4e>
                touch_GREEN_bar_parser = GOT_GREEN_R;
 800259a:	4b14      	ldr	r3, [pc, #80]	; (80025ec <parse_touch_GREEN_bar+0x98>)
 800259c:	2202      	movs	r2, #2
 800259e:	701a      	strb	r2, [r3, #0]
            } else {
                reset_parsing_touch_GREEN_bar();  // Reset on unexpected character
            }
            break;
 80025a0:	e01f      	b.n	80025e2 <parse_touch_GREEN_bar+0x8e>
                reset_parsing_touch_GREEN_bar();  // Reset on unexpected character
 80025a2:	f7ff ffcb 	bl	800253c <reset_parsing_touch_GREEN_bar>
            break;
 80025a6:	e01c      	b.n	80025e2 <parse_touch_GREEN_bar+0x8e>
        case GOT_GREEN_R:
            if (c == 'E') {
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	2b45      	cmp	r3, #69	; 0x45
 80025ac:	d103      	bne.n	80025b6 <parse_touch_GREEN_bar+0x62>
                touch_GREEN_bar_parser = GOT_GREEN_E1;
 80025ae:	4b0f      	ldr	r3, [pc, #60]	; (80025ec <parse_touch_GREEN_bar+0x98>)
 80025b0:	2203      	movs	r2, #3
 80025b2:	701a      	strb	r2, [r3, #0]
            } else {
                reset_parsing_touch_GREEN_bar();  // Reset on unexpected character
            }
            break;
 80025b4:	e015      	b.n	80025e2 <parse_touch_GREEN_bar+0x8e>
                reset_parsing_touch_GREEN_bar();  // Reset on unexpected character
 80025b6:	f7ff ffc1 	bl	800253c <reset_parsing_touch_GREEN_bar>
            break;
 80025ba:	e012      	b.n	80025e2 <parse_touch_GREEN_bar+0x8e>
        case GOT_GREEN_E1:
            if (c == 'E') {
 80025bc:	79fb      	ldrb	r3, [r7, #7]
 80025be:	2b45      	cmp	r3, #69	; 0x45
 80025c0:	d103      	bne.n	80025ca <parse_touch_GREEN_bar+0x76>
                touch_GREEN_bar_parser = GOT_GREEN_E2;
 80025c2:	4b0a      	ldr	r3, [pc, #40]	; (80025ec <parse_touch_GREEN_bar+0x98>)
 80025c4:	2204      	movs	r2, #4
 80025c6:	701a      	strb	r2, [r3, #0]
            } else {
                reset_parsing_touch_GREEN_bar();  // Reset on unexpected character
            }
            break;
 80025c8:	e00b      	b.n	80025e2 <parse_touch_GREEN_bar+0x8e>
                reset_parsing_touch_GREEN_bar();  // Reset on unexpected character
 80025ca:	f7ff ffb7 	bl	800253c <reset_parsing_touch_GREEN_bar>
            break;
 80025ce:	e008      	b.n	80025e2 <parse_touch_GREEN_bar+0x8e>
        case GOT_GREEN_E2:
            if (c == 'N') {
 80025d0:	79fb      	ldrb	r3, [r7, #7]
 80025d2:	2b4e      	cmp	r3, #78	; 0x4e
 80025d4:	d102      	bne.n	80025dc <parse_touch_GREEN_bar+0x88>
                CHANGING_GREEN_TIMER_flag = 1;
 80025d6:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <parse_touch_GREEN_bar+0x9c>)
 80025d8:	2201      	movs	r2, #1
 80025da:	701a      	strb	r2, [r3, #0]
            }
            reset_parsing_touch_GREEN_bar();  // Reset on unexpected character
 80025dc:	f7ff ffae 	bl	800253c <reset_parsing_touch_GREEN_bar>
            break;
 80025e0:	bf00      	nop
    }
}
 80025e2:	bf00      	nop
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	2000012a 	.word	0x2000012a
 80025f0:	2000011d 	.word	0x2000011d

080025f4 <reset_parsing_SET_timer>:
    GOT_SET_E
} Set_timer_parser;

Set_timer_parser set_timer_parser = WAITING_FOR_SET_S;

void reset_parsing_SET_timer() {
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
    set_timer_parser = WAITING_FOR_SET_S;
 80025f8:	4b03      	ldr	r3, [pc, #12]	; (8002608 <reset_parsing_SET_timer+0x14>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	701a      	strb	r2, [r3, #0]
}
 80025fe:	bf00      	nop
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	2000012b 	.word	0x2000012b

0800260c <parse_SET_timer>:

void parse_SET_timer(char c) {
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	71fb      	strb	r3, [r7, #7]
    switch (set_timer_parser) {
 8002616:	4b16      	ldr	r3, [pc, #88]	; (8002670 <parse_SET_timer+0x64>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b02      	cmp	r3, #2
 800261c:	d01a      	beq.n	8002654 <parse_SET_timer+0x48>
 800261e:	2b02      	cmp	r3, #2
 8002620:	dc21      	bgt.n	8002666 <parse_SET_timer+0x5a>
 8002622:	2b00      	cmp	r3, #0
 8002624:	d002      	beq.n	800262c <parse_SET_timer+0x20>
 8002626:	2b01      	cmp	r3, #1
 8002628:	d00a      	beq.n	8002640 <parse_SET_timer+0x34>
                SET_TIMER_flag = 1;
            }
            reset_parsing_SET_timer();  // Reset on unexpected character
            break;
    }
}
 800262a:	e01c      	b.n	8002666 <parse_SET_timer+0x5a>
            if (c == 'S') {
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	2b53      	cmp	r3, #83	; 0x53
 8002630:	d103      	bne.n	800263a <parse_SET_timer+0x2e>
                set_timer_parser = GOT_SET_S;
 8002632:	4b0f      	ldr	r3, [pc, #60]	; (8002670 <parse_SET_timer+0x64>)
 8002634:	2201      	movs	r2, #1
 8002636:	701a      	strb	r2, [r3, #0]
            break;
 8002638:	e015      	b.n	8002666 <parse_SET_timer+0x5a>
                reset_parsing_SET_timer();  // Reset on unexpected character
 800263a:	f7ff ffdb 	bl	80025f4 <reset_parsing_SET_timer>
            break;
 800263e:	e012      	b.n	8002666 <parse_SET_timer+0x5a>
            if (c == 'E') {
 8002640:	79fb      	ldrb	r3, [r7, #7]
 8002642:	2b45      	cmp	r3, #69	; 0x45
 8002644:	d103      	bne.n	800264e <parse_SET_timer+0x42>
                set_timer_parser = GOT_SET_E;
 8002646:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <parse_SET_timer+0x64>)
 8002648:	2202      	movs	r2, #2
 800264a:	701a      	strb	r2, [r3, #0]
            break;
 800264c:	e00b      	b.n	8002666 <parse_SET_timer+0x5a>
                reset_parsing_SET_timer();  // Reset on unexpected character
 800264e:	f7ff ffd1 	bl	80025f4 <reset_parsing_SET_timer>
            break;
 8002652:	e008      	b.n	8002666 <parse_SET_timer+0x5a>
            if (c == 'T') {
 8002654:	79fb      	ldrb	r3, [r7, #7]
 8002656:	2b54      	cmp	r3, #84	; 0x54
 8002658:	d102      	bne.n	8002660 <parse_SET_timer+0x54>
                SET_TIMER_flag = 1;
 800265a:	4b06      	ldr	r3, [pc, #24]	; (8002674 <parse_SET_timer+0x68>)
 800265c:	2201      	movs	r2, #1
 800265e:	701a      	strb	r2, [r3, #0]
            reset_parsing_SET_timer();  // Reset on unexpected character
 8002660:	f7ff ffc8 	bl	80025f4 <reset_parsing_SET_timer>
            break;
 8002664:	bf00      	nop
}
 8002666:	bf00      	nop
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	2000012b 	.word	0x2000012b
 8002674:	2000011e 	.word	0x2000011e

08002678 <reset_number_parser>:
NumberParserState number_parser_state = WAITING_FOR_DIGIT;
uint16_t parsed_number = 0;  // Variable to save the parsed number
uint16_t user_timer = 0;
uint8_t HASH_flag = 0;

void reset_number_parser() {
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
    number_parser_state = WAITING_FOR_DIGIT;
 800267c:	4b04      	ldr	r3, [pc, #16]	; (8002690 <reset_number_parser+0x18>)
 800267e:	2200      	movs	r2, #0
 8002680:	701a      	strb	r2, [r3, #0]
    parsed_number = 0;  // Reset the parsed number
 8002682:	4b04      	ldr	r3, [pc, #16]	; (8002694 <reset_number_parser+0x1c>)
 8002684:	2200      	movs	r2, #0
 8002686:	801a      	strh	r2, [r3, #0]
}
 8002688:	bf00      	nop
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr
 8002690:	2000012c 	.word	0x2000012c
 8002694:	2000012e 	.word	0x2000012e

08002698 <parse_number>:

void parse_number(char c) {
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	71fb      	strb	r3, [r7, #7]
    switch (number_parser_state) {
 80026a2:	4b42      	ldr	r3, [pc, #264]	; (80027ac <parse_number+0x114>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d86f      	bhi.n	800278a <parse_number+0xf2>
 80026aa:	a201      	add	r2, pc, #4	; (adr r2, 80026b0 <parse_number+0x18>)
 80026ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b0:	080026c5 	.word	0x080026c5
 80026b4:	080026eb 	.word	0x080026eb
 80026b8:	08002731 	.word	0x08002731
 80026bc:	08002777 	.word	0x08002777
 80026c0:	0800278b 	.word	0x0800278b
        case WAITING_FOR_DIGIT:
            if (c >= '0' && c <= '9') {
 80026c4:	79fb      	ldrb	r3, [r7, #7]
 80026c6:	2b2f      	cmp	r3, #47	; 0x2f
 80026c8:	d90c      	bls.n	80026e4 <parse_number+0x4c>
 80026ca:	79fb      	ldrb	r3, [r7, #7]
 80026cc:	2b39      	cmp	r3, #57	; 0x39
 80026ce:	d809      	bhi.n	80026e4 <parse_number+0x4c>
                parsed_number = c - '0';  // Store the first digit
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	3b30      	subs	r3, #48	; 0x30
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	4b35      	ldr	r3, [pc, #212]	; (80027b0 <parse_number+0x118>)
 80026da:	801a      	strh	r2, [r3, #0]
                number_parser_state = GOT_DIGIT;
 80026dc:	4b33      	ldr	r3, [pc, #204]	; (80027ac <parse_number+0x114>)
 80026de:	2201      	movs	r2, #1
 80026e0:	701a      	strb	r2, [r3, #0]
            } else {
                reset_number_parser();  // Reset on unexpected character
            }
            break;
 80026e2:	e052      	b.n	800278a <parse_number+0xf2>
                reset_number_parser();  // Reset on unexpected character
 80026e4:	f7ff ffc8 	bl	8002678 <reset_number_parser>
            break;
 80026e8:	e04f      	b.n	800278a <parse_number+0xf2>
        case GOT_DIGIT:
            if (c >= '0' && c <= '9') {
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	2b2f      	cmp	r3, #47	; 0x2f
 80026ee:	d915      	bls.n	800271c <parse_number+0x84>
 80026f0:	79fb      	ldrb	r3, [r7, #7]
 80026f2:	2b39      	cmp	r3, #57	; 0x39
 80026f4:	d812      	bhi.n	800271c <parse_number+0x84>
                parsed_number = parsed_number * 10 + (c - '0');  // Store the second digit
 80026f6:	4b2e      	ldr	r3, [pc, #184]	; (80027b0 <parse_number+0x118>)
 80026f8:	881b      	ldrh	r3, [r3, #0]
 80026fa:	461a      	mov	r2, r3
 80026fc:	0092      	lsls	r2, r2, #2
 80026fe:	4413      	add	r3, r2
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	b29a      	uxth	r2, r3
 8002704:	79fb      	ldrb	r3, [r7, #7]
 8002706:	b29b      	uxth	r3, r3
 8002708:	4413      	add	r3, r2
 800270a:	b29b      	uxth	r3, r3
 800270c:	3b30      	subs	r3, #48	; 0x30
 800270e:	b29a      	uxth	r2, r3
 8002710:	4b27      	ldr	r3, [pc, #156]	; (80027b0 <parse_number+0x118>)
 8002712:	801a      	strh	r2, [r3, #0]
                number_parser_state = GOT_SECOND_DIGIT;
 8002714:	4b25      	ldr	r3, [pc, #148]	; (80027ac <parse_number+0x114>)
 8002716:	2202      	movs	r2, #2
 8002718:	701a      	strb	r2, [r3, #0]
            } else if (c == '#') {
                number_parser_state = GOT_HASH;
            } else {
                reset_number_parser();  // Reset on unexpected character
            }
            break;
 800271a:	e036      	b.n	800278a <parse_number+0xf2>
            } else if (c == '#') {
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	2b23      	cmp	r3, #35	; 0x23
 8002720:	d103      	bne.n	800272a <parse_number+0x92>
                number_parser_state = GOT_HASH;
 8002722:	4b22      	ldr	r3, [pc, #136]	; (80027ac <parse_number+0x114>)
 8002724:	2204      	movs	r2, #4
 8002726:	701a      	strb	r2, [r3, #0]
            break;
 8002728:	e02f      	b.n	800278a <parse_number+0xf2>
                reset_number_parser();  // Reset on unexpected character
 800272a:	f7ff ffa5 	bl	8002678 <reset_number_parser>
            break;
 800272e:	e02c      	b.n	800278a <parse_number+0xf2>
        case GOT_SECOND_DIGIT:
            if (c >= '0' && c <= '9') {
 8002730:	79fb      	ldrb	r3, [r7, #7]
 8002732:	2b2f      	cmp	r3, #47	; 0x2f
 8002734:	d915      	bls.n	8002762 <parse_number+0xca>
 8002736:	79fb      	ldrb	r3, [r7, #7]
 8002738:	2b39      	cmp	r3, #57	; 0x39
 800273a:	d812      	bhi.n	8002762 <parse_number+0xca>
                parsed_number = parsed_number * 10 + (c - '0');  // Store the third digit
 800273c:	4b1c      	ldr	r3, [pc, #112]	; (80027b0 <parse_number+0x118>)
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	461a      	mov	r2, r3
 8002742:	0092      	lsls	r2, r2, #2
 8002744:	4413      	add	r3, r2
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	b29a      	uxth	r2, r3
 800274a:	79fb      	ldrb	r3, [r7, #7]
 800274c:	b29b      	uxth	r3, r3
 800274e:	4413      	add	r3, r2
 8002750:	b29b      	uxth	r3, r3
 8002752:	3b30      	subs	r3, #48	; 0x30
 8002754:	b29a      	uxth	r2, r3
 8002756:	4b16      	ldr	r3, [pc, #88]	; (80027b0 <parse_number+0x118>)
 8002758:	801a      	strh	r2, [r3, #0]
                number_parser_state = GOT_THIRD_DIGIT;
 800275a:	4b14      	ldr	r3, [pc, #80]	; (80027ac <parse_number+0x114>)
 800275c:	2203      	movs	r2, #3
 800275e:	701a      	strb	r2, [r3, #0]
            } else if (c == '#') {
                number_parser_state = GOT_HASH;
            } else {
                reset_number_parser();  // Reset on unexpected character
            }
            break;
 8002760:	e013      	b.n	800278a <parse_number+0xf2>
            } else if (c == '#') {
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	2b23      	cmp	r3, #35	; 0x23
 8002766:	d103      	bne.n	8002770 <parse_number+0xd8>
                number_parser_state = GOT_HASH;
 8002768:	4b10      	ldr	r3, [pc, #64]	; (80027ac <parse_number+0x114>)
 800276a:	2204      	movs	r2, #4
 800276c:	701a      	strb	r2, [r3, #0]
            break;
 800276e:	e00c      	b.n	800278a <parse_number+0xf2>
                reset_number_parser();  // Reset on unexpected character
 8002770:	f7ff ff82 	bl	8002678 <reset_number_parser>
            break;
 8002774:	e009      	b.n	800278a <parse_number+0xf2>
        case GOT_THIRD_DIGIT:
            if (c == '#') {
 8002776:	79fb      	ldrb	r3, [r7, #7]
 8002778:	2b23      	cmp	r3, #35	; 0x23
 800277a:	d103      	bne.n	8002784 <parse_number+0xec>
                number_parser_state = GOT_HASH;
 800277c:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <parse_number+0x114>)
 800277e:	2204      	movs	r2, #4
 8002780:	701a      	strb	r2, [r3, #0]
            } else {
                reset_number_parser();  // Reset on unexpected character
            }
            break;
 8002782:	e001      	b.n	8002788 <parse_number+0xf0>
                reset_number_parser();  // Reset on unexpected character
 8002784:	f7ff ff78 	bl	8002678 <reset_number_parser>
            break;
 8002788:	bf00      	nop
        case GOT_HASH: //do nothing because we process it below in if
        	break;
    }

    if(number_parser_state == GOT_HASH)
 800278a:	4b08      	ldr	r3, [pc, #32]	; (80027ac <parse_number+0x114>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	2b04      	cmp	r3, #4
 8002790:	d108      	bne.n	80027a4 <parse_number+0x10c>
    {
    	HASH_flag = 1;
 8002792:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <parse_number+0x11c>)
 8002794:	2201      	movs	r2, #1
 8002796:	701a      	strb	r2, [r3, #0]
    	user_timer = parsed_number;
 8002798:	4b05      	ldr	r3, [pc, #20]	; (80027b0 <parse_number+0x118>)
 800279a:	881a      	ldrh	r2, [r3, #0]
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <parse_number+0x120>)
 800279e:	801a      	strh	r2, [r3, #0]
    	reset_number_parser();
 80027a0:	f7ff ff6a 	bl	8002678 <reset_number_parser>
    }
}
 80027a4:	bf00      	nop
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	2000012c 	.word	0x2000012c
 80027b0:	2000012e 	.word	0x2000012e
 80027b4:	20000132 	.word	0x20000132
 80027b8:	20000130 	.word	0x20000130

080027bc <reset_parsing_touch_REDOD_bar>:
    GOT_REDOD_O
} Touch_REDOD_bar_parser;

Touch_REDOD_bar_parser touch_REDOD_bar_parser = WAITING_FOR_REDOD_R;

void reset_parsing_touch_REDOD_bar() {
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
    touch_REDOD_bar_parser = WAITING_FOR_REDOD_R;
 80027c0:	4b03      	ldr	r3, [pc, #12]	; (80027d0 <reset_parsing_touch_REDOD_bar+0x14>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	701a      	strb	r2, [r3, #0]
}
 80027c6:	bf00      	nop
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	20000133 	.word	0x20000133

080027d4 <parse_touch_REDOD_bar>:

void parse_touch_REDOD_bar(char c) { // parses phrase "REDOD"
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	71fb      	strb	r3, [r7, #7]
    switch (touch_REDOD_bar_parser) {
 80027de:	4b23      	ldr	r3, [pc, #140]	; (800286c <parse_touch_REDOD_bar+0x98>)
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d83d      	bhi.n	8002862 <parse_touch_REDOD_bar+0x8e>
 80027e6:	a201      	add	r2, pc, #4	; (adr r2, 80027ec <parse_touch_REDOD_bar+0x18>)
 80027e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ec:	08002801 	.word	0x08002801
 80027f0:	08002815 	.word	0x08002815
 80027f4:	08002829 	.word	0x08002829
 80027f8:	0800283d 	.word	0x0800283d
 80027fc:	08002851 	.word	0x08002851
        case WAITING_FOR_REDOD_R:
            if (c == 'R') {
 8002800:	79fb      	ldrb	r3, [r7, #7]
 8002802:	2b52      	cmp	r3, #82	; 0x52
 8002804:	d103      	bne.n	800280e <parse_touch_REDOD_bar+0x3a>
                touch_REDOD_bar_parser = GOT_REDOD_R;
 8002806:	4b19      	ldr	r3, [pc, #100]	; (800286c <parse_touch_REDOD_bar+0x98>)
 8002808:	2201      	movs	r2, #1
 800280a:	701a      	strb	r2, [r3, #0]
            } else {
                reset_parsing_touch_REDOD_bar();  // Reset on unexpected character
            }
            break;
 800280c:	e029      	b.n	8002862 <parse_touch_REDOD_bar+0x8e>
                reset_parsing_touch_REDOD_bar();  // Reset on unexpected character
 800280e:	f7ff ffd5 	bl	80027bc <reset_parsing_touch_REDOD_bar>
            break;
 8002812:	e026      	b.n	8002862 <parse_touch_REDOD_bar+0x8e>
        case GOT_REDOD_R:
            if (c == 'E') {
 8002814:	79fb      	ldrb	r3, [r7, #7]
 8002816:	2b45      	cmp	r3, #69	; 0x45
 8002818:	d103      	bne.n	8002822 <parse_touch_REDOD_bar+0x4e>
                touch_REDOD_bar_parser = GOT_REDOD_E;
 800281a:	4b14      	ldr	r3, [pc, #80]	; (800286c <parse_touch_REDOD_bar+0x98>)
 800281c:	2202      	movs	r2, #2
 800281e:	701a      	strb	r2, [r3, #0]
            } else {
                reset_parsing_touch_REDOD_bar();  // Reset on unexpected character
            }
            break;
 8002820:	e01f      	b.n	8002862 <parse_touch_REDOD_bar+0x8e>
                reset_parsing_touch_REDOD_bar();  // Reset on unexpected character
 8002822:	f7ff ffcb 	bl	80027bc <reset_parsing_touch_REDOD_bar>
            break;
 8002826:	e01c      	b.n	8002862 <parse_touch_REDOD_bar+0x8e>
        case GOT_REDOD_E:
            if (c == 'D') {
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	2b44      	cmp	r3, #68	; 0x44
 800282c:	d103      	bne.n	8002836 <parse_touch_REDOD_bar+0x62>
                touch_REDOD_bar_parser = GOT_REDOD_D1;
 800282e:	4b0f      	ldr	r3, [pc, #60]	; (800286c <parse_touch_REDOD_bar+0x98>)
 8002830:	2203      	movs	r2, #3
 8002832:	701a      	strb	r2, [r3, #0]
            } else {
                reset_parsing_touch_REDOD_bar();  // Reset on unexpected character
            }
            break;
 8002834:	e015      	b.n	8002862 <parse_touch_REDOD_bar+0x8e>
                reset_parsing_touch_REDOD_bar();  // Reset on unexpected character
 8002836:	f7ff ffc1 	bl	80027bc <reset_parsing_touch_REDOD_bar>
            break;
 800283a:	e012      	b.n	8002862 <parse_touch_REDOD_bar+0x8e>
        case GOT_REDOD_D1:
            if (c == 'O') {
 800283c:	79fb      	ldrb	r3, [r7, #7]
 800283e:	2b4f      	cmp	r3, #79	; 0x4f
 8002840:	d103      	bne.n	800284a <parse_touch_REDOD_bar+0x76>
                touch_REDOD_bar_parser = GOT_REDOD_O;
 8002842:	4b0a      	ldr	r3, [pc, #40]	; (800286c <parse_touch_REDOD_bar+0x98>)
 8002844:	2204      	movs	r2, #4
 8002846:	701a      	strb	r2, [r3, #0]
            } else {
                reset_parsing_touch_REDOD_bar();  // Reset on unexpected character
            }
            break;
 8002848:	e00b      	b.n	8002862 <parse_touch_REDOD_bar+0x8e>
                reset_parsing_touch_REDOD_bar();  // Reset on unexpected character
 800284a:	f7ff ffb7 	bl	80027bc <reset_parsing_touch_REDOD_bar>
            break;
 800284e:	e008      	b.n	8002862 <parse_touch_REDOD_bar+0x8e>
        case GOT_REDOD_O:
            if (c == 'D') {
 8002850:	79fb      	ldrb	r3, [r7, #7]
 8002852:	2b44      	cmp	r3, #68	; 0x44
 8002854:	d102      	bne.n	800285c <parse_touch_REDOD_bar+0x88>
            	RED_AT_ODD_flag = 1;
 8002856:	4b06      	ldr	r3, [pc, #24]	; (8002870 <parse_touch_REDOD_bar+0x9c>)
 8002858:	2201      	movs	r2, #1
 800285a:	701a      	strb	r2, [r3, #0]
            }
                reset_parsing_touch_REDOD_bar();  // Reset on unexpected character
 800285c:	f7ff ffae 	bl	80027bc <reset_parsing_touch_REDOD_bar>
            break;
 8002860:	bf00      	nop
    }
}
 8002862:	bf00      	nop
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20000133 	.word	0x20000133
 8002870:	20000120 	.word	0x20000120

08002874 <reset_parsing_touch_REDEV_bar>:
    GOT_REDEV_E2
} Touch_REDEV_bar_parser;

Touch_REDEV_bar_parser touch_REDEV_bar_parser = WAITING_FOR_REDEV_R;

void reset_parsing_touch_REDEV_bar() {
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
    touch_REDEV_bar_parser = WAITING_FOR_REDEV_R;
 8002878:	4b03      	ldr	r3, [pc, #12]	; (8002888 <reset_parsing_touch_REDEV_bar+0x14>)
 800287a:	2200      	movs	r2, #0
 800287c:	701a      	strb	r2, [r3, #0]
}
 800287e:	bf00      	nop
 8002880:	46bd      	mov	sp, r7
 8002882:	bc80      	pop	{r7}
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	20000134 	.word	0x20000134

0800288c <parse_touch_REDEV_bar>:

void parse_touch_REDEV_bar(char c) { // parses phrase "REDEV"
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	71fb      	strb	r3, [r7, #7]
    switch (touch_REDEV_bar_parser) {
 8002896:	4b23      	ldr	r3, [pc, #140]	; (8002924 <parse_touch_REDEV_bar+0x98>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b04      	cmp	r3, #4
 800289c:	d83d      	bhi.n	800291a <parse_touch_REDEV_bar+0x8e>
 800289e:	a201      	add	r2, pc, #4	; (adr r2, 80028a4 <parse_touch_REDEV_bar+0x18>)
 80028a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a4:	080028b9 	.word	0x080028b9
 80028a8:	080028cd 	.word	0x080028cd
 80028ac:	080028e1 	.word	0x080028e1
 80028b0:	080028f5 	.word	0x080028f5
 80028b4:	08002909 	.word	0x08002909
        case WAITING_FOR_REDEV_R:
            if (c == 'R') {
 80028b8:	79fb      	ldrb	r3, [r7, #7]
 80028ba:	2b52      	cmp	r3, #82	; 0x52
 80028bc:	d103      	bne.n	80028c6 <parse_touch_REDEV_bar+0x3a>
                touch_REDEV_bar_parser = GOT_REDEV_R;
 80028be:	4b19      	ldr	r3, [pc, #100]	; (8002924 <parse_touch_REDEV_bar+0x98>)
 80028c0:	2201      	movs	r2, #1
 80028c2:	701a      	strb	r2, [r3, #0]
            } else {
                reset_parsing_touch_REDEV_bar();  // Reset on unexpected character
            }
            break;
 80028c4:	e029      	b.n	800291a <parse_touch_REDEV_bar+0x8e>
                reset_parsing_touch_REDEV_bar();  // Reset on unexpected character
 80028c6:	f7ff ffd5 	bl	8002874 <reset_parsing_touch_REDEV_bar>
            break;
 80028ca:	e026      	b.n	800291a <parse_touch_REDEV_bar+0x8e>
        case GOT_REDEV_R:
            if (c == 'E') {
 80028cc:	79fb      	ldrb	r3, [r7, #7]
 80028ce:	2b45      	cmp	r3, #69	; 0x45
 80028d0:	d103      	bne.n	80028da <parse_touch_REDEV_bar+0x4e>
                touch_REDEV_bar_parser = GOT_REDEV_E;
 80028d2:	4b14      	ldr	r3, [pc, #80]	; (8002924 <parse_touch_REDEV_bar+0x98>)
 80028d4:	2202      	movs	r2, #2
 80028d6:	701a      	strb	r2, [r3, #0]
            } else {
                reset_parsing_touch_REDEV_bar();  // Reset on unexpected character
            }
            break;
 80028d8:	e01f      	b.n	800291a <parse_touch_REDEV_bar+0x8e>
                reset_parsing_touch_REDEV_bar();  // Reset on unexpected character
 80028da:	f7ff ffcb 	bl	8002874 <reset_parsing_touch_REDEV_bar>
            break;
 80028de:	e01c      	b.n	800291a <parse_touch_REDEV_bar+0x8e>
        case GOT_REDEV_E:
            if (c == 'D') {
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	2b44      	cmp	r3, #68	; 0x44
 80028e4:	d103      	bne.n	80028ee <parse_touch_REDEV_bar+0x62>
                touch_REDEV_bar_parser = GOT_REDEV_D1;
 80028e6:	4b0f      	ldr	r3, [pc, #60]	; (8002924 <parse_touch_REDEV_bar+0x98>)
 80028e8:	2203      	movs	r2, #3
 80028ea:	701a      	strb	r2, [r3, #0]
            } else {
                reset_parsing_touch_REDEV_bar();  // Reset on unexpected character
            }
            break;
 80028ec:	e015      	b.n	800291a <parse_touch_REDEV_bar+0x8e>
                reset_parsing_touch_REDEV_bar();  // Reset on unexpected character
 80028ee:	f7ff ffc1 	bl	8002874 <reset_parsing_touch_REDEV_bar>
            break;
 80028f2:	e012      	b.n	800291a <parse_touch_REDEV_bar+0x8e>
        case GOT_REDEV_D1:
            if (c == 'E') {
 80028f4:	79fb      	ldrb	r3, [r7, #7]
 80028f6:	2b45      	cmp	r3, #69	; 0x45
 80028f8:	d103      	bne.n	8002902 <parse_touch_REDEV_bar+0x76>
                touch_REDEV_bar_parser = GOT_REDEV_E2;
 80028fa:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <parse_touch_REDEV_bar+0x98>)
 80028fc:	2204      	movs	r2, #4
 80028fe:	701a      	strb	r2, [r3, #0]
            } else {
                reset_parsing_touch_REDEV_bar();  // Reset on unexpected character
            }
            break;
 8002900:	e00b      	b.n	800291a <parse_touch_REDEV_bar+0x8e>
                reset_parsing_touch_REDEV_bar();  // Reset on unexpected character
 8002902:	f7ff ffb7 	bl	8002874 <reset_parsing_touch_REDEV_bar>
            break;
 8002906:	e008      	b.n	800291a <parse_touch_REDEV_bar+0x8e>
        case GOT_REDEV_E2:
            if (c == 'V') {
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	2b56      	cmp	r3, #86	; 0x56
 800290c:	d102      	bne.n	8002914 <parse_touch_REDEV_bar+0x88>
            	RED_AT_EVEN_flag = 1; //set flag for RED at EVEN road
 800290e:	4b06      	ldr	r3, [pc, #24]	; (8002928 <parse_touch_REDEV_bar+0x9c>)
 8002910:	2201      	movs	r2, #1
 8002912:	701a      	strb	r2, [r3, #0]
            }
                reset_parsing_touch_REDEV_bar();  // Reset on unexpected character
 8002914:	f7ff ffae 	bl	8002874 <reset_parsing_touch_REDEV_bar>
            break;
 8002918:	bf00      	nop
    }
}
 800291a:	bf00      	nop
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	20000134 	.word	0x20000134
 8002928:	20000121 	.word	0x20000121

0800292c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800292c:	f7ff fc18 	bl	8002160 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002930:	480b      	ldr	r0, [pc, #44]	; (8002960 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002932:	490c      	ldr	r1, [pc, #48]	; (8002964 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002934:	4a0c      	ldr	r2, [pc, #48]	; (8002968 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002938:	e002      	b.n	8002940 <LoopCopyDataInit>

0800293a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800293a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800293c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800293e:	3304      	adds	r3, #4

08002940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002944:	d3f9      	bcc.n	800293a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002946:	4a09      	ldr	r2, [pc, #36]	; (800296c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002948:	4c09      	ldr	r4, [pc, #36]	; (8002970 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800294a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800294c:	e001      	b.n	8002952 <LoopFillZerobss>

0800294e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800294e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002950:	3204      	adds	r2, #4

08002952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002954:	d3fb      	bcc.n	800294e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002956:	f002 fe57 	bl	8005608 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800295a:	f7fe fcb1 	bl	80012c0 <main>
  bx lr
 800295e:	4770      	bx	lr
  ldr r0, =_sdata
 8002960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002964:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8002968:	08006008 	.word	0x08006008
  ldr r2, =_sbss
 800296c:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 8002970:	20000244 	.word	0x20000244

08002974 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002974:	e7fe      	b.n	8002974 <ADC1_2_IRQHandler>
	...

08002978 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800297c:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <HAL_Init+0x28>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a07      	ldr	r2, [pc, #28]	; (80029a0 <HAL_Init+0x28>)
 8002982:	f043 0310 	orr.w	r3, r3, #16
 8002986:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002988:	2003      	movs	r0, #3
 800298a:	f000 f947 	bl	8002c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800298e:	2000      	movs	r0, #0
 8002990:	f000 f808 	bl	80029a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002994:	f7ff fa72 	bl	8001e7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40022000 	.word	0x40022000

080029a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029ac:	4b12      	ldr	r3, [pc, #72]	; (80029f8 <HAL_InitTick+0x54>)
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	4b12      	ldr	r3, [pc, #72]	; (80029fc <HAL_InitTick+0x58>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	4619      	mov	r1, r3
 80029b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80029be:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 f95f 	bl	8002c86 <HAL_SYSTICK_Config>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e00e      	b.n	80029f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b0f      	cmp	r3, #15
 80029d6:	d80a      	bhi.n	80029ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029d8:	2200      	movs	r2, #0
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	f04f 30ff 	mov.w	r0, #4294967295
 80029e0:	f000 f927 	bl	8002c32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029e4:	4a06      	ldr	r2, [pc, #24]	; (8002a00 <HAL_InitTick+0x5c>)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
 80029ec:	e000      	b.n	80029f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	2000006c 	.word	0x2000006c
 80029fc:	20000074 	.word	0x20000074
 8002a00:	20000070 	.word	0x20000070

08002a04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a08:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <HAL_IncTick+0x1c>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <HAL_IncTick+0x20>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4413      	add	r3, r2
 8002a14:	4a03      	ldr	r2, [pc, #12]	; (8002a24 <HAL_IncTick+0x20>)
 8002a16:	6013      	str	r3, [r2, #0]
}
 8002a18:	bf00      	nop
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr
 8002a20:	20000074 	.word	0x20000074
 8002a24:	20000230 	.word	0x20000230

08002a28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a2c:	4b02      	ldr	r3, [pc, #8]	; (8002a38 <HAL_GetTick+0x10>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr
 8002a38:	20000230 	.word	0x20000230

08002a3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a44:	f7ff fff0 	bl	8002a28 <HAL_GetTick>
 8002a48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a54:	d005      	beq.n	8002a62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a56:	4b0a      	ldr	r3, [pc, #40]	; (8002a80 <HAL_Delay+0x44>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4413      	add	r3, r2
 8002a60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a62:	bf00      	nop
 8002a64:	f7ff ffe0 	bl	8002a28 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d8f7      	bhi.n	8002a64 <HAL_Delay+0x28>
  {
  }
}
 8002a74:	bf00      	nop
 8002a76:	bf00      	nop
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	20000074 	.word	0x20000074

08002a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a94:	4b0c      	ldr	r3, [pc, #48]	; (8002ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ab6:	4a04      	ldr	r2, [pc, #16]	; (8002ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	60d3      	str	r3, [r2, #12]
}
 8002abc:	bf00      	nop
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bc80      	pop	{r7}
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	e000ed00 	.word	0xe000ed00

08002acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ad0:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	0a1b      	lsrs	r3, r3, #8
 8002ad6:	f003 0307 	and.w	r3, r3, #7
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc80      	pop	{r7}
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	e000ed00 	.word	0xe000ed00

08002ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	db0b      	blt.n	8002b12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002afa:	79fb      	ldrb	r3, [r7, #7]
 8002afc:	f003 021f 	and.w	r2, r3, #31
 8002b00:	4906      	ldr	r1, [pc, #24]	; (8002b1c <__NVIC_EnableIRQ+0x34>)
 8002b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	2001      	movs	r0, #1
 8002b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr
 8002b1c:	e000e100 	.word	0xe000e100

08002b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	6039      	str	r1, [r7, #0]
 8002b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	db0a      	blt.n	8002b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	490c      	ldr	r1, [pc, #48]	; (8002b6c <__NVIC_SetPriority+0x4c>)
 8002b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3e:	0112      	lsls	r2, r2, #4
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	440b      	add	r3, r1
 8002b44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b48:	e00a      	b.n	8002b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	4908      	ldr	r1, [pc, #32]	; (8002b70 <__NVIC_SetPriority+0x50>)
 8002b50:	79fb      	ldrb	r3, [r7, #7]
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	3b04      	subs	r3, #4
 8002b58:	0112      	lsls	r2, r2, #4
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	761a      	strb	r2, [r3, #24]
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	e000e100 	.word	0xe000e100
 8002b70:	e000ed00 	.word	0xe000ed00

08002b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b089      	sub	sp, #36	; 0x24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	f1c3 0307 	rsb	r3, r3, #7
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	bf28      	it	cs
 8002b92:	2304      	movcs	r3, #4
 8002b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	3304      	adds	r3, #4
 8002b9a:	2b06      	cmp	r3, #6
 8002b9c:	d902      	bls.n	8002ba4 <NVIC_EncodePriority+0x30>
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	3b03      	subs	r3, #3
 8002ba2:	e000      	b.n	8002ba6 <NVIC_EncodePriority+0x32>
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43da      	mvns	r2, r3
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	401a      	ands	r2, r3
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc6:	43d9      	mvns	r1, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bcc:	4313      	orrs	r3, r2
         );
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3724      	adds	r7, #36	; 0x24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002be8:	d301      	bcc.n	8002bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bea:	2301      	movs	r3, #1
 8002bec:	e00f      	b.n	8002c0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bee:	4a0a      	ldr	r2, [pc, #40]	; (8002c18 <SysTick_Config+0x40>)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bf6:	210f      	movs	r1, #15
 8002bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bfc:	f7ff ff90 	bl	8002b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c00:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <SysTick_Config+0x40>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c06:	4b04      	ldr	r3, [pc, #16]	; (8002c18 <SysTick_Config+0x40>)
 8002c08:	2207      	movs	r2, #7
 8002c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	e000e010 	.word	0xe000e010

08002c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7ff ff2d 	bl	8002a84 <__NVIC_SetPriorityGrouping>
}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b086      	sub	sp, #24
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	4603      	mov	r3, r0
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	607a      	str	r2, [r7, #4]
 8002c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c44:	f7ff ff42 	bl	8002acc <__NVIC_GetPriorityGrouping>
 8002c48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	68b9      	ldr	r1, [r7, #8]
 8002c4e:	6978      	ldr	r0, [r7, #20]
 8002c50:	f7ff ff90 	bl	8002b74 <NVIC_EncodePriority>
 8002c54:	4602      	mov	r2, r0
 8002c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff ff5f 	bl	8002b20 <__NVIC_SetPriority>
}
 8002c62:	bf00      	nop
 8002c64:	3718      	adds	r7, #24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b082      	sub	sp, #8
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	4603      	mov	r3, r0
 8002c72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff ff35 	bl	8002ae8 <__NVIC_EnableIRQ>
}
 8002c7e:	bf00      	nop
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b082      	sub	sp, #8
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7ff ffa2 	bl	8002bd8 <SysTick_Config>
 8002c94:	4603      	mov	r3, r0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b085      	sub	sp, #20
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d008      	beq.n	8002cc8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2204      	movs	r2, #4
 8002cba:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e020      	b.n	8002d0a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 020e 	bic.w	r2, r2, #14
 8002cd6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0201 	bic.w	r2, r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3714      	adds	r7, #20
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr

08002d14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d005      	beq.n	8002d38 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2204      	movs	r2, #4
 8002d30:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	73fb      	strb	r3, [r7, #15]
 8002d36:	e051      	b.n	8002ddc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 020e 	bic.w	r2, r2, #14
 8002d46:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 0201 	bic.w	r2, r2, #1
 8002d56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a22      	ldr	r2, [pc, #136]	; (8002de8 <HAL_DMA_Abort_IT+0xd4>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d029      	beq.n	8002db6 <HAL_DMA_Abort_IT+0xa2>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a21      	ldr	r2, [pc, #132]	; (8002dec <HAL_DMA_Abort_IT+0xd8>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d022      	beq.n	8002db2 <HAL_DMA_Abort_IT+0x9e>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a1f      	ldr	r2, [pc, #124]	; (8002df0 <HAL_DMA_Abort_IT+0xdc>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d01a      	beq.n	8002dac <HAL_DMA_Abort_IT+0x98>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a1e      	ldr	r2, [pc, #120]	; (8002df4 <HAL_DMA_Abort_IT+0xe0>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d012      	beq.n	8002da6 <HAL_DMA_Abort_IT+0x92>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a1c      	ldr	r2, [pc, #112]	; (8002df8 <HAL_DMA_Abort_IT+0xe4>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d00a      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x8c>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a1b      	ldr	r2, [pc, #108]	; (8002dfc <HAL_DMA_Abort_IT+0xe8>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d102      	bne.n	8002d9a <HAL_DMA_Abort_IT+0x86>
 8002d94:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002d98:	e00e      	b.n	8002db8 <HAL_DMA_Abort_IT+0xa4>
 8002d9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d9e:	e00b      	b.n	8002db8 <HAL_DMA_Abort_IT+0xa4>
 8002da0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002da4:	e008      	b.n	8002db8 <HAL_DMA_Abort_IT+0xa4>
 8002da6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002daa:	e005      	b.n	8002db8 <HAL_DMA_Abort_IT+0xa4>
 8002dac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002db0:	e002      	b.n	8002db8 <HAL_DMA_Abort_IT+0xa4>
 8002db2:	2310      	movs	r3, #16
 8002db4:	e000      	b.n	8002db8 <HAL_DMA_Abort_IT+0xa4>
 8002db6:	2301      	movs	r3, #1
 8002db8:	4a11      	ldr	r2, [pc, #68]	; (8002e00 <HAL_DMA_Abort_IT+0xec>)
 8002dba:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d003      	beq.n	8002ddc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	4798      	blx	r3
    } 
  }
  return status;
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40020008 	.word	0x40020008
 8002dec:	4002001c 	.word	0x4002001c
 8002df0:	40020030 	.word	0x40020030
 8002df4:	40020044 	.word	0x40020044
 8002df8:	40020058 	.word	0x40020058
 8002dfc:	4002006c 	.word	0x4002006c
 8002e00:	40020000 	.word	0x40020000

08002e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b08b      	sub	sp, #44	; 0x2c
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e12:	2300      	movs	r3, #0
 8002e14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e16:	e169      	b.n	80030ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e18:	2201      	movs	r2, #1
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	69fa      	ldr	r2, [r7, #28]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	f040 8158 	bne.w	80030e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	4a9a      	ldr	r2, [pc, #616]	; (80030a4 <HAL_GPIO_Init+0x2a0>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d05e      	beq.n	8002efe <HAL_GPIO_Init+0xfa>
 8002e40:	4a98      	ldr	r2, [pc, #608]	; (80030a4 <HAL_GPIO_Init+0x2a0>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d875      	bhi.n	8002f32 <HAL_GPIO_Init+0x12e>
 8002e46:	4a98      	ldr	r2, [pc, #608]	; (80030a8 <HAL_GPIO_Init+0x2a4>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d058      	beq.n	8002efe <HAL_GPIO_Init+0xfa>
 8002e4c:	4a96      	ldr	r2, [pc, #600]	; (80030a8 <HAL_GPIO_Init+0x2a4>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d86f      	bhi.n	8002f32 <HAL_GPIO_Init+0x12e>
 8002e52:	4a96      	ldr	r2, [pc, #600]	; (80030ac <HAL_GPIO_Init+0x2a8>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d052      	beq.n	8002efe <HAL_GPIO_Init+0xfa>
 8002e58:	4a94      	ldr	r2, [pc, #592]	; (80030ac <HAL_GPIO_Init+0x2a8>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d869      	bhi.n	8002f32 <HAL_GPIO_Init+0x12e>
 8002e5e:	4a94      	ldr	r2, [pc, #592]	; (80030b0 <HAL_GPIO_Init+0x2ac>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d04c      	beq.n	8002efe <HAL_GPIO_Init+0xfa>
 8002e64:	4a92      	ldr	r2, [pc, #584]	; (80030b0 <HAL_GPIO_Init+0x2ac>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d863      	bhi.n	8002f32 <HAL_GPIO_Init+0x12e>
 8002e6a:	4a92      	ldr	r2, [pc, #584]	; (80030b4 <HAL_GPIO_Init+0x2b0>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d046      	beq.n	8002efe <HAL_GPIO_Init+0xfa>
 8002e70:	4a90      	ldr	r2, [pc, #576]	; (80030b4 <HAL_GPIO_Init+0x2b0>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d85d      	bhi.n	8002f32 <HAL_GPIO_Init+0x12e>
 8002e76:	2b12      	cmp	r3, #18
 8002e78:	d82a      	bhi.n	8002ed0 <HAL_GPIO_Init+0xcc>
 8002e7a:	2b12      	cmp	r3, #18
 8002e7c:	d859      	bhi.n	8002f32 <HAL_GPIO_Init+0x12e>
 8002e7e:	a201      	add	r2, pc, #4	; (adr r2, 8002e84 <HAL_GPIO_Init+0x80>)
 8002e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e84:	08002eff 	.word	0x08002eff
 8002e88:	08002ed9 	.word	0x08002ed9
 8002e8c:	08002eeb 	.word	0x08002eeb
 8002e90:	08002f2d 	.word	0x08002f2d
 8002e94:	08002f33 	.word	0x08002f33
 8002e98:	08002f33 	.word	0x08002f33
 8002e9c:	08002f33 	.word	0x08002f33
 8002ea0:	08002f33 	.word	0x08002f33
 8002ea4:	08002f33 	.word	0x08002f33
 8002ea8:	08002f33 	.word	0x08002f33
 8002eac:	08002f33 	.word	0x08002f33
 8002eb0:	08002f33 	.word	0x08002f33
 8002eb4:	08002f33 	.word	0x08002f33
 8002eb8:	08002f33 	.word	0x08002f33
 8002ebc:	08002f33 	.word	0x08002f33
 8002ec0:	08002f33 	.word	0x08002f33
 8002ec4:	08002f33 	.word	0x08002f33
 8002ec8:	08002ee1 	.word	0x08002ee1
 8002ecc:	08002ef5 	.word	0x08002ef5
 8002ed0:	4a79      	ldr	r2, [pc, #484]	; (80030b8 <HAL_GPIO_Init+0x2b4>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d013      	beq.n	8002efe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ed6:	e02c      	b.n	8002f32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	623b      	str	r3, [r7, #32]
          break;
 8002ede:	e029      	b.n	8002f34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	623b      	str	r3, [r7, #32]
          break;
 8002ee8:	e024      	b.n	8002f34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	3308      	adds	r3, #8
 8002ef0:	623b      	str	r3, [r7, #32]
          break;
 8002ef2:	e01f      	b.n	8002f34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	330c      	adds	r3, #12
 8002efa:	623b      	str	r3, [r7, #32]
          break;
 8002efc:	e01a      	b.n	8002f34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d102      	bne.n	8002f0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f06:	2304      	movs	r3, #4
 8002f08:	623b      	str	r3, [r7, #32]
          break;
 8002f0a:	e013      	b.n	8002f34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d105      	bne.n	8002f20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f14:	2308      	movs	r3, #8
 8002f16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69fa      	ldr	r2, [r7, #28]
 8002f1c:	611a      	str	r2, [r3, #16]
          break;
 8002f1e:	e009      	b.n	8002f34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f20:	2308      	movs	r3, #8
 8002f22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	69fa      	ldr	r2, [r7, #28]
 8002f28:	615a      	str	r2, [r3, #20]
          break;
 8002f2a:	e003      	b.n	8002f34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	623b      	str	r3, [r7, #32]
          break;
 8002f30:	e000      	b.n	8002f34 <HAL_GPIO_Init+0x130>
          break;
 8002f32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	2bff      	cmp	r3, #255	; 0xff
 8002f38:	d801      	bhi.n	8002f3e <HAL_GPIO_Init+0x13a>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	e001      	b.n	8002f42 <HAL_GPIO_Init+0x13e>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	3304      	adds	r3, #4
 8002f42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	2bff      	cmp	r3, #255	; 0xff
 8002f48:	d802      	bhi.n	8002f50 <HAL_GPIO_Init+0x14c>
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	e002      	b.n	8002f56 <HAL_GPIO_Init+0x152>
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	3b08      	subs	r3, #8
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	210f      	movs	r1, #15
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	fa01 f303 	lsl.w	r3, r1, r3
 8002f64:	43db      	mvns	r3, r3
 8002f66:	401a      	ands	r2, r3
 8002f68:	6a39      	ldr	r1, [r7, #32]
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f70:	431a      	orrs	r2, r3
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 80b1 	beq.w	80030e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f84:	4b4d      	ldr	r3, [pc, #308]	; (80030bc <HAL_GPIO_Init+0x2b8>)
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	4a4c      	ldr	r2, [pc, #304]	; (80030bc <HAL_GPIO_Init+0x2b8>)
 8002f8a:	f043 0301 	orr.w	r3, r3, #1
 8002f8e:	6193      	str	r3, [r2, #24]
 8002f90:	4b4a      	ldr	r3, [pc, #296]	; (80030bc <HAL_GPIO_Init+0x2b8>)
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	60bb      	str	r3, [r7, #8]
 8002f9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f9c:	4a48      	ldr	r2, [pc, #288]	; (80030c0 <HAL_GPIO_Init+0x2bc>)
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	089b      	lsrs	r3, r3, #2
 8002fa2:	3302      	adds	r3, #2
 8002fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fa8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	f003 0303 	and.w	r3, r3, #3
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	220f      	movs	r2, #15
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a40      	ldr	r2, [pc, #256]	; (80030c4 <HAL_GPIO_Init+0x2c0>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d013      	beq.n	8002ff0 <HAL_GPIO_Init+0x1ec>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a3f      	ldr	r2, [pc, #252]	; (80030c8 <HAL_GPIO_Init+0x2c4>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d00d      	beq.n	8002fec <HAL_GPIO_Init+0x1e8>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a3e      	ldr	r2, [pc, #248]	; (80030cc <HAL_GPIO_Init+0x2c8>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d007      	beq.n	8002fe8 <HAL_GPIO_Init+0x1e4>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a3d      	ldr	r2, [pc, #244]	; (80030d0 <HAL_GPIO_Init+0x2cc>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d101      	bne.n	8002fe4 <HAL_GPIO_Init+0x1e0>
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e006      	b.n	8002ff2 <HAL_GPIO_Init+0x1ee>
 8002fe4:	2304      	movs	r3, #4
 8002fe6:	e004      	b.n	8002ff2 <HAL_GPIO_Init+0x1ee>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e002      	b.n	8002ff2 <HAL_GPIO_Init+0x1ee>
 8002fec:	2301      	movs	r3, #1
 8002fee:	e000      	b.n	8002ff2 <HAL_GPIO_Init+0x1ee>
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff4:	f002 0203 	and.w	r2, r2, #3
 8002ff8:	0092      	lsls	r2, r2, #2
 8002ffa:	4093      	lsls	r3, r2
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003002:	492f      	ldr	r1, [pc, #188]	; (80030c0 <HAL_GPIO_Init+0x2bc>)
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	089b      	lsrs	r3, r3, #2
 8003008:	3302      	adds	r3, #2
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d006      	beq.n	800302a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800301c:	4b2d      	ldr	r3, [pc, #180]	; (80030d4 <HAL_GPIO_Init+0x2d0>)
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	492c      	ldr	r1, [pc, #176]	; (80030d4 <HAL_GPIO_Init+0x2d0>)
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	4313      	orrs	r3, r2
 8003026:	608b      	str	r3, [r1, #8]
 8003028:	e006      	b.n	8003038 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800302a:	4b2a      	ldr	r3, [pc, #168]	; (80030d4 <HAL_GPIO_Init+0x2d0>)
 800302c:	689a      	ldr	r2, [r3, #8]
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	43db      	mvns	r3, r3
 8003032:	4928      	ldr	r1, [pc, #160]	; (80030d4 <HAL_GPIO_Init+0x2d0>)
 8003034:	4013      	ands	r3, r2
 8003036:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d006      	beq.n	8003052 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003044:	4b23      	ldr	r3, [pc, #140]	; (80030d4 <HAL_GPIO_Init+0x2d0>)
 8003046:	68da      	ldr	r2, [r3, #12]
 8003048:	4922      	ldr	r1, [pc, #136]	; (80030d4 <HAL_GPIO_Init+0x2d0>)
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	4313      	orrs	r3, r2
 800304e:	60cb      	str	r3, [r1, #12]
 8003050:	e006      	b.n	8003060 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003052:	4b20      	ldr	r3, [pc, #128]	; (80030d4 <HAL_GPIO_Init+0x2d0>)
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	43db      	mvns	r3, r3
 800305a:	491e      	ldr	r1, [pc, #120]	; (80030d4 <HAL_GPIO_Init+0x2d0>)
 800305c:	4013      	ands	r3, r2
 800305e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d006      	beq.n	800307a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800306c:	4b19      	ldr	r3, [pc, #100]	; (80030d4 <HAL_GPIO_Init+0x2d0>)
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	4918      	ldr	r1, [pc, #96]	; (80030d4 <HAL_GPIO_Init+0x2d0>)
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	4313      	orrs	r3, r2
 8003076:	604b      	str	r3, [r1, #4]
 8003078:	e006      	b.n	8003088 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800307a:	4b16      	ldr	r3, [pc, #88]	; (80030d4 <HAL_GPIO_Init+0x2d0>)
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	43db      	mvns	r3, r3
 8003082:	4914      	ldr	r1, [pc, #80]	; (80030d4 <HAL_GPIO_Init+0x2d0>)
 8003084:	4013      	ands	r3, r2
 8003086:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d021      	beq.n	80030d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003094:	4b0f      	ldr	r3, [pc, #60]	; (80030d4 <HAL_GPIO_Init+0x2d0>)
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	490e      	ldr	r1, [pc, #56]	; (80030d4 <HAL_GPIO_Init+0x2d0>)
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	4313      	orrs	r3, r2
 800309e:	600b      	str	r3, [r1, #0]
 80030a0:	e021      	b.n	80030e6 <HAL_GPIO_Init+0x2e2>
 80030a2:	bf00      	nop
 80030a4:	10320000 	.word	0x10320000
 80030a8:	10310000 	.word	0x10310000
 80030ac:	10220000 	.word	0x10220000
 80030b0:	10210000 	.word	0x10210000
 80030b4:	10120000 	.word	0x10120000
 80030b8:	10110000 	.word	0x10110000
 80030bc:	40021000 	.word	0x40021000
 80030c0:	40010000 	.word	0x40010000
 80030c4:	40010800 	.word	0x40010800
 80030c8:	40010c00 	.word	0x40010c00
 80030cc:	40011000 	.word	0x40011000
 80030d0:	40011400 	.word	0x40011400
 80030d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80030d8:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <HAL_GPIO_Init+0x304>)
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	43db      	mvns	r3, r3
 80030e0:	4909      	ldr	r1, [pc, #36]	; (8003108 <HAL_GPIO_Init+0x304>)
 80030e2:	4013      	ands	r3, r2
 80030e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	3301      	adds	r3, #1
 80030ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f2:	fa22 f303 	lsr.w	r3, r2, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f47f ae8e 	bne.w	8002e18 <HAL_GPIO_Init+0x14>
  }
}
 80030fc:	bf00      	nop
 80030fe:	bf00      	nop
 8003100:	372c      	adds	r7, #44	; 0x2c
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr
 8003108:	40010400 	.word	0x40010400

0800310c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	460b      	mov	r3, r1
 8003116:	807b      	strh	r3, [r7, #2]
 8003118:	4613      	mov	r3, r2
 800311a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800311c:	787b      	ldrb	r3, [r7, #1]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d003      	beq.n	800312a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003122:	887a      	ldrh	r2, [r7, #2]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003128:	e003      	b.n	8003132 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800312a:	887b      	ldrh	r3, [r7, #2]
 800312c:	041a      	lsls	r2, r3, #16
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	611a      	str	r2, [r3, #16]
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr

0800313c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	460b      	mov	r3, r1
 8003146:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800314e:	887a      	ldrh	r2, [r7, #2]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4013      	ands	r3, r2
 8003154:	041a      	lsls	r2, r3, #16
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	43d9      	mvns	r1, r3
 800315a:	887b      	ldrh	r3, [r7, #2]
 800315c:	400b      	ands	r3, r1
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	611a      	str	r2, [r3, #16]
}
 8003164:	bf00      	nop
 8003166:	3714      	adds	r7, #20
 8003168:	46bd      	mov	sp, r7
 800316a:	bc80      	pop	{r7}
 800316c:	4770      	bx	lr
	...

08003170 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800317a:	4b08      	ldr	r3, [pc, #32]	; (800319c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800317c:	695a      	ldr	r2, [r3, #20]
 800317e:	88fb      	ldrh	r3, [r7, #6]
 8003180:	4013      	ands	r3, r2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d006      	beq.n	8003194 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003186:	4a05      	ldr	r2, [pc, #20]	; (800319c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003188:	88fb      	ldrh	r3, [r7, #6]
 800318a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800318c:	88fb      	ldrh	r3, [r7, #6]
 800318e:	4618      	mov	r0, r3
 8003190:	f000 f806 	bl	80031a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003194:	bf00      	nop
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40010400 	.word	0x40010400

080031a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	4603      	mov	r3, r0
 80031a8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr

080031b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e12b      	b.n	800341e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d106      	bne.n	80031e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7fe fe80 	bl	8001ee0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2224      	movs	r2, #36	; 0x24
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0201 	bic.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003206:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003216:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003218:	f001 f830 	bl	800427c <HAL_RCC_GetPCLK1Freq>
 800321c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	4a81      	ldr	r2, [pc, #516]	; (8003428 <HAL_I2C_Init+0x274>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d807      	bhi.n	8003238 <HAL_I2C_Init+0x84>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4a80      	ldr	r2, [pc, #512]	; (800342c <HAL_I2C_Init+0x278>)
 800322c:	4293      	cmp	r3, r2
 800322e:	bf94      	ite	ls
 8003230:	2301      	movls	r3, #1
 8003232:	2300      	movhi	r3, #0
 8003234:	b2db      	uxtb	r3, r3
 8003236:	e006      	b.n	8003246 <HAL_I2C_Init+0x92>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4a7d      	ldr	r2, [pc, #500]	; (8003430 <HAL_I2C_Init+0x27c>)
 800323c:	4293      	cmp	r3, r2
 800323e:	bf94      	ite	ls
 8003240:	2301      	movls	r3, #1
 8003242:	2300      	movhi	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e0e7      	b.n	800341e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	4a78      	ldr	r2, [pc, #480]	; (8003434 <HAL_I2C_Init+0x280>)
 8003252:	fba2 2303 	umull	r2, r3, r2, r3
 8003256:	0c9b      	lsrs	r3, r3, #18
 8003258:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	430a      	orrs	r2, r1
 800326c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	4a6a      	ldr	r2, [pc, #424]	; (8003428 <HAL_I2C_Init+0x274>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d802      	bhi.n	8003288 <HAL_I2C_Init+0xd4>
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	3301      	adds	r3, #1
 8003286:	e009      	b.n	800329c <HAL_I2C_Init+0xe8>
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800328e:	fb02 f303 	mul.w	r3, r2, r3
 8003292:	4a69      	ldr	r2, [pc, #420]	; (8003438 <HAL_I2C_Init+0x284>)
 8003294:	fba2 2303 	umull	r2, r3, r2, r3
 8003298:	099b      	lsrs	r3, r3, #6
 800329a:	3301      	adds	r3, #1
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6812      	ldr	r2, [r2, #0]
 80032a0:	430b      	orrs	r3, r1
 80032a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80032ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	495c      	ldr	r1, [pc, #368]	; (8003428 <HAL_I2C_Init+0x274>)
 80032b8:	428b      	cmp	r3, r1
 80032ba:	d819      	bhi.n	80032f0 <HAL_I2C_Init+0x13c>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	1e59      	subs	r1, r3, #1
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80032ca:	1c59      	adds	r1, r3, #1
 80032cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80032d0:	400b      	ands	r3, r1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00a      	beq.n	80032ec <HAL_I2C_Init+0x138>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	1e59      	subs	r1, r3, #1
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80032e4:	3301      	adds	r3, #1
 80032e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ea:	e051      	b.n	8003390 <HAL_I2C_Init+0x1dc>
 80032ec:	2304      	movs	r3, #4
 80032ee:	e04f      	b.n	8003390 <HAL_I2C_Init+0x1dc>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d111      	bne.n	800331c <HAL_I2C_Init+0x168>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	1e58      	subs	r0, r3, #1
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6859      	ldr	r1, [r3, #4]
 8003300:	460b      	mov	r3, r1
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	440b      	add	r3, r1
 8003306:	fbb0 f3f3 	udiv	r3, r0, r3
 800330a:	3301      	adds	r3, #1
 800330c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003310:	2b00      	cmp	r3, #0
 8003312:	bf0c      	ite	eq
 8003314:	2301      	moveq	r3, #1
 8003316:	2300      	movne	r3, #0
 8003318:	b2db      	uxtb	r3, r3
 800331a:	e012      	b.n	8003342 <HAL_I2C_Init+0x18e>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	1e58      	subs	r0, r3, #1
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6859      	ldr	r1, [r3, #4]
 8003324:	460b      	mov	r3, r1
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	0099      	lsls	r1, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003332:	3301      	adds	r3, #1
 8003334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003338:	2b00      	cmp	r3, #0
 800333a:	bf0c      	ite	eq
 800333c:	2301      	moveq	r3, #1
 800333e:	2300      	movne	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <HAL_I2C_Init+0x196>
 8003346:	2301      	movs	r3, #1
 8003348:	e022      	b.n	8003390 <HAL_I2C_Init+0x1dc>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10e      	bne.n	8003370 <HAL_I2C_Init+0x1bc>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1e58      	subs	r0, r3, #1
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6859      	ldr	r1, [r3, #4]
 800335a:	460b      	mov	r3, r1
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	440b      	add	r3, r1
 8003360:	fbb0 f3f3 	udiv	r3, r0, r3
 8003364:	3301      	adds	r3, #1
 8003366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800336a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800336e:	e00f      	b.n	8003390 <HAL_I2C_Init+0x1dc>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	1e58      	subs	r0, r3, #1
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6859      	ldr	r1, [r3, #4]
 8003378:	460b      	mov	r3, r1
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	440b      	add	r3, r1
 800337e:	0099      	lsls	r1, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	fbb0 f3f3 	udiv	r3, r0, r3
 8003386:	3301      	adds	r3, #1
 8003388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800338c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	6809      	ldr	r1, [r1, #0]
 8003394:	4313      	orrs	r3, r2
 8003396:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	69da      	ldr	r2, [r3, #28]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80033be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6911      	ldr	r1, [r2, #16]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	68d2      	ldr	r2, [r2, #12]
 80033ca:	4311      	orrs	r1, r2
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6812      	ldr	r2, [r2, #0]
 80033d0:	430b      	orrs	r3, r1
 80033d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	695a      	ldr	r2, [r3, #20]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	431a      	orrs	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 0201 	orr.w	r2, r2, #1
 80033fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2220      	movs	r2, #32
 800340a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	000186a0 	.word	0x000186a0
 800342c:	001e847f 	.word	0x001e847f
 8003430:	003d08ff 	.word	0x003d08ff
 8003434:	431bde83 	.word	0x431bde83
 8003438:	10624dd3 	.word	0x10624dd3

0800343c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b088      	sub	sp, #32
 8003440:	af02      	add	r7, sp, #8
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	607a      	str	r2, [r7, #4]
 8003446:	461a      	mov	r2, r3
 8003448:	460b      	mov	r3, r1
 800344a:	817b      	strh	r3, [r7, #10]
 800344c:	4613      	mov	r3, r2
 800344e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003450:	f7ff faea 	bl	8002a28 <HAL_GetTick>
 8003454:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b20      	cmp	r3, #32
 8003460:	f040 80e0 	bne.w	8003624 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	2319      	movs	r3, #25
 800346a:	2201      	movs	r2, #1
 800346c:	4970      	ldr	r1, [pc, #448]	; (8003630 <HAL_I2C_Master_Transmit+0x1f4>)
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 f964 	bl	800373c <I2C_WaitOnFlagUntilTimeout>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800347a:	2302      	movs	r3, #2
 800347c:	e0d3      	b.n	8003626 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003484:	2b01      	cmp	r3, #1
 8003486:	d101      	bne.n	800348c <HAL_I2C_Master_Transmit+0x50>
 8003488:	2302      	movs	r3, #2
 800348a:	e0cc      	b.n	8003626 <HAL_I2C_Master_Transmit+0x1ea>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d007      	beq.n	80034b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f042 0201 	orr.w	r2, r2, #1
 80034b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2221      	movs	r2, #33	; 0x21
 80034c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2210      	movs	r2, #16
 80034ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	893a      	ldrh	r2, [r7, #8]
 80034e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	4a50      	ldr	r2, [pc, #320]	; (8003634 <HAL_I2C_Master_Transmit+0x1f8>)
 80034f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034f4:	8979      	ldrh	r1, [r7, #10]
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	6a3a      	ldr	r2, [r7, #32]
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f000 f89c 	bl	8003638 <I2C_MasterRequestWrite>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e08d      	b.n	8003626 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800350a:	2300      	movs	r3, #0
 800350c:	613b      	str	r3, [r7, #16]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	613b      	str	r3, [r7, #16]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	613b      	str	r3, [r7, #16]
 800351e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003520:	e066      	b.n	80035f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	6a39      	ldr	r1, [r7, #32]
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 fa22 	bl	8003970 <I2C_WaitOnTXEFlagUntilTimeout>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00d      	beq.n	800354e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	2b04      	cmp	r3, #4
 8003538:	d107      	bne.n	800354a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003548:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e06b      	b.n	8003626 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003552:	781a      	ldrb	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	1c5a      	adds	r2, r3, #1
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003568:	b29b      	uxth	r3, r3
 800356a:	3b01      	subs	r3, #1
 800356c:	b29a      	uxth	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003576:	3b01      	subs	r3, #1
 8003578:	b29a      	uxth	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b04      	cmp	r3, #4
 800358a:	d11b      	bne.n	80035c4 <HAL_I2C_Master_Transmit+0x188>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003590:	2b00      	cmp	r3, #0
 8003592:	d017      	beq.n	80035c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	781a      	ldrb	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	1c5a      	adds	r2, r3, #1
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035bc:	3b01      	subs	r3, #1
 80035be:	b29a      	uxth	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	6a39      	ldr	r1, [r7, #32]
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 fa19 	bl	8003a00 <I2C_WaitOnBTFFlagUntilTimeout>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00d      	beq.n	80035f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d8:	2b04      	cmp	r3, #4
 80035da:	d107      	bne.n	80035ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e01a      	b.n	8003626 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d194      	bne.n	8003522 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003606:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003620:	2300      	movs	r3, #0
 8003622:	e000      	b.n	8003626 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003624:	2302      	movs	r3, #2
  }
}
 8003626:	4618      	mov	r0, r3
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	00100002 	.word	0x00100002
 8003634:	ffff0000 	.word	0xffff0000

08003638 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b088      	sub	sp, #32
 800363c:	af02      	add	r7, sp, #8
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	607a      	str	r2, [r7, #4]
 8003642:	603b      	str	r3, [r7, #0]
 8003644:	460b      	mov	r3, r1
 8003646:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	2b08      	cmp	r3, #8
 8003652:	d006      	beq.n	8003662 <I2C_MasterRequestWrite+0x2a>
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d003      	beq.n	8003662 <I2C_MasterRequestWrite+0x2a>
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003660:	d108      	bne.n	8003674 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003670:	601a      	str	r2, [r3, #0]
 8003672:	e00b      	b.n	800368c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003678:	2b12      	cmp	r3, #18
 800367a:	d107      	bne.n	800368c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800368a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f000 f84f 	bl	800373c <I2C_WaitOnFlagUntilTimeout>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00d      	beq.n	80036c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036b2:	d103      	bne.n	80036bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e035      	b.n	800372c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036c8:	d108      	bne.n	80036dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036ca:	897b      	ldrh	r3, [r7, #10]
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	461a      	mov	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036d8:	611a      	str	r2, [r3, #16]
 80036da:	e01b      	b.n	8003714 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80036dc:	897b      	ldrh	r3, [r7, #10]
 80036de:	11db      	asrs	r3, r3, #7
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	f003 0306 	and.w	r3, r3, #6
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	f063 030f 	orn	r3, r3, #15
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	490e      	ldr	r1, [pc, #56]	; (8003734 <I2C_MasterRequestWrite+0xfc>)
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f000 f898 	bl	8003830 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e010      	b.n	800372c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800370a:	897b      	ldrh	r3, [r7, #10]
 800370c:	b2da      	uxtb	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	4907      	ldr	r1, [pc, #28]	; (8003738 <I2C_MasterRequestWrite+0x100>)
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f000 f888 	bl	8003830 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e000      	b.n	800372c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3718      	adds	r7, #24
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	00010008 	.word	0x00010008
 8003738:	00010002 	.word	0x00010002

0800373c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	603b      	str	r3, [r7, #0]
 8003748:	4613      	mov	r3, r2
 800374a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800374c:	e048      	b.n	80037e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003754:	d044      	beq.n	80037e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003756:	f7ff f967 	bl	8002a28 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	429a      	cmp	r2, r3
 8003764:	d302      	bcc.n	800376c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d139      	bne.n	80037e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	0c1b      	lsrs	r3, r3, #16
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b01      	cmp	r3, #1
 8003774:	d10d      	bne.n	8003792 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	43da      	mvns	r2, r3
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	4013      	ands	r3, r2
 8003782:	b29b      	uxth	r3, r3
 8003784:	2b00      	cmp	r3, #0
 8003786:	bf0c      	ite	eq
 8003788:	2301      	moveq	r3, #1
 800378a:	2300      	movne	r3, #0
 800378c:	b2db      	uxtb	r3, r3
 800378e:	461a      	mov	r2, r3
 8003790:	e00c      	b.n	80037ac <I2C_WaitOnFlagUntilTimeout+0x70>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	43da      	mvns	r2, r3
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	4013      	ands	r3, r2
 800379e:	b29b      	uxth	r3, r3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	bf0c      	ite	eq
 80037a4:	2301      	moveq	r3, #1
 80037a6:	2300      	movne	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	461a      	mov	r2, r3
 80037ac:	79fb      	ldrb	r3, [r7, #7]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d116      	bne.n	80037e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2220      	movs	r2, #32
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037cc:	f043 0220 	orr.w	r2, r3, #32
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e023      	b.n	8003828 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	0c1b      	lsrs	r3, r3, #16
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d10d      	bne.n	8003806 <I2C_WaitOnFlagUntilTimeout+0xca>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	43da      	mvns	r2, r3
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	4013      	ands	r3, r2
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	bf0c      	ite	eq
 80037fc:	2301      	moveq	r3, #1
 80037fe:	2300      	movne	r3, #0
 8003800:	b2db      	uxtb	r3, r3
 8003802:	461a      	mov	r2, r3
 8003804:	e00c      	b.n	8003820 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	43da      	mvns	r2, r3
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	4013      	ands	r3, r2
 8003812:	b29b      	uxth	r3, r3
 8003814:	2b00      	cmp	r3, #0
 8003816:	bf0c      	ite	eq
 8003818:	2301      	moveq	r3, #1
 800381a:	2300      	movne	r3, #0
 800381c:	b2db      	uxtb	r3, r3
 800381e:	461a      	mov	r2, r3
 8003820:	79fb      	ldrb	r3, [r7, #7]
 8003822:	429a      	cmp	r2, r3
 8003824:	d093      	beq.n	800374e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
 800383c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800383e:	e071      	b.n	8003924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800384a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800384e:	d123      	bne.n	8003898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800385e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003868:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2220      	movs	r2, #32
 8003874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003884:	f043 0204 	orr.w	r2, r3, #4
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e067      	b.n	8003968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389e:	d041      	beq.n	8003924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038a0:	f7ff f8c2 	bl	8002a28 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d302      	bcc.n	80038b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d136      	bne.n	8003924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	0c1b      	lsrs	r3, r3, #16
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d10c      	bne.n	80038da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	43da      	mvns	r2, r3
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	4013      	ands	r3, r2
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	bf14      	ite	ne
 80038d2:	2301      	movne	r3, #1
 80038d4:	2300      	moveq	r3, #0
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	e00b      	b.n	80038f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	43da      	mvns	r2, r3
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	4013      	ands	r3, r2
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	bf14      	ite	ne
 80038ec:	2301      	movne	r3, #1
 80038ee:	2300      	moveq	r3, #0
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d016      	beq.n	8003924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2220      	movs	r2, #32
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003910:	f043 0220 	orr.w	r2, r3, #32
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e021      	b.n	8003968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	0c1b      	lsrs	r3, r3, #16
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b01      	cmp	r3, #1
 800392c:	d10c      	bne.n	8003948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	43da      	mvns	r2, r3
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	4013      	ands	r3, r2
 800393a:	b29b      	uxth	r3, r3
 800393c:	2b00      	cmp	r3, #0
 800393e:	bf14      	ite	ne
 8003940:	2301      	movne	r3, #1
 8003942:	2300      	moveq	r3, #0
 8003944:	b2db      	uxtb	r3, r3
 8003946:	e00b      	b.n	8003960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	43da      	mvns	r2, r3
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	4013      	ands	r3, r2
 8003954:	b29b      	uxth	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	bf14      	ite	ne
 800395a:	2301      	movne	r3, #1
 800395c:	2300      	moveq	r3, #0
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	f47f af6d 	bne.w	8003840 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800397c:	e034      	b.n	80039e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 f886 	bl	8003a90 <I2C_IsAcknowledgeFailed>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e034      	b.n	80039f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003994:	d028      	beq.n	80039e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003996:	f7ff f847 	bl	8002a28 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d302      	bcc.n	80039ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d11d      	bne.n	80039e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b6:	2b80      	cmp	r3, #128	; 0x80
 80039b8:	d016      	beq.n	80039e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d4:	f043 0220 	orr.w	r2, r3, #32
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e007      	b.n	80039f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f2:	2b80      	cmp	r3, #128	; 0x80
 80039f4:	d1c3      	bne.n	800397e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a0c:	e034      	b.n	8003a78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f000 f83e 	bl	8003a90 <I2C_IsAcknowledgeFailed>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e034      	b.n	8003a88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a24:	d028      	beq.n	8003a78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a26:	f7fe ffff 	bl	8002a28 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d302      	bcc.n	8003a3c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d11d      	bne.n	8003a78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	2b04      	cmp	r3, #4
 8003a48:	d016      	beq.n	8003a78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2220      	movs	r2, #32
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a64:	f043 0220 	orr.w	r2, r3, #32
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e007      	b.n	8003a88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	f003 0304 	and.w	r3, r3, #4
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	d1c3      	bne.n	8003a0e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aa6:	d11b      	bne.n	8003ae0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ab0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2220      	movs	r2, #32
 8003abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003acc:	f043 0204 	orr.w	r2, r3, #4
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e000      	b.n	8003ae2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bc80      	pop	{r7}
 8003aea:	4770      	bx	lr

08003aec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e26c      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f000 8087 	beq.w	8003c1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b0c:	4b92      	ldr	r3, [pc, #584]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f003 030c 	and.w	r3, r3, #12
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d00c      	beq.n	8003b32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b18:	4b8f      	ldr	r3, [pc, #572]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f003 030c 	and.w	r3, r3, #12
 8003b20:	2b08      	cmp	r3, #8
 8003b22:	d112      	bne.n	8003b4a <HAL_RCC_OscConfig+0x5e>
 8003b24:	4b8c      	ldr	r3, [pc, #560]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b30:	d10b      	bne.n	8003b4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b32:	4b89      	ldr	r3, [pc, #548]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d06c      	beq.n	8003c18 <HAL_RCC_OscConfig+0x12c>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d168      	bne.n	8003c18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e246      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b52:	d106      	bne.n	8003b62 <HAL_RCC_OscConfig+0x76>
 8003b54:	4b80      	ldr	r3, [pc, #512]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a7f      	ldr	r2, [pc, #508]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b5e:	6013      	str	r3, [r2, #0]
 8003b60:	e02e      	b.n	8003bc0 <HAL_RCC_OscConfig+0xd4>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10c      	bne.n	8003b84 <HAL_RCC_OscConfig+0x98>
 8003b6a:	4b7b      	ldr	r3, [pc, #492]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a7a      	ldr	r2, [pc, #488]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b74:	6013      	str	r3, [r2, #0]
 8003b76:	4b78      	ldr	r3, [pc, #480]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a77      	ldr	r2, [pc, #476]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003b7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b80:	6013      	str	r3, [r2, #0]
 8003b82:	e01d      	b.n	8003bc0 <HAL_RCC_OscConfig+0xd4>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b8c:	d10c      	bne.n	8003ba8 <HAL_RCC_OscConfig+0xbc>
 8003b8e:	4b72      	ldr	r3, [pc, #456]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a71      	ldr	r2, [pc, #452]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b98:	6013      	str	r3, [r2, #0]
 8003b9a:	4b6f      	ldr	r3, [pc, #444]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a6e      	ldr	r2, [pc, #440]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	e00b      	b.n	8003bc0 <HAL_RCC_OscConfig+0xd4>
 8003ba8:	4b6b      	ldr	r3, [pc, #428]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a6a      	ldr	r2, [pc, #424]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bb2:	6013      	str	r3, [r2, #0]
 8003bb4:	4b68      	ldr	r3, [pc, #416]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a67      	ldr	r2, [pc, #412]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d013      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc8:	f7fe ff2e 	bl	8002a28 <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bd0:	f7fe ff2a 	bl	8002a28 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b64      	cmp	r3, #100	; 0x64
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e1fa      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003be2:	4b5d      	ldr	r3, [pc, #372]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d0f0      	beq.n	8003bd0 <HAL_RCC_OscConfig+0xe4>
 8003bee:	e014      	b.n	8003c1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf0:	f7fe ff1a 	bl	8002a28 <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bf8:	f7fe ff16 	bl	8002a28 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b64      	cmp	r3, #100	; 0x64
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e1e6      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c0a:	4b53      	ldr	r3, [pc, #332]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1f0      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x10c>
 8003c16:	e000      	b.n	8003c1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d063      	beq.n	8003cee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c26:	4b4c      	ldr	r3, [pc, #304]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f003 030c 	and.w	r3, r3, #12
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00b      	beq.n	8003c4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003c32:	4b49      	ldr	r3, [pc, #292]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f003 030c 	and.w	r3, r3, #12
 8003c3a:	2b08      	cmp	r3, #8
 8003c3c:	d11c      	bne.n	8003c78 <HAL_RCC_OscConfig+0x18c>
 8003c3e:	4b46      	ldr	r3, [pc, #280]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d116      	bne.n	8003c78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c4a:	4b43      	ldr	r3, [pc, #268]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d005      	beq.n	8003c62 <HAL_RCC_OscConfig+0x176>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d001      	beq.n	8003c62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e1ba      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c62:	4b3d      	ldr	r3, [pc, #244]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	4939      	ldr	r1, [pc, #228]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c76:	e03a      	b.n	8003cee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d020      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c80:	4b36      	ldr	r3, [pc, #216]	; (8003d5c <HAL_RCC_OscConfig+0x270>)
 8003c82:	2201      	movs	r2, #1
 8003c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c86:	f7fe fecf 	bl	8002a28 <HAL_GetTick>
 8003c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c8c:	e008      	b.n	8003ca0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c8e:	f7fe fecb 	bl	8002a28 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d901      	bls.n	8003ca0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e19b      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca0:	4b2d      	ldr	r3, [pc, #180]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d0f0      	beq.n	8003c8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cac:	4b2a      	ldr	r3, [pc, #168]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	4927      	ldr	r1, [pc, #156]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	600b      	str	r3, [r1, #0]
 8003cc0:	e015      	b.n	8003cee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cc2:	4b26      	ldr	r3, [pc, #152]	; (8003d5c <HAL_RCC_OscConfig+0x270>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc8:	f7fe feae 	bl	8002a28 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cd0:	f7fe feaa 	bl	8002a28 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e17a      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ce2:	4b1d      	ldr	r3, [pc, #116]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1f0      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d03a      	beq.n	8003d70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d019      	beq.n	8003d36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d02:	4b17      	ldr	r3, [pc, #92]	; (8003d60 <HAL_RCC_OscConfig+0x274>)
 8003d04:	2201      	movs	r2, #1
 8003d06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d08:	f7fe fe8e 	bl	8002a28 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d10:	f7fe fe8a 	bl	8002a28 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e15a      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d22:	4b0d      	ldr	r3, [pc, #52]	; (8003d58 <HAL_RCC_OscConfig+0x26c>)
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0f0      	beq.n	8003d10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003d2e:	2001      	movs	r0, #1
 8003d30:	f000 facc 	bl	80042cc <RCC_Delay>
 8003d34:	e01c      	b.n	8003d70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d36:	4b0a      	ldr	r3, [pc, #40]	; (8003d60 <HAL_RCC_OscConfig+0x274>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d3c:	f7fe fe74 	bl	8002a28 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d42:	e00f      	b.n	8003d64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d44:	f7fe fe70 	bl	8002a28 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d908      	bls.n	8003d64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e140      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4ec>
 8003d56:	bf00      	nop
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	42420000 	.word	0x42420000
 8003d60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d64:	4b9e      	ldr	r3, [pc, #632]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1e9      	bne.n	8003d44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0304 	and.w	r3, r3, #4
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f000 80a6 	beq.w	8003eca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d82:	4b97      	ldr	r3, [pc, #604]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10d      	bne.n	8003daa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d8e:	4b94      	ldr	r3, [pc, #592]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	4a93      	ldr	r2, [pc, #588]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d98:	61d3      	str	r3, [r2, #28]
 8003d9a:	4b91      	ldr	r3, [pc, #580]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da2:	60bb      	str	r3, [r7, #8]
 8003da4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003da6:	2301      	movs	r3, #1
 8003da8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003daa:	4b8e      	ldr	r3, [pc, #568]	; (8003fe4 <HAL_RCC_OscConfig+0x4f8>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d118      	bne.n	8003de8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003db6:	4b8b      	ldr	r3, [pc, #556]	; (8003fe4 <HAL_RCC_OscConfig+0x4f8>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a8a      	ldr	r2, [pc, #552]	; (8003fe4 <HAL_RCC_OscConfig+0x4f8>)
 8003dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dc2:	f7fe fe31 	bl	8002a28 <HAL_GetTick>
 8003dc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc8:	e008      	b.n	8003ddc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dca:	f7fe fe2d 	bl	8002a28 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b64      	cmp	r3, #100	; 0x64
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e0fd      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ddc:	4b81      	ldr	r3, [pc, #516]	; (8003fe4 <HAL_RCC_OscConfig+0x4f8>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0f0      	beq.n	8003dca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d106      	bne.n	8003dfe <HAL_RCC_OscConfig+0x312>
 8003df0:	4b7b      	ldr	r3, [pc, #492]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	4a7a      	ldr	r2, [pc, #488]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003df6:	f043 0301 	orr.w	r3, r3, #1
 8003dfa:	6213      	str	r3, [r2, #32]
 8003dfc:	e02d      	b.n	8003e5a <HAL_RCC_OscConfig+0x36e>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10c      	bne.n	8003e20 <HAL_RCC_OscConfig+0x334>
 8003e06:	4b76      	ldr	r3, [pc, #472]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	4a75      	ldr	r2, [pc, #468]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003e0c:	f023 0301 	bic.w	r3, r3, #1
 8003e10:	6213      	str	r3, [r2, #32]
 8003e12:	4b73      	ldr	r3, [pc, #460]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	4a72      	ldr	r2, [pc, #456]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003e18:	f023 0304 	bic.w	r3, r3, #4
 8003e1c:	6213      	str	r3, [r2, #32]
 8003e1e:	e01c      	b.n	8003e5a <HAL_RCC_OscConfig+0x36e>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	2b05      	cmp	r3, #5
 8003e26:	d10c      	bne.n	8003e42 <HAL_RCC_OscConfig+0x356>
 8003e28:	4b6d      	ldr	r3, [pc, #436]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	4a6c      	ldr	r2, [pc, #432]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003e2e:	f043 0304 	orr.w	r3, r3, #4
 8003e32:	6213      	str	r3, [r2, #32]
 8003e34:	4b6a      	ldr	r3, [pc, #424]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	4a69      	ldr	r2, [pc, #420]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003e3a:	f043 0301 	orr.w	r3, r3, #1
 8003e3e:	6213      	str	r3, [r2, #32]
 8003e40:	e00b      	b.n	8003e5a <HAL_RCC_OscConfig+0x36e>
 8003e42:	4b67      	ldr	r3, [pc, #412]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	4a66      	ldr	r2, [pc, #408]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003e48:	f023 0301 	bic.w	r3, r3, #1
 8003e4c:	6213      	str	r3, [r2, #32]
 8003e4e:	4b64      	ldr	r3, [pc, #400]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	4a63      	ldr	r2, [pc, #396]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003e54:	f023 0304 	bic.w	r3, r3, #4
 8003e58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d015      	beq.n	8003e8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e62:	f7fe fde1 	bl	8002a28 <HAL_GetTick>
 8003e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e68:	e00a      	b.n	8003e80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e6a:	f7fe fddd 	bl	8002a28 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e0ab      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e80:	4b57      	ldr	r3, [pc, #348]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0ee      	beq.n	8003e6a <HAL_RCC_OscConfig+0x37e>
 8003e8c:	e014      	b.n	8003eb8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e8e:	f7fe fdcb 	bl	8002a28 <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e94:	e00a      	b.n	8003eac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e96:	f7fe fdc7 	bl	8002a28 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d901      	bls.n	8003eac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e095      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eac:	4b4c      	ldr	r3, [pc, #304]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1ee      	bne.n	8003e96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003eb8:	7dfb      	ldrb	r3, [r7, #23]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d105      	bne.n	8003eca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ebe:	4b48      	ldr	r3, [pc, #288]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	4a47      	ldr	r2, [pc, #284]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ec8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 8081 	beq.w	8003fd6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ed4:	4b42      	ldr	r3, [pc, #264]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f003 030c 	and.w	r3, r3, #12
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	d061      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	69db      	ldr	r3, [r3, #28]
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d146      	bne.n	8003f76 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ee8:	4b3f      	ldr	r3, [pc, #252]	; (8003fe8 <HAL_RCC_OscConfig+0x4fc>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eee:	f7fe fd9b 	bl	8002a28 <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ef4:	e008      	b.n	8003f08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef6:	f7fe fd97 	bl	8002a28 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e067      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f08:	4b35      	ldr	r3, [pc, #212]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1f0      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f1c:	d108      	bne.n	8003f30 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f1e:	4b30      	ldr	r3, [pc, #192]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	492d      	ldr	r1, [pc, #180]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f30:	4b2b      	ldr	r3, [pc, #172]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a19      	ldr	r1, [r3, #32]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	430b      	orrs	r3, r1
 8003f42:	4927      	ldr	r1, [pc, #156]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f48:	4b27      	ldr	r3, [pc, #156]	; (8003fe8 <HAL_RCC_OscConfig+0x4fc>)
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4e:	f7fe fd6b 	bl	8002a28 <HAL_GetTick>
 8003f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f54:	e008      	b.n	8003f68 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f56:	f7fe fd67 	bl	8002a28 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e037      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f68:	4b1d      	ldr	r3, [pc, #116]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0f0      	beq.n	8003f56 <HAL_RCC_OscConfig+0x46a>
 8003f74:	e02f      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f76:	4b1c      	ldr	r3, [pc, #112]	; (8003fe8 <HAL_RCC_OscConfig+0x4fc>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f7c:	f7fe fd54 	bl	8002a28 <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f84:	f7fe fd50 	bl	8002a28 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e020      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f96:	4b12      	ldr	r3, [pc, #72]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1f0      	bne.n	8003f84 <HAL_RCC_OscConfig+0x498>
 8003fa2:	e018      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d101      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e013      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003fb0:	4b0b      	ldr	r3, [pc, #44]	; (8003fe0 <HAL_RCC_OscConfig+0x4f4>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d106      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d001      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e000      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3718      	adds	r7, #24
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	40007000 	.word	0x40007000
 8003fe8:	42420060 	.word	0x42420060

08003fec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e0d0      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004000:	4b6a      	ldr	r3, [pc, #424]	; (80041ac <HAL_RCC_ClockConfig+0x1c0>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0307 	and.w	r3, r3, #7
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	429a      	cmp	r2, r3
 800400c:	d910      	bls.n	8004030 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800400e:	4b67      	ldr	r3, [pc, #412]	; (80041ac <HAL_RCC_ClockConfig+0x1c0>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f023 0207 	bic.w	r2, r3, #7
 8004016:	4965      	ldr	r1, [pc, #404]	; (80041ac <HAL_RCC_ClockConfig+0x1c0>)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	4313      	orrs	r3, r2
 800401c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800401e:	4b63      	ldr	r3, [pc, #396]	; (80041ac <HAL_RCC_ClockConfig+0x1c0>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0307 	and.w	r3, r3, #7
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	429a      	cmp	r2, r3
 800402a:	d001      	beq.n	8004030 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e0b8      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d020      	beq.n	800407e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b00      	cmp	r3, #0
 8004046:	d005      	beq.n	8004054 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004048:	4b59      	ldr	r3, [pc, #356]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	4a58      	ldr	r2, [pc, #352]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 800404e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004052:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0308 	and.w	r3, r3, #8
 800405c:	2b00      	cmp	r3, #0
 800405e:	d005      	beq.n	800406c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004060:	4b53      	ldr	r3, [pc, #332]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	4a52      	ldr	r2, [pc, #328]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004066:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800406a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800406c:	4b50      	ldr	r3, [pc, #320]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	494d      	ldr	r1, [pc, #308]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 800407a:	4313      	orrs	r3, r2
 800407c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d040      	beq.n	800410c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d107      	bne.n	80040a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004092:	4b47      	ldr	r3, [pc, #284]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d115      	bne.n	80040ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e07f      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d107      	bne.n	80040ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040aa:	4b41      	ldr	r3, [pc, #260]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d109      	bne.n	80040ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e073      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ba:	4b3d      	ldr	r3, [pc, #244]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e06b      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040ca:	4b39      	ldr	r3, [pc, #228]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f023 0203 	bic.w	r2, r3, #3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	4936      	ldr	r1, [pc, #216]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040dc:	f7fe fca4 	bl	8002a28 <HAL_GetTick>
 80040e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e2:	e00a      	b.n	80040fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040e4:	f7fe fca0 	bl	8002a28 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e053      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040fa:	4b2d      	ldr	r3, [pc, #180]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f003 020c 	and.w	r2, r3, #12
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	429a      	cmp	r2, r3
 800410a:	d1eb      	bne.n	80040e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800410c:	4b27      	ldr	r3, [pc, #156]	; (80041ac <HAL_RCC_ClockConfig+0x1c0>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	429a      	cmp	r2, r3
 8004118:	d210      	bcs.n	800413c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800411a:	4b24      	ldr	r3, [pc, #144]	; (80041ac <HAL_RCC_ClockConfig+0x1c0>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f023 0207 	bic.w	r2, r3, #7
 8004122:	4922      	ldr	r1, [pc, #136]	; (80041ac <HAL_RCC_ClockConfig+0x1c0>)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	4313      	orrs	r3, r2
 8004128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800412a:	4b20      	ldr	r3, [pc, #128]	; (80041ac <HAL_RCC_ClockConfig+0x1c0>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0307 	and.w	r3, r3, #7
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	429a      	cmp	r2, r3
 8004136:	d001      	beq.n	800413c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e032      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0304 	and.w	r3, r3, #4
 8004144:	2b00      	cmp	r3, #0
 8004146:	d008      	beq.n	800415a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004148:	4b19      	ldr	r3, [pc, #100]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	4916      	ldr	r1, [pc, #88]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004156:	4313      	orrs	r3, r2
 8004158:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0308 	and.w	r3, r3, #8
 8004162:	2b00      	cmp	r3, #0
 8004164:	d009      	beq.n	800417a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004166:	4b12      	ldr	r3, [pc, #72]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	490e      	ldr	r1, [pc, #56]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004176:	4313      	orrs	r3, r2
 8004178:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800417a:	f000 f821 	bl	80041c0 <HAL_RCC_GetSysClockFreq>
 800417e:	4602      	mov	r2, r0
 8004180:	4b0b      	ldr	r3, [pc, #44]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	091b      	lsrs	r3, r3, #4
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	490a      	ldr	r1, [pc, #40]	; (80041b4 <HAL_RCC_ClockConfig+0x1c8>)
 800418c:	5ccb      	ldrb	r3, [r1, r3]
 800418e:	fa22 f303 	lsr.w	r3, r2, r3
 8004192:	4a09      	ldr	r2, [pc, #36]	; (80041b8 <HAL_RCC_ClockConfig+0x1cc>)
 8004194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004196:	4b09      	ldr	r3, [pc, #36]	; (80041bc <HAL_RCC_ClockConfig+0x1d0>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4618      	mov	r0, r3
 800419c:	f7fe fc02 	bl	80029a4 <HAL_InitTick>

  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	40022000 	.word	0x40022000
 80041b0:	40021000 	.word	0x40021000
 80041b4:	08005f98 	.word	0x08005f98
 80041b8:	2000006c 	.word	0x2000006c
 80041bc:	20000070 	.word	0x20000070

080041c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	60fb      	str	r3, [r7, #12]
 80041ca:	2300      	movs	r3, #0
 80041cc:	60bb      	str	r3, [r7, #8]
 80041ce:	2300      	movs	r3, #0
 80041d0:	617b      	str	r3, [r7, #20]
 80041d2:	2300      	movs	r3, #0
 80041d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80041da:	4b1e      	ldr	r3, [pc, #120]	; (8004254 <HAL_RCC_GetSysClockFreq+0x94>)
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f003 030c 	and.w	r3, r3, #12
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d002      	beq.n	80041f0 <HAL_RCC_GetSysClockFreq+0x30>
 80041ea:	2b08      	cmp	r3, #8
 80041ec:	d003      	beq.n	80041f6 <HAL_RCC_GetSysClockFreq+0x36>
 80041ee:	e027      	b.n	8004240 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041f0:	4b19      	ldr	r3, [pc, #100]	; (8004258 <HAL_RCC_GetSysClockFreq+0x98>)
 80041f2:	613b      	str	r3, [r7, #16]
      break;
 80041f4:	e027      	b.n	8004246 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	0c9b      	lsrs	r3, r3, #18
 80041fa:	f003 030f 	and.w	r3, r3, #15
 80041fe:	4a17      	ldr	r2, [pc, #92]	; (800425c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004200:	5cd3      	ldrb	r3, [r2, r3]
 8004202:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d010      	beq.n	8004230 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800420e:	4b11      	ldr	r3, [pc, #68]	; (8004254 <HAL_RCC_GetSysClockFreq+0x94>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	0c5b      	lsrs	r3, r3, #17
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	4a11      	ldr	r2, [pc, #68]	; (8004260 <HAL_RCC_GetSysClockFreq+0xa0>)
 800421a:	5cd3      	ldrb	r3, [r2, r3]
 800421c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a0d      	ldr	r2, [pc, #52]	; (8004258 <HAL_RCC_GetSysClockFreq+0x98>)
 8004222:	fb02 f203 	mul.w	r2, r2, r3
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	fbb2 f3f3 	udiv	r3, r2, r3
 800422c:	617b      	str	r3, [r7, #20]
 800422e:	e004      	b.n	800423a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a0c      	ldr	r2, [pc, #48]	; (8004264 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004234:	fb02 f303 	mul.w	r3, r2, r3
 8004238:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	613b      	str	r3, [r7, #16]
      break;
 800423e:	e002      	b.n	8004246 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004240:	4b05      	ldr	r3, [pc, #20]	; (8004258 <HAL_RCC_GetSysClockFreq+0x98>)
 8004242:	613b      	str	r3, [r7, #16]
      break;
 8004244:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004246:	693b      	ldr	r3, [r7, #16]
}
 8004248:	4618      	mov	r0, r3
 800424a:	371c      	adds	r7, #28
 800424c:	46bd      	mov	sp, r7
 800424e:	bc80      	pop	{r7}
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	40021000 	.word	0x40021000
 8004258:	007a1200 	.word	0x007a1200
 800425c:	08005fb0 	.word	0x08005fb0
 8004260:	08005fc0 	.word	0x08005fc0
 8004264:	003d0900 	.word	0x003d0900

08004268 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800426c:	4b02      	ldr	r3, [pc, #8]	; (8004278 <HAL_RCC_GetHCLKFreq+0x10>)
 800426e:	681b      	ldr	r3, [r3, #0]
}
 8004270:	4618      	mov	r0, r3
 8004272:	46bd      	mov	sp, r7
 8004274:	bc80      	pop	{r7}
 8004276:	4770      	bx	lr
 8004278:	2000006c 	.word	0x2000006c

0800427c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004280:	f7ff fff2 	bl	8004268 <HAL_RCC_GetHCLKFreq>
 8004284:	4602      	mov	r2, r0
 8004286:	4b05      	ldr	r3, [pc, #20]	; (800429c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	0a1b      	lsrs	r3, r3, #8
 800428c:	f003 0307 	and.w	r3, r3, #7
 8004290:	4903      	ldr	r1, [pc, #12]	; (80042a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004292:	5ccb      	ldrb	r3, [r1, r3]
 8004294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004298:	4618      	mov	r0, r3
 800429a:	bd80      	pop	{r7, pc}
 800429c:	40021000 	.word	0x40021000
 80042a0:	08005fa8 	.word	0x08005fa8

080042a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042a8:	f7ff ffde 	bl	8004268 <HAL_RCC_GetHCLKFreq>
 80042ac:	4602      	mov	r2, r0
 80042ae:	4b05      	ldr	r3, [pc, #20]	; (80042c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	0adb      	lsrs	r3, r3, #11
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	4903      	ldr	r1, [pc, #12]	; (80042c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042ba:	5ccb      	ldrb	r3, [r1, r3]
 80042bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40021000 	.word	0x40021000
 80042c8:	08005fa8 	.word	0x08005fa8

080042cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80042d4:	4b0a      	ldr	r3, [pc, #40]	; (8004300 <RCC_Delay+0x34>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a0a      	ldr	r2, [pc, #40]	; (8004304 <RCC_Delay+0x38>)
 80042da:	fba2 2303 	umull	r2, r3, r2, r3
 80042de:	0a5b      	lsrs	r3, r3, #9
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	fb02 f303 	mul.w	r3, r2, r3
 80042e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80042e8:	bf00      	nop
  }
  while (Delay --);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	1e5a      	subs	r2, r3, #1
 80042ee:	60fa      	str	r2, [r7, #12]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1f9      	bne.n	80042e8 <RCC_Delay+0x1c>
}
 80042f4:	bf00      	nop
 80042f6:	bf00      	nop
 80042f8:	3714      	adds	r7, #20
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bc80      	pop	{r7}
 80042fe:	4770      	bx	lr
 8004300:	2000006c 	.word	0x2000006c
 8004304:	10624dd3 	.word	0x10624dd3

08004308 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e041      	b.n	800439e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d106      	bne.n	8004334 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7fd fe26 	bl	8001f80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2202      	movs	r2, #2
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3304      	adds	r3, #4
 8004344:	4619      	mov	r1, r3
 8004346:	4610      	mov	r0, r2
 8004348:	f000 fa5c 	bl	8004804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
	...

080043a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d001      	beq.n	80043c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e03a      	b.n	8004436 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2202      	movs	r2, #2
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68da      	ldr	r2, [r3, #12]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f042 0201 	orr.w	r2, r2, #1
 80043d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a18      	ldr	r2, [pc, #96]	; (8004440 <HAL_TIM_Base_Start_IT+0x98>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d00e      	beq.n	8004400 <HAL_TIM_Base_Start_IT+0x58>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ea:	d009      	beq.n	8004400 <HAL_TIM_Base_Start_IT+0x58>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a14      	ldr	r2, [pc, #80]	; (8004444 <HAL_TIM_Base_Start_IT+0x9c>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d004      	beq.n	8004400 <HAL_TIM_Base_Start_IT+0x58>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a13      	ldr	r2, [pc, #76]	; (8004448 <HAL_TIM_Base_Start_IT+0xa0>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d111      	bne.n	8004424 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f003 0307 	and.w	r3, r3, #7
 800440a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2b06      	cmp	r3, #6
 8004410:	d010      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f042 0201 	orr.w	r2, r2, #1
 8004420:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004422:	e007      	b.n	8004434 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f042 0201 	orr.w	r2, r2, #1
 8004432:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	bc80      	pop	{r7}
 800443e:	4770      	bx	lr
 8004440:	40012c00 	.word	0x40012c00
 8004444:	40000400 	.word	0x40000400
 8004448:	40000800 	.word	0x40000800

0800444c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d020      	beq.n	80044b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d01b      	beq.n	80044b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f06f 0202 	mvn.w	r2, #2
 8004480:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f998 	bl	80047cc <HAL_TIM_IC_CaptureCallback>
 800449c:	e005      	b.n	80044aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f98b 	bl	80047ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 f99a 	bl	80047de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	f003 0304 	and.w	r3, r3, #4
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d020      	beq.n	80044fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d01b      	beq.n	80044fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f06f 0204 	mvn.w	r2, #4
 80044cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2202      	movs	r2, #2
 80044d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d003      	beq.n	80044ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f972 	bl	80047cc <HAL_TIM_IC_CaptureCallback>
 80044e8:	e005      	b.n	80044f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f965 	bl	80047ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 f974 	bl	80047de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	f003 0308 	and.w	r3, r3, #8
 8004502:	2b00      	cmp	r3, #0
 8004504:	d020      	beq.n	8004548 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f003 0308 	and.w	r3, r3, #8
 800450c:	2b00      	cmp	r3, #0
 800450e:	d01b      	beq.n	8004548 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f06f 0208 	mvn.w	r2, #8
 8004518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2204      	movs	r2, #4
 800451e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	f003 0303 	and.w	r3, r3, #3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d003      	beq.n	8004536 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f94c 	bl	80047cc <HAL_TIM_IC_CaptureCallback>
 8004534:	e005      	b.n	8004542 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f93f 	bl	80047ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 f94e 	bl	80047de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	f003 0310 	and.w	r3, r3, #16
 800454e:	2b00      	cmp	r3, #0
 8004550:	d020      	beq.n	8004594 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f003 0310 	and.w	r3, r3, #16
 8004558:	2b00      	cmp	r3, #0
 800455a:	d01b      	beq.n	8004594 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f06f 0210 	mvn.w	r2, #16
 8004564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2208      	movs	r2, #8
 800456a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f926 	bl	80047cc <HAL_TIM_IC_CaptureCallback>
 8004580:	e005      	b.n	800458e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f919 	bl	80047ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 f928 	bl	80047de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00c      	beq.n	80045b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d007      	beq.n	80045b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f06f 0201 	mvn.w	r2, #1
 80045b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7fd f82e 	bl	8001614 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00c      	beq.n	80045dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d007      	beq.n	80045dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 fa7f 	bl	8004ada <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00c      	beq.n	8004600 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d007      	beq.n	8004600 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f8f8 	bl	80047f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	f003 0320 	and.w	r3, r3, #32
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00c      	beq.n	8004624 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f003 0320 	and.w	r3, r3, #32
 8004610:	2b00      	cmp	r3, #0
 8004612:	d007      	beq.n	8004624 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f06f 0220 	mvn.w	r2, #32
 800461c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 fa52 	bl	8004ac8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004624:	bf00      	nop
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004636:	2300      	movs	r3, #0
 8004638:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004640:	2b01      	cmp	r3, #1
 8004642:	d101      	bne.n	8004648 <HAL_TIM_ConfigClockSource+0x1c>
 8004644:	2302      	movs	r3, #2
 8004646:	e0b4      	b.n	80047b2 <HAL_TIM_ConfigClockSource+0x186>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2202      	movs	r2, #2
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004666:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800466e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004680:	d03e      	beq.n	8004700 <HAL_TIM_ConfigClockSource+0xd4>
 8004682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004686:	f200 8087 	bhi.w	8004798 <HAL_TIM_ConfigClockSource+0x16c>
 800468a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800468e:	f000 8086 	beq.w	800479e <HAL_TIM_ConfigClockSource+0x172>
 8004692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004696:	d87f      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x16c>
 8004698:	2b70      	cmp	r3, #112	; 0x70
 800469a:	d01a      	beq.n	80046d2 <HAL_TIM_ConfigClockSource+0xa6>
 800469c:	2b70      	cmp	r3, #112	; 0x70
 800469e:	d87b      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x16c>
 80046a0:	2b60      	cmp	r3, #96	; 0x60
 80046a2:	d050      	beq.n	8004746 <HAL_TIM_ConfigClockSource+0x11a>
 80046a4:	2b60      	cmp	r3, #96	; 0x60
 80046a6:	d877      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x16c>
 80046a8:	2b50      	cmp	r3, #80	; 0x50
 80046aa:	d03c      	beq.n	8004726 <HAL_TIM_ConfigClockSource+0xfa>
 80046ac:	2b50      	cmp	r3, #80	; 0x50
 80046ae:	d873      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x16c>
 80046b0:	2b40      	cmp	r3, #64	; 0x40
 80046b2:	d058      	beq.n	8004766 <HAL_TIM_ConfigClockSource+0x13a>
 80046b4:	2b40      	cmp	r3, #64	; 0x40
 80046b6:	d86f      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x16c>
 80046b8:	2b30      	cmp	r3, #48	; 0x30
 80046ba:	d064      	beq.n	8004786 <HAL_TIM_ConfigClockSource+0x15a>
 80046bc:	2b30      	cmp	r3, #48	; 0x30
 80046be:	d86b      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x16c>
 80046c0:	2b20      	cmp	r3, #32
 80046c2:	d060      	beq.n	8004786 <HAL_TIM_ConfigClockSource+0x15a>
 80046c4:	2b20      	cmp	r3, #32
 80046c6:	d867      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x16c>
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d05c      	beq.n	8004786 <HAL_TIM_ConfigClockSource+0x15a>
 80046cc:	2b10      	cmp	r3, #16
 80046ce:	d05a      	beq.n	8004786 <HAL_TIM_ConfigClockSource+0x15a>
 80046d0:	e062      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6818      	ldr	r0, [r3, #0]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	6899      	ldr	r1, [r3, #8]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f000 f974 	bl	80049ce <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	609a      	str	r2, [r3, #8]
      break;
 80046fe:	e04f      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6818      	ldr	r0, [r3, #0]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	6899      	ldr	r1, [r3, #8]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	f000 f95d 	bl	80049ce <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689a      	ldr	r2, [r3, #8]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004722:	609a      	str	r2, [r3, #8]
      break;
 8004724:	e03c      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6818      	ldr	r0, [r3, #0]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	6859      	ldr	r1, [r3, #4]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	461a      	mov	r2, r3
 8004734:	f000 f8d4 	bl	80048e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2150      	movs	r1, #80	; 0x50
 800473e:	4618      	mov	r0, r3
 8004740:	f000 f92b 	bl	800499a <TIM_ITRx_SetConfig>
      break;
 8004744:	e02c      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6818      	ldr	r0, [r3, #0]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	6859      	ldr	r1, [r3, #4]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	461a      	mov	r2, r3
 8004754:	f000 f8f2 	bl	800493c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2160      	movs	r1, #96	; 0x60
 800475e:	4618      	mov	r0, r3
 8004760:	f000 f91b 	bl	800499a <TIM_ITRx_SetConfig>
      break;
 8004764:	e01c      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6818      	ldr	r0, [r3, #0]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	6859      	ldr	r1, [r3, #4]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	461a      	mov	r2, r3
 8004774:	f000 f8b4 	bl	80048e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2140      	movs	r1, #64	; 0x40
 800477e:	4618      	mov	r0, r3
 8004780:	f000 f90b 	bl	800499a <TIM_ITRx_SetConfig>
      break;
 8004784:	e00c      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4619      	mov	r1, r3
 8004790:	4610      	mov	r0, r2
 8004792:	f000 f902 	bl	800499a <TIM_ITRx_SetConfig>
      break;
 8004796:	e003      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	73fb      	strb	r3, [r7, #15]
      break;
 800479c:	e000      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800479e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047c2:	bf00      	nop
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bc80      	pop	{r7}
 80047ca:	4770      	bx	lr

080047cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	bc80      	pop	{r7}
 80047dc:	4770      	bx	lr

080047de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047de:	b480      	push	{r7}
 80047e0:	b083      	sub	sp, #12
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047e6:	bf00      	nop
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bc80      	pop	{r7}
 80047ee:	4770      	bx	lr

080047f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bc80      	pop	{r7}
 8004800:	4770      	bx	lr
	...

08004804 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a2f      	ldr	r2, [pc, #188]	; (80048d4 <TIM_Base_SetConfig+0xd0>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d00b      	beq.n	8004834 <TIM_Base_SetConfig+0x30>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004822:	d007      	beq.n	8004834 <TIM_Base_SetConfig+0x30>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a2c      	ldr	r2, [pc, #176]	; (80048d8 <TIM_Base_SetConfig+0xd4>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d003      	beq.n	8004834 <TIM_Base_SetConfig+0x30>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a2b      	ldr	r2, [pc, #172]	; (80048dc <TIM_Base_SetConfig+0xd8>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d108      	bne.n	8004846 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800483a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	4313      	orrs	r3, r2
 8004844:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a22      	ldr	r2, [pc, #136]	; (80048d4 <TIM_Base_SetConfig+0xd0>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d00b      	beq.n	8004866 <TIM_Base_SetConfig+0x62>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004854:	d007      	beq.n	8004866 <TIM_Base_SetConfig+0x62>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a1f      	ldr	r2, [pc, #124]	; (80048d8 <TIM_Base_SetConfig+0xd4>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d003      	beq.n	8004866 <TIM_Base_SetConfig+0x62>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a1e      	ldr	r2, [pc, #120]	; (80048dc <TIM_Base_SetConfig+0xd8>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d108      	bne.n	8004878 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800486c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	4313      	orrs	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	4313      	orrs	r3, r2
 8004884:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a0d      	ldr	r2, [pc, #52]	; (80048d4 <TIM_Base_SetConfig+0xd0>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d103      	bne.n	80048ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	691a      	ldr	r2, [r3, #16]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d005      	beq.n	80048ca <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	f023 0201 	bic.w	r2, r3, #1
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	611a      	str	r2, [r3, #16]
  }
}
 80048ca:	bf00      	nop
 80048cc:	3714      	adds	r7, #20
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bc80      	pop	{r7}
 80048d2:	4770      	bx	lr
 80048d4:	40012c00 	.word	0x40012c00
 80048d8:	40000400 	.word	0x40000400
 80048dc:	40000800 	.word	0x40000800

080048e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b087      	sub	sp, #28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	f023 0201 	bic.w	r2, r3, #1
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800490a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	011b      	lsls	r3, r3, #4
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	4313      	orrs	r3, r2
 8004914:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f023 030a 	bic.w	r3, r3, #10
 800491c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	4313      	orrs	r3, r2
 8004924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	621a      	str	r2, [r3, #32]
}
 8004932:	bf00      	nop
 8004934:	371c      	adds	r7, #28
 8004936:	46bd      	mov	sp, r7
 8004938:	bc80      	pop	{r7}
 800493a:	4770      	bx	lr

0800493c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800493c:	b480      	push	{r7}
 800493e:	b087      	sub	sp, #28
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	f023 0210 	bic.w	r2, r3, #16
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004966:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	031b      	lsls	r3, r3, #12
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	4313      	orrs	r3, r2
 8004970:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004978:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	011b      	lsls	r3, r3, #4
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	4313      	orrs	r3, r2
 8004982:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	621a      	str	r2, [r3, #32]
}
 8004990:	bf00      	nop
 8004992:	371c      	adds	r7, #28
 8004994:	46bd      	mov	sp, r7
 8004996:	bc80      	pop	{r7}
 8004998:	4770      	bx	lr

0800499a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800499a:	b480      	push	{r7}
 800499c:	b085      	sub	sp, #20
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
 80049a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	f043 0307 	orr.w	r3, r3, #7
 80049bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	609a      	str	r2, [r3, #8]
}
 80049c4:	bf00      	nop
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bc80      	pop	{r7}
 80049cc:	4770      	bx	lr

080049ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b087      	sub	sp, #28
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	60f8      	str	r0, [r7, #12]
 80049d6:	60b9      	str	r1, [r7, #8]
 80049d8:	607a      	str	r2, [r7, #4]
 80049da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	021a      	lsls	r2, r3, #8
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	431a      	orrs	r2, r3
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	609a      	str	r2, [r3, #8]
}
 8004a02:	bf00      	nop
 8004a04:	371c      	adds	r7, #28
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bc80      	pop	{r7}
 8004a0a:	4770      	bx	lr

08004a0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d101      	bne.n	8004a24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a20:	2302      	movs	r3, #2
 8004a22:	e046      	b.n	8004ab2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a16      	ldr	r2, [pc, #88]	; (8004abc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d00e      	beq.n	8004a86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a70:	d009      	beq.n	8004a86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a12      	ldr	r2, [pc, #72]	; (8004ac0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d004      	beq.n	8004a86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a10      	ldr	r2, [pc, #64]	; (8004ac4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d10c      	bne.n	8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bc80      	pop	{r7}
 8004aba:	4770      	bx	lr
 8004abc:	40012c00 	.word	0x40012c00
 8004ac0:	40000400 	.word	0x40000400
 8004ac4:	40000800 	.word	0x40000800

08004ac8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bc80      	pop	{r7}
 8004ad8:	4770      	bx	lr

08004ada <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b083      	sub	sp, #12
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ae2:	bf00      	nop
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bc80      	pop	{r7}
 8004aea:	4770      	bx	lr

08004aec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e042      	b.n	8004b84 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d106      	bne.n	8004b18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f7fd fa58 	bl	8001fc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2224      	movs	r2, #36	; 0x24
 8004b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68da      	ldr	r2, [r3, #12]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 fcd5 	bl	80054e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	691a      	ldr	r2, [r3, #16]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	695a      	ldr	r2, [r3, #20]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68da      	ldr	r2, [r3, #12]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2220      	movs	r2, #32
 8004b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3708      	adds	r7, #8
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	4613      	mov	r3, r2
 8004b98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b20      	cmp	r3, #32
 8004ba4:	d112      	bne.n	8004bcc <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d002      	beq.n	8004bb2 <HAL_UART_Receive_IT+0x26>
 8004bac:	88fb      	ldrh	r3, [r7, #6]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e00b      	b.n	8004bce <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004bbc:	88fb      	ldrh	r3, [r7, #6]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	68b9      	ldr	r1, [r7, #8]
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f000 fab7 	bl	8005136 <UART_Start_Receive_IT>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	e000      	b.n	8004bce <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004bcc:	2302      	movs	r3, #2
  }
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
	...

08004bd8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b0ba      	sub	sp, #232	; 0xe8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c0e:	f003 030f 	and.w	r3, r3, #15
 8004c12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004c16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10f      	bne.n	8004c3e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c22:	f003 0320 	and.w	r3, r3, #32
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d009      	beq.n	8004c3e <HAL_UART_IRQHandler+0x66>
 8004c2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c2e:	f003 0320 	and.w	r3, r3, #32
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 fb93 	bl	8005362 <UART_Receive_IT>
      return;
 8004c3c:	e25b      	b.n	80050f6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004c3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f000 80de 	beq.w	8004e04 <HAL_UART_IRQHandler+0x22c>
 8004c48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d106      	bne.n	8004c62 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c58:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f000 80d1 	beq.w	8004e04 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00b      	beq.n	8004c86 <HAL_UART_IRQHandler+0xae>
 8004c6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d005      	beq.n	8004c86 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c7e:	f043 0201 	orr.w	r2, r3, #1
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c8a:	f003 0304 	and.w	r3, r3, #4
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00b      	beq.n	8004caa <HAL_UART_IRQHandler+0xd2>
 8004c92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d005      	beq.n	8004caa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca2:	f043 0202 	orr.w	r2, r3, #2
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00b      	beq.n	8004cce <HAL_UART_IRQHandler+0xf6>
 8004cb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d005      	beq.n	8004cce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc6:	f043 0204 	orr.w	r2, r3, #4
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cd2:	f003 0308 	and.w	r3, r3, #8
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d011      	beq.n	8004cfe <HAL_UART_IRQHandler+0x126>
 8004cda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cde:	f003 0320 	and.w	r3, r3, #32
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d105      	bne.n	8004cf2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004ce6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d005      	beq.n	8004cfe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf6:	f043 0208 	orr.w	r2, r3, #8
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f000 81f2 	beq.w	80050ec <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d0c:	f003 0320 	and.w	r3, r3, #32
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d008      	beq.n	8004d26 <HAL_UART_IRQHandler+0x14e>
 8004d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d18:	f003 0320 	and.w	r3, r3, #32
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d002      	beq.n	8004d26 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 fb1e 	bl	8005362 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	695b      	ldr	r3, [r3, #20]
 8004d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	bf14      	ite	ne
 8004d34:	2301      	movne	r3, #1
 8004d36:	2300      	moveq	r3, #0
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d42:	f003 0308 	and.w	r3, r3, #8
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d103      	bne.n	8004d52 <HAL_UART_IRQHandler+0x17a>
 8004d4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d04f      	beq.n	8004df2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 fa28 	bl	80051a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d041      	beq.n	8004dea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	3314      	adds	r3, #20
 8004d6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d74:	e853 3f00 	ldrex	r3, [r3]
 8004d78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	3314      	adds	r3, #20
 8004d8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004d9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004da2:	e841 2300 	strex	r3, r2, [r1]
 8004da6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004daa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1d9      	bne.n	8004d66 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d013      	beq.n	8004de2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dbe:	4a7e      	ldr	r2, [pc, #504]	; (8004fb8 <HAL_UART_IRQHandler+0x3e0>)
 8004dc0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7fd ffa4 	bl	8002d14 <HAL_DMA_Abort_IT>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d016      	beq.n	8004e00 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004ddc:	4610      	mov	r0, r2
 8004dde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004de0:	e00e      	b.n	8004e00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f993 	bl	800510e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004de8:	e00a      	b.n	8004e00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f98f 	bl	800510e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004df0:	e006      	b.n	8004e00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f98b 	bl	800510e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004dfe:	e175      	b.n	80050ec <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e00:	bf00      	nop
    return;
 8004e02:	e173      	b.n	80050ec <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	f040 814f 	bne.w	80050ac <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e12:	f003 0310 	and.w	r3, r3, #16
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f000 8148 	beq.w	80050ac <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e20:	f003 0310 	and.w	r3, r3, #16
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 8141 	beq.w	80050ac <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	60bb      	str	r3, [r7, #8]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	60bb      	str	r3, [r7, #8]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	60bb      	str	r3, [r7, #8]
 8004e3e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 80b6 	beq.w	8004fbc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 8145 	beq.w	80050f0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	f080 813e 	bcs.w	80050f0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e7a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	2b20      	cmp	r3, #32
 8004e84:	f000 8088 	beq.w	8004f98 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	330c      	adds	r3, #12
 8004e8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e96:	e853 3f00 	ldrex	r3, [r3]
 8004e9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004e9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ea2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ea6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	330c      	adds	r3, #12
 8004eb0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004eb4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004eb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ebc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ec0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ec4:	e841 2300 	strex	r3, r2, [r1]
 8004ec8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004ecc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1d9      	bne.n	8004e88 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	3314      	adds	r3, #20
 8004eda:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004edc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ede:	e853 3f00 	ldrex	r3, [r3]
 8004ee2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004ee4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ee6:	f023 0301 	bic.w	r3, r3, #1
 8004eea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	3314      	adds	r3, #20
 8004ef4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004ef8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004efc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efe:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004f00:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f04:	e841 2300 	strex	r3, r2, [r1]
 8004f08:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004f0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1e1      	bne.n	8004ed4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	3314      	adds	r3, #20
 8004f16:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f1a:	e853 3f00 	ldrex	r3, [r3]
 8004f1e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004f20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	3314      	adds	r3, #20
 8004f30:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004f34:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f36:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f38:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f3a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f3c:	e841 2300 	strex	r3, r2, [r1]
 8004f40:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004f42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1e3      	bne.n	8004f10 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	330c      	adds	r3, #12
 8004f5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f60:	e853 3f00 	ldrex	r3, [r3]
 8004f64:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f68:	f023 0310 	bic.w	r3, r3, #16
 8004f6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	330c      	adds	r3, #12
 8004f76:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004f7a:	65ba      	str	r2, [r7, #88]	; 0x58
 8004f7c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f82:	e841 2300 	strex	r3, r2, [r1]
 8004f86:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1e3      	bne.n	8004f56 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7fd fe83 	bl	8002c9e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	4619      	mov	r1, r3
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 f8b6 	bl	8005120 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004fb4:	e09c      	b.n	80050f0 <HAL_UART_IRQHandler+0x518>
 8004fb6:	bf00      	nop
 8004fb8:	0800526d 	.word	0x0800526d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f000 808e 	beq.w	80050f4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004fd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 8089 	beq.w	80050f4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	330c      	adds	r3, #12
 8004fe8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fec:	e853 3f00 	ldrex	r3, [r3]
 8004ff0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ff8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	330c      	adds	r3, #12
 8005002:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005006:	647a      	str	r2, [r7, #68]	; 0x44
 8005008:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800500c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800500e:	e841 2300 	strex	r3, r2, [r1]
 8005012:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1e3      	bne.n	8004fe2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	3314      	adds	r3, #20
 8005020:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005024:	e853 3f00 	ldrex	r3, [r3]
 8005028:	623b      	str	r3, [r7, #32]
   return(result);
 800502a:	6a3b      	ldr	r3, [r7, #32]
 800502c:	f023 0301 	bic.w	r3, r3, #1
 8005030:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	3314      	adds	r3, #20
 800503a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800503e:	633a      	str	r2, [r7, #48]	; 0x30
 8005040:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005042:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005046:	e841 2300 	strex	r3, r2, [r1]
 800504a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800504c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1e3      	bne.n	800501a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2220      	movs	r2, #32
 8005056:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	330c      	adds	r3, #12
 8005066:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	e853 3f00 	ldrex	r3, [r3]
 800506e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f023 0310 	bic.w	r3, r3, #16
 8005076:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	330c      	adds	r3, #12
 8005080:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005084:	61fa      	str	r2, [r7, #28]
 8005086:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005088:	69b9      	ldr	r1, [r7, #24]
 800508a:	69fa      	ldr	r2, [r7, #28]
 800508c:	e841 2300 	strex	r3, r2, [r1]
 8005090:	617b      	str	r3, [r7, #20]
   return(result);
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1e3      	bne.n	8005060 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2202      	movs	r2, #2
 800509c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800509e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80050a2:	4619      	mov	r1, r3
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 f83b 	bl	8005120 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050aa:	e023      	b.n	80050f4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80050ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d009      	beq.n	80050cc <HAL_UART_IRQHandler+0x4f4>
 80050b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d003      	beq.n	80050cc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f8e5 	bl	8005294 <UART_Transmit_IT>
    return;
 80050ca:	e014      	b.n	80050f6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80050cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00e      	beq.n	80050f6 <HAL_UART_IRQHandler+0x51e>
 80050d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d008      	beq.n	80050f6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 f924 	bl	8005332 <UART_EndTransmit_IT>
    return;
 80050ea:	e004      	b.n	80050f6 <HAL_UART_IRQHandler+0x51e>
    return;
 80050ec:	bf00      	nop
 80050ee:	e002      	b.n	80050f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80050f0:	bf00      	nop
 80050f2:	e000      	b.n	80050f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80050f4:	bf00      	nop
  }
}
 80050f6:	37e8      	adds	r7, #232	; 0xe8
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	bc80      	pop	{r7}
 800510c:	4770      	bx	lr

0800510e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800510e:	b480      	push	{r7}
 8005110:	b083      	sub	sp, #12
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005116:	bf00      	nop
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	bc80      	pop	{r7}
 800511e:	4770      	bx	lr

08005120 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	460b      	mov	r3, r1
 800512a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	bc80      	pop	{r7}
 8005134:	4770      	bx	lr

08005136 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005136:	b480      	push	{r7}
 8005138:	b085      	sub	sp, #20
 800513a:	af00      	add	r7, sp, #0
 800513c:	60f8      	str	r0, [r7, #12]
 800513e:	60b9      	str	r1, [r7, #8]
 8005140:	4613      	mov	r3, r2
 8005142:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	88fa      	ldrh	r2, [r7, #6]
 800514e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	88fa      	ldrh	r2, [r7, #6]
 8005154:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2222      	movs	r2, #34	; 0x22
 8005160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d007      	beq.n	800517c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68da      	ldr	r2, [r3, #12]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800517a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	695a      	ldr	r2, [r3, #20]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f042 0201 	orr.w	r2, r2, #1
 800518a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68da      	ldr	r2, [r3, #12]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f042 0220 	orr.w	r2, r2, #32
 800519a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bc80      	pop	{r7}
 80051a6:	4770      	bx	lr

080051a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b095      	sub	sp, #84	; 0x54
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	330c      	adds	r3, #12
 80051b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ba:	e853 3f00 	ldrex	r3, [r3]
 80051be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	330c      	adds	r3, #12
 80051ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051d0:	643a      	str	r2, [r7, #64]	; 0x40
 80051d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051d8:	e841 2300 	strex	r3, r2, [r1]
 80051dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1e5      	bne.n	80051b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	3314      	adds	r3, #20
 80051ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ec:	6a3b      	ldr	r3, [r7, #32]
 80051ee:	e853 3f00 	ldrex	r3, [r3]
 80051f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	f023 0301 	bic.w	r3, r3, #1
 80051fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	3314      	adds	r3, #20
 8005202:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005204:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005206:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005208:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800520a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800520c:	e841 2300 	strex	r3, r2, [r1]
 8005210:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1e5      	bne.n	80051e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521c:	2b01      	cmp	r3, #1
 800521e:	d119      	bne.n	8005254 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	330c      	adds	r3, #12
 8005226:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	e853 3f00 	ldrex	r3, [r3]
 800522e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	f023 0310 	bic.w	r3, r3, #16
 8005236:	647b      	str	r3, [r7, #68]	; 0x44
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	330c      	adds	r3, #12
 800523e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005240:	61ba      	str	r2, [r7, #24]
 8005242:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005244:	6979      	ldr	r1, [r7, #20]
 8005246:	69ba      	ldr	r2, [r7, #24]
 8005248:	e841 2300 	strex	r3, r2, [r1]
 800524c:	613b      	str	r3, [r7, #16]
   return(result);
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1e5      	bne.n	8005220 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2220      	movs	r2, #32
 8005258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005262:	bf00      	nop
 8005264:	3754      	adds	r7, #84	; 0x54
 8005266:	46bd      	mov	sp, r7
 8005268:	bc80      	pop	{r7}
 800526a:	4770      	bx	lr

0800526c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005278:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f7ff ff41 	bl	800510e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800528c:	bf00      	nop
 800528e:	3710      	adds	r7, #16
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b21      	cmp	r3, #33	; 0x21
 80052a6:	d13e      	bne.n	8005326 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052b0:	d114      	bne.n	80052dc <UART_Transmit_IT+0x48>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d110      	bne.n	80052dc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	881b      	ldrh	r3, [r3, #0]
 80052c4:	461a      	mov	r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052ce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	1c9a      	adds	r2, r3, #2
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	621a      	str	r2, [r3, #32]
 80052da:	e008      	b.n	80052ee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a1b      	ldr	r3, [r3, #32]
 80052e0:	1c59      	adds	r1, r3, #1
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	6211      	str	r1, [r2, #32]
 80052e6:	781a      	ldrb	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	3b01      	subs	r3, #1
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	4619      	mov	r1, r3
 80052fc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10f      	bne.n	8005322 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68da      	ldr	r2, [r3, #12]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005310:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68da      	ldr	r2, [r3, #12]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005320:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005322:	2300      	movs	r3, #0
 8005324:	e000      	b.n	8005328 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005326:	2302      	movs	r3, #2
  }
}
 8005328:	4618      	mov	r0, r3
 800532a:	3714      	adds	r7, #20
 800532c:	46bd      	mov	sp, r7
 800532e:	bc80      	pop	{r7}
 8005330:	4770      	bx	lr

08005332 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b082      	sub	sp, #8
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68da      	ldr	r2, [r3, #12]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005348:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2220      	movs	r2, #32
 800534e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f7ff fed2 	bl	80050fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3708      	adds	r7, #8
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b08c      	sub	sp, #48	; 0x30
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b22      	cmp	r3, #34	; 0x22
 8005374:	f040 80ae 	bne.w	80054d4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005380:	d117      	bne.n	80053b2 <UART_Receive_IT+0x50>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d113      	bne.n	80053b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800538a:	2300      	movs	r3, #0
 800538c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005392:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	b29b      	uxth	r3, r3
 800539c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053aa:	1c9a      	adds	r2, r3, #2
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	629a      	str	r2, [r3, #40]	; 0x28
 80053b0:	e026      	b.n	8005400 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80053b8:	2300      	movs	r3, #0
 80053ba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053c4:	d007      	beq.n	80053d6 <UART_Receive_IT+0x74>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10a      	bne.n	80053e4 <UART_Receive_IT+0x82>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d106      	bne.n	80053e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	b2da      	uxtb	r2, r3
 80053de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e0:	701a      	strb	r2, [r3, #0]
 80053e2:	e008      	b.n	80053f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053f0:	b2da      	uxtb	r2, r3
 80053f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fa:	1c5a      	adds	r2, r3, #1
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005404:	b29b      	uxth	r3, r3
 8005406:	3b01      	subs	r3, #1
 8005408:	b29b      	uxth	r3, r3
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	4619      	mov	r1, r3
 800540e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005410:	2b00      	cmp	r3, #0
 8005412:	d15d      	bne.n	80054d0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68da      	ldr	r2, [r3, #12]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f022 0220 	bic.w	r2, r2, #32
 8005422:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68da      	ldr	r2, [r3, #12]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005432:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	695a      	ldr	r2, [r3, #20]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f022 0201 	bic.w	r2, r2, #1
 8005442:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2220      	movs	r2, #32
 8005448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005456:	2b01      	cmp	r3, #1
 8005458:	d135      	bne.n	80054c6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	330c      	adds	r3, #12
 8005466:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	e853 3f00 	ldrex	r3, [r3]
 800546e:	613b      	str	r3, [r7, #16]
   return(result);
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	f023 0310 	bic.w	r3, r3, #16
 8005476:	627b      	str	r3, [r7, #36]	; 0x24
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	330c      	adds	r3, #12
 800547e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005480:	623a      	str	r2, [r7, #32]
 8005482:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005484:	69f9      	ldr	r1, [r7, #28]
 8005486:	6a3a      	ldr	r2, [r7, #32]
 8005488:	e841 2300 	strex	r3, r2, [r1]
 800548c:	61bb      	str	r3, [r7, #24]
   return(result);
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1e5      	bne.n	8005460 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0310 	and.w	r3, r3, #16
 800549e:	2b10      	cmp	r3, #16
 80054a0:	d10a      	bne.n	80054b8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054a2:	2300      	movs	r3, #0
 80054a4:	60fb      	str	r3, [r7, #12]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	60fb      	str	r3, [r7, #12]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	60fb      	str	r3, [r7, #12]
 80054b6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80054bc:	4619      	mov	r1, r3
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f7ff fe2e 	bl	8005120 <HAL_UARTEx_RxEventCallback>
 80054c4:	e002      	b.n	80054cc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f7fc f8ae 	bl	8001628 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80054cc:	2300      	movs	r3, #0
 80054ce:	e002      	b.n	80054d6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80054d0:	2300      	movs	r3, #0
 80054d2:	e000      	b.n	80054d6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80054d4:	2302      	movs	r3, #2
  }
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3730      	adds	r7, #48	; 0x30
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
	...

080054e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68da      	ldr	r2, [r3, #12]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	689a      	ldr	r2, [r3, #8]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	431a      	orrs	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	695b      	ldr	r3, [r3, #20]
 800550c:	4313      	orrs	r3, r2
 800550e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800551a:	f023 030c 	bic.w	r3, r3, #12
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	6812      	ldr	r2, [r2, #0]
 8005522:	68b9      	ldr	r1, [r7, #8]
 8005524:	430b      	orrs	r3, r1
 8005526:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	699a      	ldr	r2, [r3, #24]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a2c      	ldr	r2, [pc, #176]	; (80055f4 <UART_SetConfig+0x114>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d103      	bne.n	8005550 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005548:	f7fe feac 	bl	80042a4 <HAL_RCC_GetPCLK2Freq>
 800554c:	60f8      	str	r0, [r7, #12]
 800554e:	e002      	b.n	8005556 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005550:	f7fe fe94 	bl	800427c <HAL_RCC_GetPCLK1Freq>
 8005554:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	4613      	mov	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4413      	add	r3, r2
 800555e:	009a      	lsls	r2, r3, #2
 8005560:	441a      	add	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	fbb2 f3f3 	udiv	r3, r2, r3
 800556c:	4a22      	ldr	r2, [pc, #136]	; (80055f8 <UART_SetConfig+0x118>)
 800556e:	fba2 2303 	umull	r2, r3, r2, r3
 8005572:	095b      	lsrs	r3, r3, #5
 8005574:	0119      	lsls	r1, r3, #4
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	4613      	mov	r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4413      	add	r3, r2
 800557e:	009a      	lsls	r2, r3, #2
 8005580:	441a      	add	r2, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	fbb2 f2f3 	udiv	r2, r2, r3
 800558c:	4b1a      	ldr	r3, [pc, #104]	; (80055f8 <UART_SetConfig+0x118>)
 800558e:	fba3 0302 	umull	r0, r3, r3, r2
 8005592:	095b      	lsrs	r3, r3, #5
 8005594:	2064      	movs	r0, #100	; 0x64
 8005596:	fb00 f303 	mul.w	r3, r0, r3
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	011b      	lsls	r3, r3, #4
 800559e:	3332      	adds	r3, #50	; 0x32
 80055a0:	4a15      	ldr	r2, [pc, #84]	; (80055f8 <UART_SetConfig+0x118>)
 80055a2:	fba2 2303 	umull	r2, r3, r2, r3
 80055a6:	095b      	lsrs	r3, r3, #5
 80055a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055ac:	4419      	add	r1, r3
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	4613      	mov	r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4413      	add	r3, r2
 80055b6:	009a      	lsls	r2, r3, #2
 80055b8:	441a      	add	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80055c4:	4b0c      	ldr	r3, [pc, #48]	; (80055f8 <UART_SetConfig+0x118>)
 80055c6:	fba3 0302 	umull	r0, r3, r3, r2
 80055ca:	095b      	lsrs	r3, r3, #5
 80055cc:	2064      	movs	r0, #100	; 0x64
 80055ce:	fb00 f303 	mul.w	r3, r0, r3
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	011b      	lsls	r3, r3, #4
 80055d6:	3332      	adds	r3, #50	; 0x32
 80055d8:	4a07      	ldr	r2, [pc, #28]	; (80055f8 <UART_SetConfig+0x118>)
 80055da:	fba2 2303 	umull	r2, r3, r2, r3
 80055de:	095b      	lsrs	r3, r3, #5
 80055e0:	f003 020f 	and.w	r2, r3, #15
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	440a      	add	r2, r1
 80055ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80055ec:	bf00      	nop
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	40013800 	.word	0x40013800
 80055f8:	51eb851f 	.word	0x51eb851f

080055fc <__errno>:
 80055fc:	4b01      	ldr	r3, [pc, #4]	; (8005604 <__errno+0x8>)
 80055fe:	6818      	ldr	r0, [r3, #0]
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	20000078 	.word	0x20000078

08005608 <__libc_init_array>:
 8005608:	b570      	push	{r4, r5, r6, lr}
 800560a:	2600      	movs	r6, #0
 800560c:	4d0c      	ldr	r5, [pc, #48]	; (8005640 <__libc_init_array+0x38>)
 800560e:	4c0d      	ldr	r4, [pc, #52]	; (8005644 <__libc_init_array+0x3c>)
 8005610:	1b64      	subs	r4, r4, r5
 8005612:	10a4      	asrs	r4, r4, #2
 8005614:	42a6      	cmp	r6, r4
 8005616:	d109      	bne.n	800562c <__libc_init_array+0x24>
 8005618:	f000 fc6c 	bl	8005ef4 <_init>
 800561c:	2600      	movs	r6, #0
 800561e:	4d0a      	ldr	r5, [pc, #40]	; (8005648 <__libc_init_array+0x40>)
 8005620:	4c0a      	ldr	r4, [pc, #40]	; (800564c <__libc_init_array+0x44>)
 8005622:	1b64      	subs	r4, r4, r5
 8005624:	10a4      	asrs	r4, r4, #2
 8005626:	42a6      	cmp	r6, r4
 8005628:	d105      	bne.n	8005636 <__libc_init_array+0x2e>
 800562a:	bd70      	pop	{r4, r5, r6, pc}
 800562c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005630:	4798      	blx	r3
 8005632:	3601      	adds	r6, #1
 8005634:	e7ee      	b.n	8005614 <__libc_init_array+0xc>
 8005636:	f855 3b04 	ldr.w	r3, [r5], #4
 800563a:	4798      	blx	r3
 800563c:	3601      	adds	r6, #1
 800563e:	e7f2      	b.n	8005626 <__libc_init_array+0x1e>
 8005640:	08006000 	.word	0x08006000
 8005644:	08006000 	.word	0x08006000
 8005648:	08006000 	.word	0x08006000
 800564c:	08006004 	.word	0x08006004

08005650 <malloc>:
 8005650:	4b02      	ldr	r3, [pc, #8]	; (800565c <malloc+0xc>)
 8005652:	4601      	mov	r1, r0
 8005654:	6818      	ldr	r0, [r3, #0]
 8005656:	f000 b85f 	b.w	8005718 <_malloc_r>
 800565a:	bf00      	nop
 800565c:	20000078 	.word	0x20000078

08005660 <free>:
 8005660:	4b02      	ldr	r3, [pc, #8]	; (800566c <free+0xc>)
 8005662:	4601      	mov	r1, r0
 8005664:	6818      	ldr	r0, [r3, #0]
 8005666:	f000 b80b 	b.w	8005680 <_free_r>
 800566a:	bf00      	nop
 800566c:	20000078 	.word	0x20000078

08005670 <memset>:
 8005670:	4603      	mov	r3, r0
 8005672:	4402      	add	r2, r0
 8005674:	4293      	cmp	r3, r2
 8005676:	d100      	bne.n	800567a <memset+0xa>
 8005678:	4770      	bx	lr
 800567a:	f803 1b01 	strb.w	r1, [r3], #1
 800567e:	e7f9      	b.n	8005674 <memset+0x4>

08005680 <_free_r>:
 8005680:	b538      	push	{r3, r4, r5, lr}
 8005682:	4605      	mov	r5, r0
 8005684:	2900      	cmp	r1, #0
 8005686:	d043      	beq.n	8005710 <_free_r+0x90>
 8005688:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800568c:	1f0c      	subs	r4, r1, #4
 800568e:	2b00      	cmp	r3, #0
 8005690:	bfb8      	it	lt
 8005692:	18e4      	addlt	r4, r4, r3
 8005694:	f000 f8ca 	bl	800582c <__malloc_lock>
 8005698:	4a1e      	ldr	r2, [pc, #120]	; (8005714 <_free_r+0x94>)
 800569a:	6813      	ldr	r3, [r2, #0]
 800569c:	4610      	mov	r0, r2
 800569e:	b933      	cbnz	r3, 80056ae <_free_r+0x2e>
 80056a0:	6063      	str	r3, [r4, #4]
 80056a2:	6014      	str	r4, [r2, #0]
 80056a4:	4628      	mov	r0, r5
 80056a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056aa:	f000 b8c5 	b.w	8005838 <__malloc_unlock>
 80056ae:	42a3      	cmp	r3, r4
 80056b0:	d90a      	bls.n	80056c8 <_free_r+0x48>
 80056b2:	6821      	ldr	r1, [r4, #0]
 80056b4:	1862      	adds	r2, r4, r1
 80056b6:	4293      	cmp	r3, r2
 80056b8:	bf01      	itttt	eq
 80056ba:	681a      	ldreq	r2, [r3, #0]
 80056bc:	685b      	ldreq	r3, [r3, #4]
 80056be:	1852      	addeq	r2, r2, r1
 80056c0:	6022      	streq	r2, [r4, #0]
 80056c2:	6063      	str	r3, [r4, #4]
 80056c4:	6004      	str	r4, [r0, #0]
 80056c6:	e7ed      	b.n	80056a4 <_free_r+0x24>
 80056c8:	461a      	mov	r2, r3
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	b10b      	cbz	r3, 80056d2 <_free_r+0x52>
 80056ce:	42a3      	cmp	r3, r4
 80056d0:	d9fa      	bls.n	80056c8 <_free_r+0x48>
 80056d2:	6811      	ldr	r1, [r2, #0]
 80056d4:	1850      	adds	r0, r2, r1
 80056d6:	42a0      	cmp	r0, r4
 80056d8:	d10b      	bne.n	80056f2 <_free_r+0x72>
 80056da:	6820      	ldr	r0, [r4, #0]
 80056dc:	4401      	add	r1, r0
 80056de:	1850      	adds	r0, r2, r1
 80056e0:	4283      	cmp	r3, r0
 80056e2:	6011      	str	r1, [r2, #0]
 80056e4:	d1de      	bne.n	80056a4 <_free_r+0x24>
 80056e6:	6818      	ldr	r0, [r3, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	4401      	add	r1, r0
 80056ec:	6011      	str	r1, [r2, #0]
 80056ee:	6053      	str	r3, [r2, #4]
 80056f0:	e7d8      	b.n	80056a4 <_free_r+0x24>
 80056f2:	d902      	bls.n	80056fa <_free_r+0x7a>
 80056f4:	230c      	movs	r3, #12
 80056f6:	602b      	str	r3, [r5, #0]
 80056f8:	e7d4      	b.n	80056a4 <_free_r+0x24>
 80056fa:	6820      	ldr	r0, [r4, #0]
 80056fc:	1821      	adds	r1, r4, r0
 80056fe:	428b      	cmp	r3, r1
 8005700:	bf01      	itttt	eq
 8005702:	6819      	ldreq	r1, [r3, #0]
 8005704:	685b      	ldreq	r3, [r3, #4]
 8005706:	1809      	addeq	r1, r1, r0
 8005708:	6021      	streq	r1, [r4, #0]
 800570a:	6063      	str	r3, [r4, #4]
 800570c:	6054      	str	r4, [r2, #4]
 800570e:	e7c9      	b.n	80056a4 <_free_r+0x24>
 8005710:	bd38      	pop	{r3, r4, r5, pc}
 8005712:	bf00      	nop
 8005714:	20000138 	.word	0x20000138

08005718 <_malloc_r>:
 8005718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800571a:	1ccd      	adds	r5, r1, #3
 800571c:	f025 0503 	bic.w	r5, r5, #3
 8005720:	3508      	adds	r5, #8
 8005722:	2d0c      	cmp	r5, #12
 8005724:	bf38      	it	cc
 8005726:	250c      	movcc	r5, #12
 8005728:	2d00      	cmp	r5, #0
 800572a:	4606      	mov	r6, r0
 800572c:	db01      	blt.n	8005732 <_malloc_r+0x1a>
 800572e:	42a9      	cmp	r1, r5
 8005730:	d903      	bls.n	800573a <_malloc_r+0x22>
 8005732:	230c      	movs	r3, #12
 8005734:	6033      	str	r3, [r6, #0]
 8005736:	2000      	movs	r0, #0
 8005738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800573a:	f000 f877 	bl	800582c <__malloc_lock>
 800573e:	4921      	ldr	r1, [pc, #132]	; (80057c4 <_malloc_r+0xac>)
 8005740:	680a      	ldr	r2, [r1, #0]
 8005742:	4614      	mov	r4, r2
 8005744:	b99c      	cbnz	r4, 800576e <_malloc_r+0x56>
 8005746:	4f20      	ldr	r7, [pc, #128]	; (80057c8 <_malloc_r+0xb0>)
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	b923      	cbnz	r3, 8005756 <_malloc_r+0x3e>
 800574c:	4621      	mov	r1, r4
 800574e:	4630      	mov	r0, r6
 8005750:	f000 f83c 	bl	80057cc <_sbrk_r>
 8005754:	6038      	str	r0, [r7, #0]
 8005756:	4629      	mov	r1, r5
 8005758:	4630      	mov	r0, r6
 800575a:	f000 f837 	bl	80057cc <_sbrk_r>
 800575e:	1c43      	adds	r3, r0, #1
 8005760:	d123      	bne.n	80057aa <_malloc_r+0x92>
 8005762:	230c      	movs	r3, #12
 8005764:	4630      	mov	r0, r6
 8005766:	6033      	str	r3, [r6, #0]
 8005768:	f000 f866 	bl	8005838 <__malloc_unlock>
 800576c:	e7e3      	b.n	8005736 <_malloc_r+0x1e>
 800576e:	6823      	ldr	r3, [r4, #0]
 8005770:	1b5b      	subs	r3, r3, r5
 8005772:	d417      	bmi.n	80057a4 <_malloc_r+0x8c>
 8005774:	2b0b      	cmp	r3, #11
 8005776:	d903      	bls.n	8005780 <_malloc_r+0x68>
 8005778:	6023      	str	r3, [r4, #0]
 800577a:	441c      	add	r4, r3
 800577c:	6025      	str	r5, [r4, #0]
 800577e:	e004      	b.n	800578a <_malloc_r+0x72>
 8005780:	6863      	ldr	r3, [r4, #4]
 8005782:	42a2      	cmp	r2, r4
 8005784:	bf0c      	ite	eq
 8005786:	600b      	streq	r3, [r1, #0]
 8005788:	6053      	strne	r3, [r2, #4]
 800578a:	4630      	mov	r0, r6
 800578c:	f000 f854 	bl	8005838 <__malloc_unlock>
 8005790:	f104 000b 	add.w	r0, r4, #11
 8005794:	1d23      	adds	r3, r4, #4
 8005796:	f020 0007 	bic.w	r0, r0, #7
 800579a:	1ac2      	subs	r2, r0, r3
 800579c:	d0cc      	beq.n	8005738 <_malloc_r+0x20>
 800579e:	1a1b      	subs	r3, r3, r0
 80057a0:	50a3      	str	r3, [r4, r2]
 80057a2:	e7c9      	b.n	8005738 <_malloc_r+0x20>
 80057a4:	4622      	mov	r2, r4
 80057a6:	6864      	ldr	r4, [r4, #4]
 80057a8:	e7cc      	b.n	8005744 <_malloc_r+0x2c>
 80057aa:	1cc4      	adds	r4, r0, #3
 80057ac:	f024 0403 	bic.w	r4, r4, #3
 80057b0:	42a0      	cmp	r0, r4
 80057b2:	d0e3      	beq.n	800577c <_malloc_r+0x64>
 80057b4:	1a21      	subs	r1, r4, r0
 80057b6:	4630      	mov	r0, r6
 80057b8:	f000 f808 	bl	80057cc <_sbrk_r>
 80057bc:	3001      	adds	r0, #1
 80057be:	d1dd      	bne.n	800577c <_malloc_r+0x64>
 80057c0:	e7cf      	b.n	8005762 <_malloc_r+0x4a>
 80057c2:	bf00      	nop
 80057c4:	20000138 	.word	0x20000138
 80057c8:	2000013c 	.word	0x2000013c

080057cc <_sbrk_r>:
 80057cc:	b538      	push	{r3, r4, r5, lr}
 80057ce:	2300      	movs	r3, #0
 80057d0:	4d05      	ldr	r5, [pc, #20]	; (80057e8 <_sbrk_r+0x1c>)
 80057d2:	4604      	mov	r4, r0
 80057d4:	4608      	mov	r0, r1
 80057d6:	602b      	str	r3, [r5, #0]
 80057d8:	f7fc fc8c 	bl	80020f4 <_sbrk>
 80057dc:	1c43      	adds	r3, r0, #1
 80057de:	d102      	bne.n	80057e6 <_sbrk_r+0x1a>
 80057e0:	682b      	ldr	r3, [r5, #0]
 80057e2:	b103      	cbz	r3, 80057e6 <_sbrk_r+0x1a>
 80057e4:	6023      	str	r3, [r4, #0]
 80057e6:	bd38      	pop	{r3, r4, r5, pc}
 80057e8:	20000234 	.word	0x20000234

080057ec <siprintf>:
 80057ec:	b40e      	push	{r1, r2, r3}
 80057ee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80057f2:	b500      	push	{lr}
 80057f4:	b09c      	sub	sp, #112	; 0x70
 80057f6:	ab1d      	add	r3, sp, #116	; 0x74
 80057f8:	9002      	str	r0, [sp, #8]
 80057fa:	9006      	str	r0, [sp, #24]
 80057fc:	9107      	str	r1, [sp, #28]
 80057fe:	9104      	str	r1, [sp, #16]
 8005800:	4808      	ldr	r0, [pc, #32]	; (8005824 <siprintf+0x38>)
 8005802:	4909      	ldr	r1, [pc, #36]	; (8005828 <siprintf+0x3c>)
 8005804:	f853 2b04 	ldr.w	r2, [r3], #4
 8005808:	9105      	str	r1, [sp, #20]
 800580a:	6800      	ldr	r0, [r0, #0]
 800580c:	a902      	add	r1, sp, #8
 800580e:	9301      	str	r3, [sp, #4]
 8005810:	f000 f874 	bl	80058fc <_svfiprintf_r>
 8005814:	2200      	movs	r2, #0
 8005816:	9b02      	ldr	r3, [sp, #8]
 8005818:	701a      	strb	r2, [r3, #0]
 800581a:	b01c      	add	sp, #112	; 0x70
 800581c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005820:	b003      	add	sp, #12
 8005822:	4770      	bx	lr
 8005824:	20000078 	.word	0x20000078
 8005828:	ffff0208 	.word	0xffff0208

0800582c <__malloc_lock>:
 800582c:	4801      	ldr	r0, [pc, #4]	; (8005834 <__malloc_lock+0x8>)
 800582e:	f000 bafb 	b.w	8005e28 <__retarget_lock_acquire_recursive>
 8005832:	bf00      	nop
 8005834:	2000023c 	.word	0x2000023c

08005838 <__malloc_unlock>:
 8005838:	4801      	ldr	r0, [pc, #4]	; (8005840 <__malloc_unlock+0x8>)
 800583a:	f000 baf6 	b.w	8005e2a <__retarget_lock_release_recursive>
 800583e:	bf00      	nop
 8005840:	2000023c 	.word	0x2000023c

08005844 <__ssputs_r>:
 8005844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005848:	688e      	ldr	r6, [r1, #8]
 800584a:	4682      	mov	sl, r0
 800584c:	429e      	cmp	r6, r3
 800584e:	460c      	mov	r4, r1
 8005850:	4690      	mov	r8, r2
 8005852:	461f      	mov	r7, r3
 8005854:	d838      	bhi.n	80058c8 <__ssputs_r+0x84>
 8005856:	898a      	ldrh	r2, [r1, #12]
 8005858:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800585c:	d032      	beq.n	80058c4 <__ssputs_r+0x80>
 800585e:	6825      	ldr	r5, [r4, #0]
 8005860:	6909      	ldr	r1, [r1, #16]
 8005862:	3301      	adds	r3, #1
 8005864:	eba5 0901 	sub.w	r9, r5, r1
 8005868:	6965      	ldr	r5, [r4, #20]
 800586a:	444b      	add	r3, r9
 800586c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005870:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005874:	106d      	asrs	r5, r5, #1
 8005876:	429d      	cmp	r5, r3
 8005878:	bf38      	it	cc
 800587a:	461d      	movcc	r5, r3
 800587c:	0553      	lsls	r3, r2, #21
 800587e:	d531      	bpl.n	80058e4 <__ssputs_r+0xa0>
 8005880:	4629      	mov	r1, r5
 8005882:	f7ff ff49 	bl	8005718 <_malloc_r>
 8005886:	4606      	mov	r6, r0
 8005888:	b950      	cbnz	r0, 80058a0 <__ssputs_r+0x5c>
 800588a:	230c      	movs	r3, #12
 800588c:	f04f 30ff 	mov.w	r0, #4294967295
 8005890:	f8ca 3000 	str.w	r3, [sl]
 8005894:	89a3      	ldrh	r3, [r4, #12]
 8005896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800589a:	81a3      	strh	r3, [r4, #12]
 800589c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058a0:	464a      	mov	r2, r9
 80058a2:	6921      	ldr	r1, [r4, #16]
 80058a4:	f000 fad0 	bl	8005e48 <memcpy>
 80058a8:	89a3      	ldrh	r3, [r4, #12]
 80058aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80058ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058b2:	81a3      	strh	r3, [r4, #12]
 80058b4:	6126      	str	r6, [r4, #16]
 80058b6:	444e      	add	r6, r9
 80058b8:	6026      	str	r6, [r4, #0]
 80058ba:	463e      	mov	r6, r7
 80058bc:	6165      	str	r5, [r4, #20]
 80058be:	eba5 0509 	sub.w	r5, r5, r9
 80058c2:	60a5      	str	r5, [r4, #8]
 80058c4:	42be      	cmp	r6, r7
 80058c6:	d900      	bls.n	80058ca <__ssputs_r+0x86>
 80058c8:	463e      	mov	r6, r7
 80058ca:	4632      	mov	r2, r6
 80058cc:	4641      	mov	r1, r8
 80058ce:	6820      	ldr	r0, [r4, #0]
 80058d0:	f000 fac8 	bl	8005e64 <memmove>
 80058d4:	68a3      	ldr	r3, [r4, #8]
 80058d6:	6822      	ldr	r2, [r4, #0]
 80058d8:	1b9b      	subs	r3, r3, r6
 80058da:	4432      	add	r2, r6
 80058dc:	2000      	movs	r0, #0
 80058de:	60a3      	str	r3, [r4, #8]
 80058e0:	6022      	str	r2, [r4, #0]
 80058e2:	e7db      	b.n	800589c <__ssputs_r+0x58>
 80058e4:	462a      	mov	r2, r5
 80058e6:	f000 fad7 	bl	8005e98 <_realloc_r>
 80058ea:	4606      	mov	r6, r0
 80058ec:	2800      	cmp	r0, #0
 80058ee:	d1e1      	bne.n	80058b4 <__ssputs_r+0x70>
 80058f0:	4650      	mov	r0, sl
 80058f2:	6921      	ldr	r1, [r4, #16]
 80058f4:	f7ff fec4 	bl	8005680 <_free_r>
 80058f8:	e7c7      	b.n	800588a <__ssputs_r+0x46>
	...

080058fc <_svfiprintf_r>:
 80058fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005900:	4698      	mov	r8, r3
 8005902:	898b      	ldrh	r3, [r1, #12]
 8005904:	4607      	mov	r7, r0
 8005906:	061b      	lsls	r3, r3, #24
 8005908:	460d      	mov	r5, r1
 800590a:	4614      	mov	r4, r2
 800590c:	b09d      	sub	sp, #116	; 0x74
 800590e:	d50e      	bpl.n	800592e <_svfiprintf_r+0x32>
 8005910:	690b      	ldr	r3, [r1, #16]
 8005912:	b963      	cbnz	r3, 800592e <_svfiprintf_r+0x32>
 8005914:	2140      	movs	r1, #64	; 0x40
 8005916:	f7ff feff 	bl	8005718 <_malloc_r>
 800591a:	6028      	str	r0, [r5, #0]
 800591c:	6128      	str	r0, [r5, #16]
 800591e:	b920      	cbnz	r0, 800592a <_svfiprintf_r+0x2e>
 8005920:	230c      	movs	r3, #12
 8005922:	603b      	str	r3, [r7, #0]
 8005924:	f04f 30ff 	mov.w	r0, #4294967295
 8005928:	e0d1      	b.n	8005ace <_svfiprintf_r+0x1d2>
 800592a:	2340      	movs	r3, #64	; 0x40
 800592c:	616b      	str	r3, [r5, #20]
 800592e:	2300      	movs	r3, #0
 8005930:	9309      	str	r3, [sp, #36]	; 0x24
 8005932:	2320      	movs	r3, #32
 8005934:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005938:	2330      	movs	r3, #48	; 0x30
 800593a:	f04f 0901 	mov.w	r9, #1
 800593e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005942:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005ae8 <_svfiprintf_r+0x1ec>
 8005946:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800594a:	4623      	mov	r3, r4
 800594c:	469a      	mov	sl, r3
 800594e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005952:	b10a      	cbz	r2, 8005958 <_svfiprintf_r+0x5c>
 8005954:	2a25      	cmp	r2, #37	; 0x25
 8005956:	d1f9      	bne.n	800594c <_svfiprintf_r+0x50>
 8005958:	ebba 0b04 	subs.w	fp, sl, r4
 800595c:	d00b      	beq.n	8005976 <_svfiprintf_r+0x7a>
 800595e:	465b      	mov	r3, fp
 8005960:	4622      	mov	r2, r4
 8005962:	4629      	mov	r1, r5
 8005964:	4638      	mov	r0, r7
 8005966:	f7ff ff6d 	bl	8005844 <__ssputs_r>
 800596a:	3001      	adds	r0, #1
 800596c:	f000 80aa 	beq.w	8005ac4 <_svfiprintf_r+0x1c8>
 8005970:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005972:	445a      	add	r2, fp
 8005974:	9209      	str	r2, [sp, #36]	; 0x24
 8005976:	f89a 3000 	ldrb.w	r3, [sl]
 800597a:	2b00      	cmp	r3, #0
 800597c:	f000 80a2 	beq.w	8005ac4 <_svfiprintf_r+0x1c8>
 8005980:	2300      	movs	r3, #0
 8005982:	f04f 32ff 	mov.w	r2, #4294967295
 8005986:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800598a:	f10a 0a01 	add.w	sl, sl, #1
 800598e:	9304      	str	r3, [sp, #16]
 8005990:	9307      	str	r3, [sp, #28]
 8005992:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005996:	931a      	str	r3, [sp, #104]	; 0x68
 8005998:	4654      	mov	r4, sl
 800599a:	2205      	movs	r2, #5
 800599c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059a0:	4851      	ldr	r0, [pc, #324]	; (8005ae8 <_svfiprintf_r+0x1ec>)
 80059a2:	f000 fa43 	bl	8005e2c <memchr>
 80059a6:	9a04      	ldr	r2, [sp, #16]
 80059a8:	b9d8      	cbnz	r0, 80059e2 <_svfiprintf_r+0xe6>
 80059aa:	06d0      	lsls	r0, r2, #27
 80059ac:	bf44      	itt	mi
 80059ae:	2320      	movmi	r3, #32
 80059b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059b4:	0711      	lsls	r1, r2, #28
 80059b6:	bf44      	itt	mi
 80059b8:	232b      	movmi	r3, #43	; 0x2b
 80059ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059be:	f89a 3000 	ldrb.w	r3, [sl]
 80059c2:	2b2a      	cmp	r3, #42	; 0x2a
 80059c4:	d015      	beq.n	80059f2 <_svfiprintf_r+0xf6>
 80059c6:	4654      	mov	r4, sl
 80059c8:	2000      	movs	r0, #0
 80059ca:	f04f 0c0a 	mov.w	ip, #10
 80059ce:	9a07      	ldr	r2, [sp, #28]
 80059d0:	4621      	mov	r1, r4
 80059d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059d6:	3b30      	subs	r3, #48	; 0x30
 80059d8:	2b09      	cmp	r3, #9
 80059da:	d94e      	bls.n	8005a7a <_svfiprintf_r+0x17e>
 80059dc:	b1b0      	cbz	r0, 8005a0c <_svfiprintf_r+0x110>
 80059de:	9207      	str	r2, [sp, #28]
 80059e0:	e014      	b.n	8005a0c <_svfiprintf_r+0x110>
 80059e2:	eba0 0308 	sub.w	r3, r0, r8
 80059e6:	fa09 f303 	lsl.w	r3, r9, r3
 80059ea:	4313      	orrs	r3, r2
 80059ec:	46a2      	mov	sl, r4
 80059ee:	9304      	str	r3, [sp, #16]
 80059f0:	e7d2      	b.n	8005998 <_svfiprintf_r+0x9c>
 80059f2:	9b03      	ldr	r3, [sp, #12]
 80059f4:	1d19      	adds	r1, r3, #4
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	9103      	str	r1, [sp, #12]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	bfbb      	ittet	lt
 80059fe:	425b      	neglt	r3, r3
 8005a00:	f042 0202 	orrlt.w	r2, r2, #2
 8005a04:	9307      	strge	r3, [sp, #28]
 8005a06:	9307      	strlt	r3, [sp, #28]
 8005a08:	bfb8      	it	lt
 8005a0a:	9204      	strlt	r2, [sp, #16]
 8005a0c:	7823      	ldrb	r3, [r4, #0]
 8005a0e:	2b2e      	cmp	r3, #46	; 0x2e
 8005a10:	d10c      	bne.n	8005a2c <_svfiprintf_r+0x130>
 8005a12:	7863      	ldrb	r3, [r4, #1]
 8005a14:	2b2a      	cmp	r3, #42	; 0x2a
 8005a16:	d135      	bne.n	8005a84 <_svfiprintf_r+0x188>
 8005a18:	9b03      	ldr	r3, [sp, #12]
 8005a1a:	3402      	adds	r4, #2
 8005a1c:	1d1a      	adds	r2, r3, #4
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	9203      	str	r2, [sp, #12]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	bfb8      	it	lt
 8005a26:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a2a:	9305      	str	r3, [sp, #20]
 8005a2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005af8 <_svfiprintf_r+0x1fc>
 8005a30:	2203      	movs	r2, #3
 8005a32:	4650      	mov	r0, sl
 8005a34:	7821      	ldrb	r1, [r4, #0]
 8005a36:	f000 f9f9 	bl	8005e2c <memchr>
 8005a3a:	b140      	cbz	r0, 8005a4e <_svfiprintf_r+0x152>
 8005a3c:	2340      	movs	r3, #64	; 0x40
 8005a3e:	eba0 000a 	sub.w	r0, r0, sl
 8005a42:	fa03 f000 	lsl.w	r0, r3, r0
 8005a46:	9b04      	ldr	r3, [sp, #16]
 8005a48:	3401      	adds	r4, #1
 8005a4a:	4303      	orrs	r3, r0
 8005a4c:	9304      	str	r3, [sp, #16]
 8005a4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a52:	2206      	movs	r2, #6
 8005a54:	4825      	ldr	r0, [pc, #148]	; (8005aec <_svfiprintf_r+0x1f0>)
 8005a56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a5a:	f000 f9e7 	bl	8005e2c <memchr>
 8005a5e:	2800      	cmp	r0, #0
 8005a60:	d038      	beq.n	8005ad4 <_svfiprintf_r+0x1d8>
 8005a62:	4b23      	ldr	r3, [pc, #140]	; (8005af0 <_svfiprintf_r+0x1f4>)
 8005a64:	bb1b      	cbnz	r3, 8005aae <_svfiprintf_r+0x1b2>
 8005a66:	9b03      	ldr	r3, [sp, #12]
 8005a68:	3307      	adds	r3, #7
 8005a6a:	f023 0307 	bic.w	r3, r3, #7
 8005a6e:	3308      	adds	r3, #8
 8005a70:	9303      	str	r3, [sp, #12]
 8005a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a74:	4433      	add	r3, r6
 8005a76:	9309      	str	r3, [sp, #36]	; 0x24
 8005a78:	e767      	b.n	800594a <_svfiprintf_r+0x4e>
 8005a7a:	460c      	mov	r4, r1
 8005a7c:	2001      	movs	r0, #1
 8005a7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a82:	e7a5      	b.n	80059d0 <_svfiprintf_r+0xd4>
 8005a84:	2300      	movs	r3, #0
 8005a86:	f04f 0c0a 	mov.w	ip, #10
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	3401      	adds	r4, #1
 8005a8e:	9305      	str	r3, [sp, #20]
 8005a90:	4620      	mov	r0, r4
 8005a92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a96:	3a30      	subs	r2, #48	; 0x30
 8005a98:	2a09      	cmp	r2, #9
 8005a9a:	d903      	bls.n	8005aa4 <_svfiprintf_r+0x1a8>
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d0c5      	beq.n	8005a2c <_svfiprintf_r+0x130>
 8005aa0:	9105      	str	r1, [sp, #20]
 8005aa2:	e7c3      	b.n	8005a2c <_svfiprintf_r+0x130>
 8005aa4:	4604      	mov	r4, r0
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005aac:	e7f0      	b.n	8005a90 <_svfiprintf_r+0x194>
 8005aae:	ab03      	add	r3, sp, #12
 8005ab0:	9300      	str	r3, [sp, #0]
 8005ab2:	462a      	mov	r2, r5
 8005ab4:	4638      	mov	r0, r7
 8005ab6:	4b0f      	ldr	r3, [pc, #60]	; (8005af4 <_svfiprintf_r+0x1f8>)
 8005ab8:	a904      	add	r1, sp, #16
 8005aba:	f3af 8000 	nop.w
 8005abe:	1c42      	adds	r2, r0, #1
 8005ac0:	4606      	mov	r6, r0
 8005ac2:	d1d6      	bne.n	8005a72 <_svfiprintf_r+0x176>
 8005ac4:	89ab      	ldrh	r3, [r5, #12]
 8005ac6:	065b      	lsls	r3, r3, #25
 8005ac8:	f53f af2c 	bmi.w	8005924 <_svfiprintf_r+0x28>
 8005acc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ace:	b01d      	add	sp, #116	; 0x74
 8005ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ad4:	ab03      	add	r3, sp, #12
 8005ad6:	9300      	str	r3, [sp, #0]
 8005ad8:	462a      	mov	r2, r5
 8005ada:	4638      	mov	r0, r7
 8005adc:	4b05      	ldr	r3, [pc, #20]	; (8005af4 <_svfiprintf_r+0x1f8>)
 8005ade:	a904      	add	r1, sp, #16
 8005ae0:	f000 f87c 	bl	8005bdc <_printf_i>
 8005ae4:	e7eb      	b.n	8005abe <_svfiprintf_r+0x1c2>
 8005ae6:	bf00      	nop
 8005ae8:	08005fc2 	.word	0x08005fc2
 8005aec:	08005fcc 	.word	0x08005fcc
 8005af0:	00000000 	.word	0x00000000
 8005af4:	08005845 	.word	0x08005845
 8005af8:	08005fc8 	.word	0x08005fc8

08005afc <_printf_common>:
 8005afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b00:	4616      	mov	r6, r2
 8005b02:	4699      	mov	r9, r3
 8005b04:	688a      	ldr	r2, [r1, #8]
 8005b06:	690b      	ldr	r3, [r1, #16]
 8005b08:	4607      	mov	r7, r0
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	bfb8      	it	lt
 8005b0e:	4613      	movlt	r3, r2
 8005b10:	6033      	str	r3, [r6, #0]
 8005b12:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b16:	460c      	mov	r4, r1
 8005b18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b1c:	b10a      	cbz	r2, 8005b22 <_printf_common+0x26>
 8005b1e:	3301      	adds	r3, #1
 8005b20:	6033      	str	r3, [r6, #0]
 8005b22:	6823      	ldr	r3, [r4, #0]
 8005b24:	0699      	lsls	r1, r3, #26
 8005b26:	bf42      	ittt	mi
 8005b28:	6833      	ldrmi	r3, [r6, #0]
 8005b2a:	3302      	addmi	r3, #2
 8005b2c:	6033      	strmi	r3, [r6, #0]
 8005b2e:	6825      	ldr	r5, [r4, #0]
 8005b30:	f015 0506 	ands.w	r5, r5, #6
 8005b34:	d106      	bne.n	8005b44 <_printf_common+0x48>
 8005b36:	f104 0a19 	add.w	sl, r4, #25
 8005b3a:	68e3      	ldr	r3, [r4, #12]
 8005b3c:	6832      	ldr	r2, [r6, #0]
 8005b3e:	1a9b      	subs	r3, r3, r2
 8005b40:	42ab      	cmp	r3, r5
 8005b42:	dc28      	bgt.n	8005b96 <_printf_common+0x9a>
 8005b44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b48:	1e13      	subs	r3, r2, #0
 8005b4a:	6822      	ldr	r2, [r4, #0]
 8005b4c:	bf18      	it	ne
 8005b4e:	2301      	movne	r3, #1
 8005b50:	0692      	lsls	r2, r2, #26
 8005b52:	d42d      	bmi.n	8005bb0 <_printf_common+0xb4>
 8005b54:	4649      	mov	r1, r9
 8005b56:	4638      	mov	r0, r7
 8005b58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b5c:	47c0      	blx	r8
 8005b5e:	3001      	adds	r0, #1
 8005b60:	d020      	beq.n	8005ba4 <_printf_common+0xa8>
 8005b62:	6823      	ldr	r3, [r4, #0]
 8005b64:	68e5      	ldr	r5, [r4, #12]
 8005b66:	f003 0306 	and.w	r3, r3, #6
 8005b6a:	2b04      	cmp	r3, #4
 8005b6c:	bf18      	it	ne
 8005b6e:	2500      	movne	r5, #0
 8005b70:	6832      	ldr	r2, [r6, #0]
 8005b72:	f04f 0600 	mov.w	r6, #0
 8005b76:	68a3      	ldr	r3, [r4, #8]
 8005b78:	bf08      	it	eq
 8005b7a:	1aad      	subeq	r5, r5, r2
 8005b7c:	6922      	ldr	r2, [r4, #16]
 8005b7e:	bf08      	it	eq
 8005b80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b84:	4293      	cmp	r3, r2
 8005b86:	bfc4      	itt	gt
 8005b88:	1a9b      	subgt	r3, r3, r2
 8005b8a:	18ed      	addgt	r5, r5, r3
 8005b8c:	341a      	adds	r4, #26
 8005b8e:	42b5      	cmp	r5, r6
 8005b90:	d11a      	bne.n	8005bc8 <_printf_common+0xcc>
 8005b92:	2000      	movs	r0, #0
 8005b94:	e008      	b.n	8005ba8 <_printf_common+0xac>
 8005b96:	2301      	movs	r3, #1
 8005b98:	4652      	mov	r2, sl
 8005b9a:	4649      	mov	r1, r9
 8005b9c:	4638      	mov	r0, r7
 8005b9e:	47c0      	blx	r8
 8005ba0:	3001      	adds	r0, #1
 8005ba2:	d103      	bne.n	8005bac <_printf_common+0xb0>
 8005ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bac:	3501      	adds	r5, #1
 8005bae:	e7c4      	b.n	8005b3a <_printf_common+0x3e>
 8005bb0:	2030      	movs	r0, #48	; 0x30
 8005bb2:	18e1      	adds	r1, r4, r3
 8005bb4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005bb8:	1c5a      	adds	r2, r3, #1
 8005bba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005bbe:	4422      	add	r2, r4
 8005bc0:	3302      	adds	r3, #2
 8005bc2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005bc6:	e7c5      	b.n	8005b54 <_printf_common+0x58>
 8005bc8:	2301      	movs	r3, #1
 8005bca:	4622      	mov	r2, r4
 8005bcc:	4649      	mov	r1, r9
 8005bce:	4638      	mov	r0, r7
 8005bd0:	47c0      	blx	r8
 8005bd2:	3001      	adds	r0, #1
 8005bd4:	d0e6      	beq.n	8005ba4 <_printf_common+0xa8>
 8005bd6:	3601      	adds	r6, #1
 8005bd8:	e7d9      	b.n	8005b8e <_printf_common+0x92>
	...

08005bdc <_printf_i>:
 8005bdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005be0:	460c      	mov	r4, r1
 8005be2:	7e27      	ldrb	r7, [r4, #24]
 8005be4:	4691      	mov	r9, r2
 8005be6:	2f78      	cmp	r7, #120	; 0x78
 8005be8:	4680      	mov	r8, r0
 8005bea:	469a      	mov	sl, r3
 8005bec:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005bee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bf2:	d807      	bhi.n	8005c04 <_printf_i+0x28>
 8005bf4:	2f62      	cmp	r7, #98	; 0x62
 8005bf6:	d80a      	bhi.n	8005c0e <_printf_i+0x32>
 8005bf8:	2f00      	cmp	r7, #0
 8005bfa:	f000 80d9 	beq.w	8005db0 <_printf_i+0x1d4>
 8005bfe:	2f58      	cmp	r7, #88	; 0x58
 8005c00:	f000 80a4 	beq.w	8005d4c <_printf_i+0x170>
 8005c04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005c08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c0c:	e03a      	b.n	8005c84 <_printf_i+0xa8>
 8005c0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c12:	2b15      	cmp	r3, #21
 8005c14:	d8f6      	bhi.n	8005c04 <_printf_i+0x28>
 8005c16:	a001      	add	r0, pc, #4	; (adr r0, 8005c1c <_printf_i+0x40>)
 8005c18:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005c1c:	08005c75 	.word	0x08005c75
 8005c20:	08005c89 	.word	0x08005c89
 8005c24:	08005c05 	.word	0x08005c05
 8005c28:	08005c05 	.word	0x08005c05
 8005c2c:	08005c05 	.word	0x08005c05
 8005c30:	08005c05 	.word	0x08005c05
 8005c34:	08005c89 	.word	0x08005c89
 8005c38:	08005c05 	.word	0x08005c05
 8005c3c:	08005c05 	.word	0x08005c05
 8005c40:	08005c05 	.word	0x08005c05
 8005c44:	08005c05 	.word	0x08005c05
 8005c48:	08005d97 	.word	0x08005d97
 8005c4c:	08005cb9 	.word	0x08005cb9
 8005c50:	08005d79 	.word	0x08005d79
 8005c54:	08005c05 	.word	0x08005c05
 8005c58:	08005c05 	.word	0x08005c05
 8005c5c:	08005db9 	.word	0x08005db9
 8005c60:	08005c05 	.word	0x08005c05
 8005c64:	08005cb9 	.word	0x08005cb9
 8005c68:	08005c05 	.word	0x08005c05
 8005c6c:	08005c05 	.word	0x08005c05
 8005c70:	08005d81 	.word	0x08005d81
 8005c74:	680b      	ldr	r3, [r1, #0]
 8005c76:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005c7a:	1d1a      	adds	r2, r3, #4
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	600a      	str	r2, [r1, #0]
 8005c80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c84:	2301      	movs	r3, #1
 8005c86:	e0a4      	b.n	8005dd2 <_printf_i+0x1f6>
 8005c88:	6825      	ldr	r5, [r4, #0]
 8005c8a:	6808      	ldr	r0, [r1, #0]
 8005c8c:	062e      	lsls	r6, r5, #24
 8005c8e:	f100 0304 	add.w	r3, r0, #4
 8005c92:	d50a      	bpl.n	8005caa <_printf_i+0xce>
 8005c94:	6805      	ldr	r5, [r0, #0]
 8005c96:	600b      	str	r3, [r1, #0]
 8005c98:	2d00      	cmp	r5, #0
 8005c9a:	da03      	bge.n	8005ca4 <_printf_i+0xc8>
 8005c9c:	232d      	movs	r3, #45	; 0x2d
 8005c9e:	426d      	negs	r5, r5
 8005ca0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ca4:	230a      	movs	r3, #10
 8005ca6:	485e      	ldr	r0, [pc, #376]	; (8005e20 <_printf_i+0x244>)
 8005ca8:	e019      	b.n	8005cde <_printf_i+0x102>
 8005caa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005cae:	6805      	ldr	r5, [r0, #0]
 8005cb0:	600b      	str	r3, [r1, #0]
 8005cb2:	bf18      	it	ne
 8005cb4:	b22d      	sxthne	r5, r5
 8005cb6:	e7ef      	b.n	8005c98 <_printf_i+0xbc>
 8005cb8:	680b      	ldr	r3, [r1, #0]
 8005cba:	6825      	ldr	r5, [r4, #0]
 8005cbc:	1d18      	adds	r0, r3, #4
 8005cbe:	6008      	str	r0, [r1, #0]
 8005cc0:	0628      	lsls	r0, r5, #24
 8005cc2:	d501      	bpl.n	8005cc8 <_printf_i+0xec>
 8005cc4:	681d      	ldr	r5, [r3, #0]
 8005cc6:	e002      	b.n	8005cce <_printf_i+0xf2>
 8005cc8:	0669      	lsls	r1, r5, #25
 8005cca:	d5fb      	bpl.n	8005cc4 <_printf_i+0xe8>
 8005ccc:	881d      	ldrh	r5, [r3, #0]
 8005cce:	2f6f      	cmp	r7, #111	; 0x6f
 8005cd0:	bf0c      	ite	eq
 8005cd2:	2308      	moveq	r3, #8
 8005cd4:	230a      	movne	r3, #10
 8005cd6:	4852      	ldr	r0, [pc, #328]	; (8005e20 <_printf_i+0x244>)
 8005cd8:	2100      	movs	r1, #0
 8005cda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005cde:	6866      	ldr	r6, [r4, #4]
 8005ce0:	2e00      	cmp	r6, #0
 8005ce2:	bfa8      	it	ge
 8005ce4:	6821      	ldrge	r1, [r4, #0]
 8005ce6:	60a6      	str	r6, [r4, #8]
 8005ce8:	bfa4      	itt	ge
 8005cea:	f021 0104 	bicge.w	r1, r1, #4
 8005cee:	6021      	strge	r1, [r4, #0]
 8005cf0:	b90d      	cbnz	r5, 8005cf6 <_printf_i+0x11a>
 8005cf2:	2e00      	cmp	r6, #0
 8005cf4:	d04d      	beq.n	8005d92 <_printf_i+0x1b6>
 8005cf6:	4616      	mov	r6, r2
 8005cf8:	fbb5 f1f3 	udiv	r1, r5, r3
 8005cfc:	fb03 5711 	mls	r7, r3, r1, r5
 8005d00:	5dc7      	ldrb	r7, [r0, r7]
 8005d02:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d06:	462f      	mov	r7, r5
 8005d08:	42bb      	cmp	r3, r7
 8005d0a:	460d      	mov	r5, r1
 8005d0c:	d9f4      	bls.n	8005cf8 <_printf_i+0x11c>
 8005d0e:	2b08      	cmp	r3, #8
 8005d10:	d10b      	bne.n	8005d2a <_printf_i+0x14e>
 8005d12:	6823      	ldr	r3, [r4, #0]
 8005d14:	07df      	lsls	r7, r3, #31
 8005d16:	d508      	bpl.n	8005d2a <_printf_i+0x14e>
 8005d18:	6923      	ldr	r3, [r4, #16]
 8005d1a:	6861      	ldr	r1, [r4, #4]
 8005d1c:	4299      	cmp	r1, r3
 8005d1e:	bfde      	ittt	le
 8005d20:	2330      	movle	r3, #48	; 0x30
 8005d22:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d26:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005d2a:	1b92      	subs	r2, r2, r6
 8005d2c:	6122      	str	r2, [r4, #16]
 8005d2e:	464b      	mov	r3, r9
 8005d30:	4621      	mov	r1, r4
 8005d32:	4640      	mov	r0, r8
 8005d34:	f8cd a000 	str.w	sl, [sp]
 8005d38:	aa03      	add	r2, sp, #12
 8005d3a:	f7ff fedf 	bl	8005afc <_printf_common>
 8005d3e:	3001      	adds	r0, #1
 8005d40:	d14c      	bne.n	8005ddc <_printf_i+0x200>
 8005d42:	f04f 30ff 	mov.w	r0, #4294967295
 8005d46:	b004      	add	sp, #16
 8005d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d4c:	4834      	ldr	r0, [pc, #208]	; (8005e20 <_printf_i+0x244>)
 8005d4e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d52:	680e      	ldr	r6, [r1, #0]
 8005d54:	6823      	ldr	r3, [r4, #0]
 8005d56:	f856 5b04 	ldr.w	r5, [r6], #4
 8005d5a:	061f      	lsls	r7, r3, #24
 8005d5c:	600e      	str	r6, [r1, #0]
 8005d5e:	d514      	bpl.n	8005d8a <_printf_i+0x1ae>
 8005d60:	07d9      	lsls	r1, r3, #31
 8005d62:	bf44      	itt	mi
 8005d64:	f043 0320 	orrmi.w	r3, r3, #32
 8005d68:	6023      	strmi	r3, [r4, #0]
 8005d6a:	b91d      	cbnz	r5, 8005d74 <_printf_i+0x198>
 8005d6c:	6823      	ldr	r3, [r4, #0]
 8005d6e:	f023 0320 	bic.w	r3, r3, #32
 8005d72:	6023      	str	r3, [r4, #0]
 8005d74:	2310      	movs	r3, #16
 8005d76:	e7af      	b.n	8005cd8 <_printf_i+0xfc>
 8005d78:	6823      	ldr	r3, [r4, #0]
 8005d7a:	f043 0320 	orr.w	r3, r3, #32
 8005d7e:	6023      	str	r3, [r4, #0]
 8005d80:	2378      	movs	r3, #120	; 0x78
 8005d82:	4828      	ldr	r0, [pc, #160]	; (8005e24 <_printf_i+0x248>)
 8005d84:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d88:	e7e3      	b.n	8005d52 <_printf_i+0x176>
 8005d8a:	065e      	lsls	r6, r3, #25
 8005d8c:	bf48      	it	mi
 8005d8e:	b2ad      	uxthmi	r5, r5
 8005d90:	e7e6      	b.n	8005d60 <_printf_i+0x184>
 8005d92:	4616      	mov	r6, r2
 8005d94:	e7bb      	b.n	8005d0e <_printf_i+0x132>
 8005d96:	680b      	ldr	r3, [r1, #0]
 8005d98:	6826      	ldr	r6, [r4, #0]
 8005d9a:	1d1d      	adds	r5, r3, #4
 8005d9c:	6960      	ldr	r0, [r4, #20]
 8005d9e:	600d      	str	r5, [r1, #0]
 8005da0:	0635      	lsls	r5, r6, #24
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	d501      	bpl.n	8005daa <_printf_i+0x1ce>
 8005da6:	6018      	str	r0, [r3, #0]
 8005da8:	e002      	b.n	8005db0 <_printf_i+0x1d4>
 8005daa:	0671      	lsls	r1, r6, #25
 8005dac:	d5fb      	bpl.n	8005da6 <_printf_i+0x1ca>
 8005dae:	8018      	strh	r0, [r3, #0]
 8005db0:	2300      	movs	r3, #0
 8005db2:	4616      	mov	r6, r2
 8005db4:	6123      	str	r3, [r4, #16]
 8005db6:	e7ba      	b.n	8005d2e <_printf_i+0x152>
 8005db8:	680b      	ldr	r3, [r1, #0]
 8005dba:	1d1a      	adds	r2, r3, #4
 8005dbc:	600a      	str	r2, [r1, #0]
 8005dbe:	681e      	ldr	r6, [r3, #0]
 8005dc0:	2100      	movs	r1, #0
 8005dc2:	4630      	mov	r0, r6
 8005dc4:	6862      	ldr	r2, [r4, #4]
 8005dc6:	f000 f831 	bl	8005e2c <memchr>
 8005dca:	b108      	cbz	r0, 8005dd0 <_printf_i+0x1f4>
 8005dcc:	1b80      	subs	r0, r0, r6
 8005dce:	6060      	str	r0, [r4, #4]
 8005dd0:	6863      	ldr	r3, [r4, #4]
 8005dd2:	6123      	str	r3, [r4, #16]
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dda:	e7a8      	b.n	8005d2e <_printf_i+0x152>
 8005ddc:	4632      	mov	r2, r6
 8005dde:	4649      	mov	r1, r9
 8005de0:	4640      	mov	r0, r8
 8005de2:	6923      	ldr	r3, [r4, #16]
 8005de4:	47d0      	blx	sl
 8005de6:	3001      	adds	r0, #1
 8005de8:	d0ab      	beq.n	8005d42 <_printf_i+0x166>
 8005dea:	6823      	ldr	r3, [r4, #0]
 8005dec:	079b      	lsls	r3, r3, #30
 8005dee:	d413      	bmi.n	8005e18 <_printf_i+0x23c>
 8005df0:	68e0      	ldr	r0, [r4, #12]
 8005df2:	9b03      	ldr	r3, [sp, #12]
 8005df4:	4298      	cmp	r0, r3
 8005df6:	bfb8      	it	lt
 8005df8:	4618      	movlt	r0, r3
 8005dfa:	e7a4      	b.n	8005d46 <_printf_i+0x16a>
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	4632      	mov	r2, r6
 8005e00:	4649      	mov	r1, r9
 8005e02:	4640      	mov	r0, r8
 8005e04:	47d0      	blx	sl
 8005e06:	3001      	adds	r0, #1
 8005e08:	d09b      	beq.n	8005d42 <_printf_i+0x166>
 8005e0a:	3501      	adds	r5, #1
 8005e0c:	68e3      	ldr	r3, [r4, #12]
 8005e0e:	9903      	ldr	r1, [sp, #12]
 8005e10:	1a5b      	subs	r3, r3, r1
 8005e12:	42ab      	cmp	r3, r5
 8005e14:	dcf2      	bgt.n	8005dfc <_printf_i+0x220>
 8005e16:	e7eb      	b.n	8005df0 <_printf_i+0x214>
 8005e18:	2500      	movs	r5, #0
 8005e1a:	f104 0619 	add.w	r6, r4, #25
 8005e1e:	e7f5      	b.n	8005e0c <_printf_i+0x230>
 8005e20:	08005fd3 	.word	0x08005fd3
 8005e24:	08005fe4 	.word	0x08005fe4

08005e28 <__retarget_lock_acquire_recursive>:
 8005e28:	4770      	bx	lr

08005e2a <__retarget_lock_release_recursive>:
 8005e2a:	4770      	bx	lr

08005e2c <memchr>:
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	b510      	push	{r4, lr}
 8005e30:	b2c9      	uxtb	r1, r1
 8005e32:	4402      	add	r2, r0
 8005e34:	4293      	cmp	r3, r2
 8005e36:	4618      	mov	r0, r3
 8005e38:	d101      	bne.n	8005e3e <memchr+0x12>
 8005e3a:	2000      	movs	r0, #0
 8005e3c:	e003      	b.n	8005e46 <memchr+0x1a>
 8005e3e:	7804      	ldrb	r4, [r0, #0]
 8005e40:	3301      	adds	r3, #1
 8005e42:	428c      	cmp	r4, r1
 8005e44:	d1f6      	bne.n	8005e34 <memchr+0x8>
 8005e46:	bd10      	pop	{r4, pc}

08005e48 <memcpy>:
 8005e48:	440a      	add	r2, r1
 8005e4a:	4291      	cmp	r1, r2
 8005e4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e50:	d100      	bne.n	8005e54 <memcpy+0xc>
 8005e52:	4770      	bx	lr
 8005e54:	b510      	push	{r4, lr}
 8005e56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e5a:	4291      	cmp	r1, r2
 8005e5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e60:	d1f9      	bne.n	8005e56 <memcpy+0xe>
 8005e62:	bd10      	pop	{r4, pc}

08005e64 <memmove>:
 8005e64:	4288      	cmp	r0, r1
 8005e66:	b510      	push	{r4, lr}
 8005e68:	eb01 0402 	add.w	r4, r1, r2
 8005e6c:	d902      	bls.n	8005e74 <memmove+0x10>
 8005e6e:	4284      	cmp	r4, r0
 8005e70:	4623      	mov	r3, r4
 8005e72:	d807      	bhi.n	8005e84 <memmove+0x20>
 8005e74:	1e43      	subs	r3, r0, #1
 8005e76:	42a1      	cmp	r1, r4
 8005e78:	d008      	beq.n	8005e8c <memmove+0x28>
 8005e7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e82:	e7f8      	b.n	8005e76 <memmove+0x12>
 8005e84:	4601      	mov	r1, r0
 8005e86:	4402      	add	r2, r0
 8005e88:	428a      	cmp	r2, r1
 8005e8a:	d100      	bne.n	8005e8e <memmove+0x2a>
 8005e8c:	bd10      	pop	{r4, pc}
 8005e8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e96:	e7f7      	b.n	8005e88 <memmove+0x24>

08005e98 <_realloc_r>:
 8005e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9a:	4607      	mov	r7, r0
 8005e9c:	4614      	mov	r4, r2
 8005e9e:	460e      	mov	r6, r1
 8005ea0:	b921      	cbnz	r1, 8005eac <_realloc_r+0x14>
 8005ea2:	4611      	mov	r1, r2
 8005ea4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005ea8:	f7ff bc36 	b.w	8005718 <_malloc_r>
 8005eac:	b922      	cbnz	r2, 8005eb8 <_realloc_r+0x20>
 8005eae:	f7ff fbe7 	bl	8005680 <_free_r>
 8005eb2:	4625      	mov	r5, r4
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005eb8:	f000 f814 	bl	8005ee4 <_malloc_usable_size_r>
 8005ebc:	42a0      	cmp	r0, r4
 8005ebe:	d20f      	bcs.n	8005ee0 <_realloc_r+0x48>
 8005ec0:	4621      	mov	r1, r4
 8005ec2:	4638      	mov	r0, r7
 8005ec4:	f7ff fc28 	bl	8005718 <_malloc_r>
 8005ec8:	4605      	mov	r5, r0
 8005eca:	2800      	cmp	r0, #0
 8005ecc:	d0f2      	beq.n	8005eb4 <_realloc_r+0x1c>
 8005ece:	4631      	mov	r1, r6
 8005ed0:	4622      	mov	r2, r4
 8005ed2:	f7ff ffb9 	bl	8005e48 <memcpy>
 8005ed6:	4631      	mov	r1, r6
 8005ed8:	4638      	mov	r0, r7
 8005eda:	f7ff fbd1 	bl	8005680 <_free_r>
 8005ede:	e7e9      	b.n	8005eb4 <_realloc_r+0x1c>
 8005ee0:	4635      	mov	r5, r6
 8005ee2:	e7e7      	b.n	8005eb4 <_realloc_r+0x1c>

08005ee4 <_malloc_usable_size_r>:
 8005ee4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ee8:	1f18      	subs	r0, r3, #4
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	bfbc      	itt	lt
 8005eee:	580b      	ldrlt	r3, [r1, r0]
 8005ef0:	18c0      	addlt	r0, r0, r3
 8005ef2:	4770      	bx	lr

08005ef4 <_init>:
 8005ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ef6:	bf00      	nop
 8005ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005efa:	bc08      	pop	{r3}
 8005efc:	469e      	mov	lr, r3
 8005efe:	4770      	bx	lr

08005f00 <_fini>:
 8005f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f02:	bf00      	nop
 8005f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f06:	bc08      	pop	{r3}
 8005f08:	469e      	mov	lr, r3
 8005f0a:	4770      	bx	lr
